org.joda.time.tz.DateTimeZoneBuilder$OfYear extends java.lang.Object
final boolean iAdvance
final int iDayOfMonth
final int iDayOfWeek
final int iMillisOfDay
final char iMode
final int iMonthOfYear
    void <init>(char, int, int, int, boolean, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        char $c0;
        int $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $i4 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $c0 == 117 goto label1;

        if $c0 == 119 goto label1;

        if $c0 == 115 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown mode: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> = $c0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> = $i1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> = $i2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> = $i3;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> = $z0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> = $i4;

        return;
    }
    static org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)
    {
        java.io.DataInput $r0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;
        int $i0, $i3, $i5;
        char $c1;
        byte $b2;
        boolean $z0;
        long $l4;

        $r0 := @parameter0: java.io.DataInput;

        $r1 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $c1 = (char) $i0;

        $i0 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $b2 = interfaceinvoke $r0.<java.io.DataInput: byte readByte()>();

        $i3 = interfaceinvoke $r0.<java.io.DataInput: int readUnsignedByte()>();

        $z0 = interfaceinvoke $r0.<java.io.DataInput: boolean readBoolean()>();

        $l4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>($r0);

        $i5 = (int) $l4;

        specialinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>($c1, $i0, $b2, $i3, $z0, $i5);

        return $r1;
    }
    private long setDayOfMonth(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology $r1;
        long $l0;
        int $i1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 := @parameter1: long;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i1 < 0 goto label1;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        return $l0;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, 1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l0, 1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l0, $i1);

        return $l0;
    }
    private long setDayOfMonthNext(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology $r1;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r2;
        int $i2;
        org.joda.time.DateTimeField $r3;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 := @parameter1: long;

     label1:
        $l1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>($r1, $l0);

     label2:
        return $l1;

     label3:
        $r2 := @caughtexception;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        if $i2 != 2 goto label6;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i2 != 29 goto label6;

     label4:
        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        if $z0 != 0 goto label5;

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>($l0, 1);

        goto label4;

     label5:
        $l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>($r1, $l0);

        return $l0;

     label6:
        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
    private long setDayOfMonthPrevious(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology $r1;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r2;
        int $i2;
        org.joda.time.DateTimeField $r3;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 := @parameter1: long;

     label1:
        $l1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>($r1, $l0);

     label2:
        return $l1;

     label3:
        $r2 := @caughtexception;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        if $i2 != 2 goto label6;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i2 != 29 goto label6;

     label4:
        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeField: boolean isLeap(long)>($l0);

        if $z0 != 0 goto label5;

        $r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>($l0, -1);

        goto label4;

     label5:
        $l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>($r1, $l0);

        return $l0;

     label6:
        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }
    private long setDayOfWeek(org.joda.time.Chronology, long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        org.joda.time.Chronology $r1;
        long $l0;
        org.joda.time.DateTimeField $r2;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $r1 := @parameter0: org.joda.time.Chronology;

        $l0 := @parameter1: long;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        $i1 = $i2 - $i1;

        if $i1 == 0 goto label3;

        $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        if $z0 == 0 goto label2;

        if $i1 >= 0 goto label1;

        $i1 = $i1 + 7;

     label1:
        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l0, $i1);

        return $l0;

     label2:
        if $i1 <= 0 goto label1;

        $i1 = $i1 + -7;

        goto label1;

     label3:
        return $l0;
    }
    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0, $r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        char $c0, $c1;
        int $i2, $i3;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        if $z0 == 0 goto label2;

        $r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) $r1;

        $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        $c1 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c0 != $c1 goto label2;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $i3 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        if $i2 != $i3 goto label2;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        $i3 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        if $i2 != $i3 goto label2;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        $i3 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i2 != $i3 goto label2;

        $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        $z1 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        if $z0 != $z1 goto label2;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $i3 = $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        if $i2 == $i3 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }
    public long next(long, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        long $l0, $l4, $l5;
        int $i1, $i2;
        char $c3;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.DateTimeField $r2;
        byte $b6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $l0 := @parameter0: long;

        $i2 := @parameter1: int;

        $i1 := @parameter2: int;

        $c3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c3 != 119 goto label3;

        $i2 = $i2 + $i1;

     label1:
        $l4 = (long) $i2;

        $l0 = $l4 + $l0;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l4, 0);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l4, $i1);

        $l5 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>($r1, $l4);

        $l4 = $l5;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i1 != 0 goto label4;

        $b6 = $l5 cmp $l0;

        if $b6 > 0 goto label2;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l5, 1);

        $l4 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>($r1, $l0);

     label2:
        $l0 = (long) $i2;

        $l0 = $l4 - $l0;

        return $l0;

     label3:
        $c3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c3 == 115 goto label1;

        $i2 = 0;

        goto label1;

     label4:
        $l5 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r1, $l5);

        $l4 = $l5;

        $b6 = $l5 cmp $l0;

        if $b6 > 0 goto label2;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l5, 1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>($r1, $l0);

        $l4 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r1, $l0);

        goto label2;
    }
    public long previous(long, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        long $l0, $l4, $l5;
        int $i1, $i2;
        char $c3;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.DateTimeField $r2;
        byte $b6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $l0 := @parameter0: long;

        $i2 := @parameter1: int;

        $i1 := @parameter2: int;

        $c3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c3 != 119 goto label3;

        $i2 = $i2 + $i1;

     label1:
        $l4 = (long) $i2;

        $l0 = $l4 + $l0;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l4, 0);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l4, $i1);

        $l5 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>($r1, $l4);

        $l4 = $l5;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i1 != 0 goto label4;

        $b6 = $l5 cmp $l0;

        if $b6 < 0 goto label2;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l5, -1);

        $l4 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>($r1, $l0);

     label2:
        $l0 = (long) $i2;

        $l0 = $l4 - $l0;

        return $l0;

     label3:
        $c3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c3 == 115 goto label1;

        $i2 = 0;

        goto label1;

     label4:
        $l5 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r1, $l5);

        $l4 = $l5;

        $b6 = $l5 cmp $l0;

        if $b6 < 0 goto label2;

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long add(long,int)>($l5, -1);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l0 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l0, $i1);

        $l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>($r1, $l0);

        $l4 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r1, $l0);

        goto label2;
    }
    public long setInstant(int, int, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        int $i0, $i1, $i2;
        char $c3;
        org.joda.time.chrono.ISOChronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l4, $l5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $i0 := @parameter0: int;

        $i2 := @parameter1: int;

        $i1 := @parameter2: int;

        $c3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c3 != 119 goto label3;

        $i2 = $i2 + $i1;

     label1:
        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i0);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i0);

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l4, $i0);

        $l5 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>($r1, $l4);

        $l4 = $l5;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        if $i0 == 0 goto label2;

        $l4 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>($r1, $l5);

     label2:
        $l5 = (long) $i2;

        $l4 = $l4 - $l5;

        return $l4;

     label3:
        $c3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        if $c3 == 115 goto label1;

        $i2 = 0;

        goto label1;
    }
    public void writeTo(java.io.DataOutput)
    {
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r0;
        java.io.DataOutput $r1;
        char $c0;
        int $i1;
        boolean $z0;
        long $l2;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        $r1 := @parameter0: java.io.DataOutput;

        $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeByte(int)>($c0);

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeByte(int)>($i1);

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeByte(int)>($i1);

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeByte(int)>($i1);

        $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>;

        interfaceinvoke $r1.<java.io.DataOutput: void writeBoolean(boolean)>($z0);

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>;

        $l2 = (long) $i1;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>($r1, $l2);

        return;
    }
