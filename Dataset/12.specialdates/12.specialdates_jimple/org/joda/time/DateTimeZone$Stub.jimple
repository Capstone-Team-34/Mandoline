org.joda.time.DateTimeZone$Stub extends java.lang.Object implements java.io.Serializable
private static final long serialVersionUID
private transient java.lang.String iID
    void <init>(java.lang.String)
    {
        org.joda.time.DateTimeZone$Stub r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.DateTimeZone$Stub;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID> = $r1;

        return;
    }
    private void readObject(java.io.ObjectInputStream)
    {
        org.joda.time.DateTimeZone$Stub r0;
        java.io.ObjectInputStream $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.DateTimeZone$Stub;

        $r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = virtualinvoke $r1.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID> = $r2;

        return;
    }
    private java.lang.Object readResolve()
    {
        org.joda.time.DateTimeZone$Stub r0;
        org.joda.time.DateTimeZone $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.DateTimeZone$Stub;

        $r2 = r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID>;

        $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>($r2);

        return $r1;
    }
    private void writeObject(java.io.ObjectOutputStream)
    {
        org.joda.time.DateTimeZone$Stub r0;
        java.io.ObjectOutputStream $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.DateTimeZone$Stub;

        $r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID>;

        virtualinvoke $r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r2);

        return;
    }
