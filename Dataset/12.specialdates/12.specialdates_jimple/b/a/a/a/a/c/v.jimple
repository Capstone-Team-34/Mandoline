b.a.a.a.a.c.v extends java.lang.Object implements b.a.a.a.a.c.l b.a.a.a.a.c.u b.a.a.a.a.c.y
private final java.util.List dependencies
private final java.util.concurrent.atomic.AtomicBoolean hasRun
private final java.util.concurrent.atomic.AtomicReference throwable
    public void <init>()
    {
        b.a.a.a.a.c.v r0;
        java.util.ArrayList $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: b.a.a.a.a.c.v;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<b.a.a.a.a.c.v: java.util.List dependencies> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<b.a.a.a.a.c.v: java.util.concurrent.atomic.AtomicBoolean hasRun> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<b.a.a.a.a.c.v: java.util.concurrent.atomic.AtomicReference throwable> = $r3;

        return;
    }
    public static boolean isProperDelegate(java.lang.Object)
    {
        java.lang.Object $r0;
        b.a.a.a.a.c.l $r1;
        b.a.a.a.a.c.y $r2;
        b.a.a.a.a.c.u $r3;
        java.lang.ClassCastException $r4;

        $r0 := @parameter0: java.lang.Object;

     label1:
        $r1 = (b.a.a.a.a.c.l) $r0;

        $r2 = (b.a.a.a.a.c.y) $r0;

        $r3 = (b.a.a.a.a.c.u) $r0;

     label2:
        if $r1 == null goto label3;

        if $r2 == null goto label3;

        if $r3 == null goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label4;
    }
    public void addDependency(b.a.a.a.a.c.y)
    {
        b.a.a.a.a.c.v r0;
        b.a.a.a.a.c.y $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        r0 := @this: b.a.a.a.a.c.v;

        $r1 := @parameter0: b.a.a.a.a.c.y;

        entermonitor r0;

     label1:
        $r2 = r0.<b.a.a.a.a.c.v: java.util.List dependencies>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public volatile void addDependency(java.lang.Object)
    {
        b.a.a.a.a.c.v r0;
        java.lang.Object $r1;
        b.a.a.a.a.c.y $r2;

        r0 := @this: b.a.a.a.a.c.v;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (b.a.a.a.a.c.y) $r1;

        virtualinvoke r0.<b.a.a.a.a.c.v: void addDependency(b.a.a.a.a.c.y)>($r2);

        return;
    }
    public boolean areDependenciesMet()
    {
        b.a.a.a.a.c.v r0;
        java.util.Collection $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        b.a.a.a.a.c.y $r4;

        r0 := @this: b.a.a.a.a.c.v;

        $r1 = virtualinvoke r0.<b.a.a.a.a.c.v: java.util.Collection getDependencies()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (b.a.a.a.a.c.y) $r3;

        $z0 = interfaceinvoke $r4.<b.a.a.a.a.c.y: boolean isFinished()>();

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }
    public int compareTo(java.lang.Object)
    {
        b.a.a.a.a.c.v r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: b.a.a.a.a.c.v;

        $r1 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <b.a.a.a.a.c.o: int a(b.a.a.a.a.c.u,java.lang.Object)>(r0, $r1);

        return $i0;
    }
    public java.util.Collection getDependencies()
    {
        b.a.a.a.a.c.v r0;
        java.util.Collection $r1;
        java.util.List $r2;
        java.lang.Throwable $r3;

        r0 := @this: b.a.a.a.a.c.v;

        entermonitor r0;

     label1:
        $r2 = r0.<b.a.a.a.a.c.v: java.util.List dependencies>;

        $r1 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2);

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.lang.Throwable getError()
    {
        b.a.a.a.a.c.v r0;
        java.lang.Object $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Throwable $r3;

        r0 := @this: b.a.a.a.a.c.v;

        $r2 = r0.<b.a.a.a.a.c.v: java.util.concurrent.atomic.AtomicReference throwable>;

        $r1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (java.lang.Throwable) $r1;

        return $r3;
    }
    public b.a.a.a.a.c.o getPriority()
    {
        b.a.a.a.a.c.v r0;
        b.a.a.a.a.c.o r1;

        r0 := @this: b.a.a.a.a.c.v;

        r1 = <b.a.a.a.a.c.o: b.a.a.a.a.c.o b>;

        return r1;
    }
    public boolean isFinished()
    {
        b.a.a.a.a.c.v r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: b.a.a.a.a.c.v;

        $r1 = r0.<b.a.a.a.a.c.v: java.util.concurrent.atomic.AtomicBoolean hasRun>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }
    public void setError(java.lang.Throwable)
    {
        b.a.a.a.a.c.v r0;
        java.lang.Throwable $r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: b.a.a.a.a.c.v;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<b.a.a.a.a.c.v: java.util.concurrent.atomic.AtomicReference throwable>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r1);

        return;
    }
    public void setFinished(boolean)
    {
        b.a.a.a.a.c.v r0;
        boolean $z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.lang.Throwable $r2;

        r0 := @this: b.a.a.a.a.c.v;

        $z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        $r1 = r0.<b.a.a.a.a.c.v: java.util.concurrent.atomic.AtomicBoolean hasRun>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>($z0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
