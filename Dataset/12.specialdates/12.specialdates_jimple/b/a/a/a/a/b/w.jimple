b.a.a.a.a.b.w extends java.lang.Object implements java.util.concurrent.ThreadFactory
final java.lang.String a
final java.util.concurrent.atomic.AtomicLong b
    void <init>(java.lang.String, java.util.concurrent.atomic.AtomicLong)
    {
        b.a.a.a.a.b.w r0;
        java.lang.String $r1;
        java.util.concurrent.atomic.AtomicLong $r2;

        r0 := @this: b.a.a.a.a.b.w;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.concurrent.atomic.AtomicLong;

        r0.<b.a.a.a.a.b.w: java.lang.String a> = $r1;

        r0.<b.a.a.a.a.b.w: java.util.concurrent.atomic.AtomicLong b> = $r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.lang.Thread newThread(java.lang.Runnable)
    {
        b.a.a.a.a.b.w r0;
        java.lang.Runnable $r1;
        java.util.concurrent.ThreadFactory $r2;
        b.a.a.a.a.b.x $r3;
        java.lang.Thread $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.util.concurrent.atomic.AtomicLong $r7;
        long $l0;

        r0 := @this: b.a.a.a.a.b.w;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        $r3 = new b.a.a.a.a.b.x;

        specialinvoke $r3.<b.a.a.a.a.b.x: void <init>(b.a.a.a.a.b.w,java.lang.Runnable)>(r0, $r1);

        $r4 = interfaceinvoke $r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>($r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<b.a.a.a.a.b.w: java.lang.String a>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = r0.<b.a.a.a.a.b.w: java.util.concurrent.atomic.AtomicLong b>;

        $l0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.Thread: void setName(java.lang.String)>($r6);

        return $r4;
    }
