MandolineLogger extends java.lang.Object
static final int SIZE
static final int DOUBLE_SIZE
static java.util.ArrayList queue
    public void <init>()
    {
        MandolineLogger r0;

        r0 := @this: MandolineLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static synchronized void println(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r4;
        java.io.PrintStream $r1;
        java.lang.String r3, $r5;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SLICING:");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }
    public static synchronized void flush(java.lang.String)
    {
        java.io.PrintStream $r0, $r5;
        java.lang.StringBuilder $r1, r2;
        java.util.ArrayList $r3, $r7;
        java.util.Iterator r4;
        boolean $z0;
        java.lang.String $r6, r9, r12;
        java.lang.Object $r8;

        r12 := @parameter0: java.lang.String;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Flushing queue");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("SLICING:");

        r2 = $r1;

        $r3 = <MandolineLogger: java.util.ArrayList queue>;

        r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r8;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        goto label1;

     label2:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(2);

        <MandolineLogger: java.util.ArrayList queue> = $r7;

        return;
    }
    static void <clinit>()
    {
        java.util.ArrayList $r0;
        java.lang.Runtime $r1;
        MandolineShutdown $r2;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        <MandolineLogger: java.util.ArrayList queue> = $r0;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r2 = new MandolineShutdown;

        specialinvoke $r2.<MandolineShutdown: void <init>()>();

        virtualinvoke $r1.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r2);

        return;
    }
