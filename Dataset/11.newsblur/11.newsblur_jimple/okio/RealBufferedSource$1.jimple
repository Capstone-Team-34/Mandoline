okio.RealBufferedSource$1 extends java.io.InputStream
final okio.RealBufferedSource this$0
    void <init>(okio.RealBufferedSource)
    {
        okio.RealBufferedSource$1 r0;
        okio.RealBufferedSource $r1;

        r0 := @this: okio.RealBufferedSource$1;

        $r1 := @parameter0: okio.RealBufferedSource;

        r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0> = $r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        return;
    }
    public int available() throws java.io.IOException
    {
        okio.RealBufferedSource$1 r0;
        long $l0;
        okio.RealBufferedSource $r1;
        boolean $z0;
        java.io.IOException $r2;
        okio.Buffer $r3;
        int $i1;

        r0 := @this: okio.RealBufferedSource$1;

        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $z0 = $r1.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r3 = $r1.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = $r3.<okio.Buffer: long size>;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, 2147483647L);

        $i1 = (int) $l0;

        return $i1;
    }
    public void close() throws java.io.IOException
    {
        okio.RealBufferedSource$1 r0;
        okio.RealBufferedSource $r1;

        r0 := @this: okio.RealBufferedSource$1;

        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        virtualinvoke $r1.<okio.RealBufferedSource: void close()>();

        return;
    }
    public int read() throws java.io.IOException
    {
        okio.RealBufferedSource$1 r0;
        okio.RealBufferedSource $r1;
        boolean $z0;
        java.io.IOException $r2;
        okio.Buffer $r3;
        long $l0;
        byte $b1;
        okio.Source $r4;
        int $i2;

        r0 := @this: okio.RealBufferedSource$1;

        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $z0 = $r1.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r3 = $r1.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = $r3.<okio.Buffer: long size>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r4 = $r1.<okio.RealBufferedSource: okio.Source source>;

        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r3 = $r1.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l0 = interfaceinvoke $r4.<okio.Source: long read(okio.Buffer,long)>($r3, 8192L);

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label2;

        return -1;

     label2:
        $r1 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r3 = $r1.<okio.RealBufferedSource: okio.Buffer buffer>;

        $b1 = virtualinvoke $r3.<okio.Buffer: byte readByte()>();

        $i2 = $b1 & 255;

        return $i2;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        okio.RealBufferedSource$1 r0;
        byte[] $r1;
        int $i0, $i1, $i3;
        long $l2, $l4, $l5;
        okio.RealBufferedSource $r2;
        boolean $z0;
        java.io.IOException $r3;
        okio.Buffer $r4;
        byte $b6;
        okio.Source $r5;

        r0 := @this: okio.RealBufferedSource$1;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $z0 = $r2.<okio.RealBufferedSource: boolean closed>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("closed");

        throw $r3;

     label1:
        $i3 = lengthof $r1;

        $l4 = (long) $i3;

        $l5 = (long) $i0;

        $l2 = (long) $i1;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l4, $l5, $l2);

        $r2 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r4 = $r2.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = $r4.<okio.Buffer: long size>;

        $b6 = $l2 cmp 0L;

        if $b6 != 0 goto label2;

        $r2 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r5 = $r2.<okio.RealBufferedSource: okio.Source source>;

        $r2 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r4 = $r2.<okio.RealBufferedSource: okio.Buffer buffer>;

        $l2 = interfaceinvoke $r5.<okio.Source: long read(okio.Buffer,long)>($r4, 8192L);

        $b6 = $l2 cmp -1L;

        if $b6 != 0 goto label2;

        return -1;

     label2:
        $r2 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r4 = $r2.<okio.RealBufferedSource: okio.Buffer buffer>;

        $i0 = virtualinvoke $r4.<okio.Buffer: int read(byte[],int,int)>($r1, $i0, $i1);

        return $i0;
    }
    public java.lang.String toString()
    {
        okio.RealBufferedSource$1 r0;
        java.lang.StringBuilder $r1;
        okio.RealBufferedSource $r2;
        java.lang.String $r3;

        r0 := @this: okio.RealBufferedSource$1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<okio.RealBufferedSource$1: okio.RealBufferedSource this$0>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".inputStream()");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
