okio.AsyncTimeout$Watchdog extends java.lang.Thread
    void <init>()
    {
        okio.AsyncTimeout$Watchdog r0;

        r0 := @this: okio.AsyncTimeout$Watchdog;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("Okio Watchdog");

        virtualinvoke r0.<okio.AsyncTimeout$Watchdog: void setDaemon(boolean)>(1);

        return;
    }
    public void run()
    {
        okio.AsyncTimeout$Watchdog r0;
        okio.AsyncTimeout $r1, $r4;
        java.lang.Throwable $r2;
        java.lang.InterruptedException $r3;

        r0 := @this: okio.AsyncTimeout$Watchdog;

     label01:
        entermonitor class "Lokio/AsyncTimeout;";

     label02:
        $r1 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout awaitTimeout()>();

        if $r1 != null goto label07;

        exitmonitor class "Lokio/AsyncTimeout;";

     label03:
        goto label01;

     label04:
        $r2 := @caughtexception;

        exitmonitor class "Lokio/AsyncTimeout;";

     label05:
        throw $r2;

     label06:
        $r3 := @caughtexception;

        goto label01;

     label07:
        $r4 = <okio.AsyncTimeout: okio.AsyncTimeout head>;

        if $r1 != $r4 goto label09;

        <okio.AsyncTimeout: okio.AsyncTimeout head> = null;

        exitmonitor class "Lokio/AsyncTimeout;";

     label08:
        return;

     label09:
        exitmonitor class "Lokio/AsyncTimeout;";

     label10:
        virtualinvoke $r1.<okio.AsyncTimeout: void timedOut()>();

     label11:
        goto label01;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.InterruptedException from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.InterruptedException from label10 to label11 with label06;
    }
