okio.Okio extends java.lang.Object
static final java.util.logging.Logger logger
    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lokio/Okio;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <okio.Okio: java.util.logging.Logger logger> = $r2;

        return;
    }
    private void <init>()
    {
        okio.Okio r0;

        r0 := @this: okio.Okio;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static okio.Sink appendingSink(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.File $r0;
        okio.Sink $r1;
        java.lang.IllegalArgumentException $r2;
        java.io.FileOutputStream $r3;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file == null");

        throw $r2;

     label1:
        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r0, 1);

        $r1 = staticinvoke <okio.Okio: okio.Sink sink(java.io.OutputStream)>($r3);

        return $r1;
    }
    public static okio.Sink blackhole()
    {
        okio.Okio$3 $r0;

        $r0 = new okio.Okio$3;

        specialinvoke $r0.<okio.Okio$3: void <init>()>();

        return $r0;
    }
    public static okio.BufferedSink buffer(okio.Sink)
    {
        okio.Sink $r0;
        okio.RealBufferedSink $r1;

        $r0 := @parameter0: okio.Sink;

        $r1 = new okio.RealBufferedSink;

        specialinvoke $r1.<okio.RealBufferedSink: void <init>(okio.Sink)>($r0);

        return $r1;
    }
    public static okio.BufferedSource buffer(okio.Source)
    {
        okio.Source $r0;
        okio.RealBufferedSource $r1;

        $r0 := @parameter0: okio.Source;

        $r1 = new okio.RealBufferedSource;

        specialinvoke $r1.<okio.RealBufferedSource: void <init>(okio.Source)>($r0);

        return $r1;
    }
    static boolean isAndroidGetsocknameError(java.lang.AssertionError)
    {
        java.lang.AssertionError $r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.AssertionError;

        $r1 = virtualinvoke $r0.<java.lang.AssertionError: java.lang.Throwable getCause()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.AssertionError: java.lang.String getMessage()>();

        if $r2 == null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.AssertionError: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("getsockname failed");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static okio.Sink sink(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.File $r0;
        okio.Sink $r1;
        java.lang.IllegalArgumentException $r2;
        java.io.FileOutputStream $r3;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file == null");

        throw $r2;

     label1:
        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r0);

        $r1 = staticinvoke <okio.Okio: okio.Sink sink(java.io.OutputStream)>($r3);

        return $r1;
    }
    public static okio.Sink sink(java.io.OutputStream)
    {
        java.io.OutputStream $r0;
        okio.Sink $r1;
        okio.Timeout $r2;

        $r0 := @parameter0: java.io.OutputStream;

        $r2 = new okio.Timeout;

        specialinvoke $r2.<okio.Timeout: void <init>()>();

        $r1 = staticinvoke <okio.Okio: okio.Sink sink(java.io.OutputStream,okio.Timeout)>($r0, $r2);

        return $r1;
    }
    private static okio.Sink sink(java.io.OutputStream, okio.Timeout)
    {
        java.io.OutputStream $r0;
        okio.Timeout $r1;
        java.lang.IllegalArgumentException $r2;
        okio.Okio$1 $r3;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: okio.Timeout;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out == null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout == null");

        throw $r2;

     label2:
        $r3 = new okio.Okio$1;

        specialinvoke $r3.<okio.Okio$1: void <init>(okio.Timeout,java.io.OutputStream)>($r1, $r0);

        return $r3;
    }
    public static okio.Sink sink(java.net.Socket) throws java.io.IOException
    {
        java.net.Socket $r0;
        java.lang.IllegalArgumentException $r1;
        okio.AsyncTimeout $r2;
        java.io.OutputStream $r3;
        okio.Sink $r4;

        $r0 := @parameter0: java.net.Socket;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("socket == null");

        throw $r1;

     label1:
        $r2 = staticinvoke <okio.Okio: okio.AsyncTimeout timeout(java.net.Socket)>($r0);

        $r3 = virtualinvoke $r0.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r4 = staticinvoke <okio.Okio: okio.Sink sink(java.io.OutputStream,okio.Timeout)>($r3, $r2);

        $r4 = virtualinvoke $r2.<okio.AsyncTimeout: okio.Sink sink(okio.Sink)>($r4);

        return $r4;
    }
    public static okio.Source source(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.File $r0;
        okio.Source $r1;
        java.lang.IllegalArgumentException $r2;
        java.io.FileInputStream $r3;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file == null");

        throw $r2;

     label1:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        $r1 = staticinvoke <okio.Okio: okio.Source source(java.io.InputStream)>($r3);

        return $r1;
    }
    public static okio.Source source(java.io.InputStream)
    {
        java.io.InputStream $r0;
        okio.Source $r1;
        okio.Timeout $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r2 = new okio.Timeout;

        specialinvoke $r2.<okio.Timeout: void <init>()>();

        $r1 = staticinvoke <okio.Okio: okio.Source source(java.io.InputStream,okio.Timeout)>($r0, $r2);

        return $r1;
    }
    private static okio.Source source(java.io.InputStream, okio.Timeout)
    {
        java.io.InputStream $r0;
        okio.Timeout $r1;
        java.lang.IllegalArgumentException $r2;
        okio.Okio$2 $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: okio.Timeout;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("in == null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout == null");

        throw $r2;

     label2:
        $r3 = new okio.Okio$2;

        specialinvoke $r3.<okio.Okio$2: void <init>(okio.Timeout,java.io.InputStream)>($r1, $r0);

        return $r3;
    }
    public static okio.Source source(java.net.Socket) throws java.io.IOException
    {
        java.net.Socket $r0;
        java.lang.IllegalArgumentException $r1;
        okio.AsyncTimeout $r2;
        java.io.InputStream $r3;
        okio.Source $r4;

        $r0 := @parameter0: java.net.Socket;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("socket == null");

        throw $r1;

     label1:
        $r2 = staticinvoke <okio.Okio: okio.AsyncTimeout timeout(java.net.Socket)>($r0);

        $r3 = virtualinvoke $r0.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r4 = staticinvoke <okio.Okio: okio.Source source(java.io.InputStream,okio.Timeout)>($r3, $r2);

        $r4 = virtualinvoke $r2.<okio.AsyncTimeout: okio.Source source(okio.Source)>($r4);

        return $r4;
    }
    private static okio.AsyncTimeout timeout(java.net.Socket)
    {
        java.net.Socket $r0;
        okio.Okio$4 $r1;

        $r0 := @parameter0: java.net.Socket;

        $r1 = new okio.Okio$4;

        specialinvoke $r1.<okio.Okio$4: void <init>(java.net.Socket)>($r0);

        return $r1;
    }
