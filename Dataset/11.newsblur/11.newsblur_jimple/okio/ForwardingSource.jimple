okio.ForwardingSource extends java.lang.Object implements okio.Source
private final okio.Source delegate
    public void <init>(okio.Source)
    {
        okio.ForwardingSource r0;
        okio.Source $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: okio.ForwardingSource;

        $r1 := @parameter0: okio.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("delegate == null");

        throw $r2;

     label1:
        r0.<okio.ForwardingSource: okio.Source delegate> = $r1;

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.ForwardingSource r0;
        okio.Source $r1;

        r0 := @this: okio.ForwardingSource;

        $r1 = r0.<okio.ForwardingSource: okio.Source delegate>;

        interfaceinvoke $r1.<okio.Source: void close()>();

        return;
    }
    public final okio.Source delegate()
    {
        okio.ForwardingSource r0;
        okio.Source r1;

        r0 := @this: okio.ForwardingSource;

        r1 = r0.<okio.ForwardingSource: okio.Source delegate>;

        return r1;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okio.ForwardingSource r0;
        okio.Buffer $r1;
        long $l0;
        okio.Source $r2;

        r0 := @this: okio.ForwardingSource;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $r2 = r0.<okio.ForwardingSource: okio.Source delegate>;

        $l0 = interfaceinvoke $r2.<okio.Source: long read(okio.Buffer,long)>($r1, $l0);

        return $l0;
    }
    public okio.Timeout timeout()
    {
        okio.ForwardingSource r0;
        okio.Timeout $r1;
        okio.Source $r2;

        r0 := @this: okio.ForwardingSource;

        $r2 = r0.<okio.ForwardingSource: okio.Source delegate>;

        $r1 = interfaceinvoke $r2.<okio.Source: okio.Timeout timeout()>();

        return $r1;
    }
    public java.lang.String toString()
    {
        okio.ForwardingSource r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        okio.Source $r4;

        r0 := @this: okio.ForwardingSource;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r4 = r0.<okio.ForwardingSource: okio.Source delegate>;

        $r3 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
