okio.Okio$4 extends okio.AsyncTimeout
final java.net.Socket val$socket
    void <init>(java.net.Socket)
    {
        okio.Okio$4 r0;
        java.net.Socket $r1;

        r0 := @this: okio.Okio$4;

        $r1 := @parameter0: java.net.Socket;

        r0.<okio.Okio$4: java.net.Socket val$socket> = $r1;

        specialinvoke r0.<okio.AsyncTimeout: void <init>()>();

        return;
    }
    protected java.io.IOException newTimeoutException(java.io.IOException)
    {
        okio.Okio$4 r0;
        java.io.IOException $r1;
        java.net.SocketTimeoutException r2;

        r0 := @this: okio.Okio$4;

        $r1 := @parameter0: java.io.IOException;

        r2 = new java.net.SocketTimeoutException;

        specialinvoke r2.<java.net.SocketTimeoutException: void <init>(java.lang.String)>("timeout");

        if $r1 == null goto label1;

        virtualinvoke r2.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

     label1:
        return r2;
    }
    protected void timedOut()
    {
        okio.Okio$4 r0;
        java.net.Socket $r1;
        java.lang.Exception r2;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.AssertionError r7;
        boolean $z0;

        r0 := @this: okio.Okio$4;

     label1:
        $r1 = r0.<okio.Okio$4: java.net.Socket val$socket>;

     label2:
        virtualinvoke $r1.<java.net.Socket: void close()>();

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r3 = <okio.Okio: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close timed out socket ");

        $r1 = r0.<okio.Okio$4: java.net.Socket val$socket>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r6, r2);

        return;

     label5:
        r7 := @caughtexception;

        $z0 = staticinvoke <okio.Okio: boolean isAndroidGetsocknameError(java.lang.AssertionError)>(r7);

        if $z0 == 0 goto label6;

        $r3 = <okio.Okio: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close timed out socket ");

        $r1 = r0.<okio.Okio$4: java.net.Socket val$socket>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r4, $r6, r7);

        return;

     label6:
        throw r7;

        catch java.lang.Exception from label1 to label3 with label4;
        catch java.lang.AssertionError from label2 to label3 with label5;
    }
