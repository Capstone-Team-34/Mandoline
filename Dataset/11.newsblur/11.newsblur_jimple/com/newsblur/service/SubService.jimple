com.newsblur.service.SubService extends java.lang.Object
private long cycleStartTime
private java.util.concurrent.ExecutorService executor
protected com.newsblur.service.NBSyncService parent
protected int startId
    void <init>(com.newsblur.service.NBSyncService)
    {
        com.newsblur.service.SubService r0;
        com.newsblur.service.NBSyncService $r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: com.newsblur.service.SubService;

        $r1 := @parameter0: com.newsblur.service.NBSyncService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.newsblur.service.SubService: long cycleStartTime> = 0L;

        r0.<com.newsblur.service.SubService: com.newsblur.service.NBSyncService parent> = $r1;

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(1);

        r0.<com.newsblur.service.SubService: java.util.concurrent.ExecutorService executor> = $r2;

        return;
    }
    static void access$000(com.newsblur.service.SubService)
    {
        com.newsblur.service.SubService $r0;

        $r0 := @parameter0: com.newsblur.service.SubService;

        specialinvoke $r0.<com.newsblur.service.SubService: void exec_()>();

        return;
    }
    private void exec_()
    {
        com.newsblur.service.SubService r0;
        java.lang.Exception r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.newsblur.service.SubService;

        entermonitor r0;

     label01:
        virtualinvoke r0.<com.newsblur.service.SubService: void exec()>();

        r0.<com.newsblur.service.SubService: long cycleStartTime> = 0L;

     label02:
        $z0 = virtualinvoke r0.<com.newsblur.service.SubService: boolean isRunning()>();

        if $z0 == 0 goto label03;

        virtualinvoke r0.<com.newsblur.service.SubService: void setRunning(boolean)>(0);

        staticinvoke <com.newsblur.activity.NbActivity: void updateAllActivities(int)>(32);

     label03:
        exitmonitor r0;

        return;

     label04:
        r1 := @caughtexception;

     label05:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.newsblur.util.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Sync error.", r1);

     label06:
        $z0 = virtualinvoke r0.<com.newsblur.service.SubService: boolean isRunning()>();

        if $z0 == 0 goto label03;

        virtualinvoke r0.<com.newsblur.service.SubService: void setRunning(boolean)>(0);

        staticinvoke <com.newsblur.activity.NbActivity: void updateAllActivities(int)>(32);

     label07:
        goto label03;

     label08:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label09:
        $r5 := @caughtexception;

     label10:
        $z0 = virtualinvoke r0.<com.newsblur.service.SubService: boolean isRunning()>();

        if $z0 == 0 goto label11;

        virtualinvoke r0.<com.newsblur.service.SubService: void setRunning(boolean)>(0);

        staticinvoke <com.newsblur.activity.NbActivity: void updateAllActivities(int)>(32);

     label11:
        throw $r5;

     label12:
        nop;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label12 with label08;
    }
protected abstract void exec() { 
// no body
} 
    protected void gotData(int)
    {
        com.newsblur.service.SubService r0;
        int $i0;

        r0 := @this: com.newsblur.service.SubService;

        $i0 := @parameter0: int;

        staticinvoke <com.newsblur.activity.NbActivity: void updateAllActivities(int)>($i0);

        return;
    }
    protected void gotWork()
    {
        com.newsblur.service.SubService r0;

        r0 := @this: com.newsblur.service.SubService;

        virtualinvoke r0.<com.newsblur.service.SubService: void setRunning(boolean)>(1);

        staticinvoke <com.newsblur.activity.NbActivity: void updateAllActivities(int)>(32);

        return;
    }
    protected boolean haveWork()
    {
        com.newsblur.service.SubService r0;

        r0 := @this: com.newsblur.service.SubService;

        return 1;
    }
protected abstract boolean isRunning() { 
// no body
} 
protected abstract void setRunning(boolean) { 
// no body
} 
    public void shutdown()
    {
        com.newsblur.service.SubService r0;
        java.lang.InterruptedException r1;
        java.util.concurrent.TimeUnit $r2;
        java.lang.Thread $r3;
        java.util.concurrent.ExecutorService $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.newsblur.service.SubService;

        $r4 = r0.<com.newsblur.service.SubService: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void shutdown()>();

     label1:
        $r4 = r0.<com.newsblur.service.SubService: java.util.concurrent.ExecutorService executor>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

     label2:
        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(60L, $r2);

     label3:
        return;

     label4:
        r1 := @caughtexception;

     label5:
        $r4 = r0.<com.newsblur.service.SubService: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label6:
        return;

     label7:
        $r5 := @caughtexception;

        throw $r5;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }
    public void start(int)
    {
        com.newsblur.service.SubService r0;
        int $i0;
        com.newsblur.service.SubService$1 r1;
        boolean $z0;
        com.newsblur.service.NBSyncService $r2;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.newsblur.service.SubService;

        $i0 := @parameter0: int;

        $r2 = r0.<com.newsblur.service.SubService: com.newsblur.service.NBSyncService parent>;

        $z0 = virtualinvoke $r2.<com.newsblur.service.NBSyncService: boolean stopSync()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.newsblur.service.SubService: com.newsblur.service.NBSyncService parent>;

        virtualinvoke $r2.<com.newsblur.service.NBSyncService: void incrementRunningChild()>();

        r0.<com.newsblur.service.SubService: int startId> = $i0;

        r1 = new com.newsblur.service.SubService$1;

        specialinvoke r1.<com.newsblur.service.SubService$1: void <init>(com.newsblur.service.SubService,int)>(r0, $i0);

        $r3 = r0.<com.newsblur.service.SubService: java.util.concurrent.ExecutorService executor>;

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

        return;
    }
    public void startConditional(int)
    {
        com.newsblur.service.SubService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.newsblur.service.SubService;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.newsblur.service.SubService: boolean haveWork()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.newsblur.service.SubService: void start(int)>($i0);

     label1:
        return;
    }
    protected void startExpensiveCycle()
    {
        com.newsblur.service.SubService r0;
        double d0;
        java.lang.InterruptedException r1;
        long $l0, $l2;
        byte $b1;
        int $i3;
        java.lang.Class $r2;
        java.lang.String $r3, $r5;
        java.lang.StringBuilder $r4;
        java.lang.Thread $r6;

        r0 := @this: com.newsblur.service.SubService;

        $l0 = r0.<com.newsblur.service.SubService: long cycleStartTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.newsblur.service.SubService: long cycleStartTime> = $l0;

        return;

     label1:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = r0.<com.newsblur.service.SubService: long cycleStartTime>;

        $l0 = $l0 - $l2;

        d0 = (double) $l0;

        $b1 = d0 cmpg 1.0;

        if $b1 < 0 goto label6;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.newsblur.service.SubService: long cycleStartTime> = $l0;

        d0 = d0 * 0.19999999999999996;

        $b1 = d0 cmpg 1.0;

        if $b1 < 0 goto label6;

        d0 = d0 / 1000000.0;

        $l0 = staticinvoke <java.lang.Math: long round(double)>(d0);

        $l2 = $l0;

        $b1 = $l0 cmp 5000L;

        if $b1 <= 0 goto label2;

        $l2 = 5000L;

     label2:
        $i3 = staticinvoke <com.newsblur.activity.NbActivity: int getActiveActivityCount()>();

        if $i3 <= 0 goto label6;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sleeping for : ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms to enforce max duty cycle.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.newsblur.util.Log: void d(java.lang.String,java.lang.String)>($r3, $r5);

     label3:
        staticinvoke <java.lang.Thread: void sleep(long)>($l2);

     label4:
        return;

     label5:
        r1 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label6:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }
