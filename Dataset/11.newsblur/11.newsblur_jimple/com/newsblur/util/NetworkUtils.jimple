com.newsblur.util.NetworkUtils extends java.lang.Object
private static okhttp3.OkHttpClient ImageFetchHttpClient
    static void <clinit>()
    {
        okhttp3.OkHttpClient$Builder $r0;
        java.util.concurrent.TimeUnit $r1;
        okhttp3.OkHttpClient $r2;

        $r0 = new okhttp3.OkHttpClient$Builder;

        specialinvoke $r0.<okhttp3.OkHttpClient$Builder: void <init>()>();

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r0 = virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit)>(10L, $r1);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r0 = virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r1);

        $r0 = virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient$Builder followSslRedirects(boolean)>(1);

        $r2 = virtualinvoke $r0.<okhttp3.OkHttpClient$Builder: okhttp3.OkHttpClient build()>();

        <com.newsblur.util.NetworkUtils: okhttp3.OkHttpClient ImageFetchHttpClient> = $r2;

        return;
    }
    public static java.lang.String encodeURL(java.lang.String)
    {
        java.lang.String $r0;
        java.io.UnsupportedEncodingException r1;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("device does not support UTF-8", r1);

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    public static boolean isOnline(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.Object $r1;
        android.net.ConnectivityManager r2;
        android.net.NetworkInfo $r3;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r2 = (android.net.ConnectivityManager) $r1;

        $r3 = virtualinvoke r2.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static long loadURL(java.net.URL, java.io.File) throws java.io.IOException
    {
        java.net.URL $r0;
        java.io.File $r1;
        long l0, $l1;
        okhttp3.Request$Builder $r2;
        okhttp3.OkHttpClient $r3;
        okhttp3.Request $r4;
        okhttp3.Call $r5;
        okhttp3.Response $r6;
        boolean $z0;
        okio.Sink $r7;
        okio.BufferedSink $r8;
        okhttp3.ResponseBody $r9;
        okio.BufferedSource $r10;
        java.lang.Throwable $r11, $r12;

        $r0 := @parameter0: java.net.URL;

        $r1 := @parameter1: java.io.File;

        l0 = 0L;

     label01:
        $r2 = new okhttp3.Request$Builder;

        specialinvoke $r2.<okhttp3.Request$Builder: void <init>()>();

        $r2 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.net.URL)>($r0);

        $r3 = <com.newsblur.util.NetworkUtils: okhttp3.OkHttpClient ImageFetchHttpClient>;

        $r4 = virtualinvoke $r2.<okhttp3.Request$Builder: okhttp3.Request build()>();

        $r5 = virtualinvoke $r3.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r4);

        $r6 = interfaceinvoke $r5.<okhttp3.Call: okhttp3.Response execute()>();

        $z0 = virtualinvoke $r6.<okhttp3.Response: boolean isSuccessful()>();

     label02:
        if $z0 == 0 goto label11;

     label03:
        $r7 = staticinvoke <okio.Okio: okio.Sink sink(java.io.File)>($r1);

        $r8 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r7);

     label04:
        $r9 = virtualinvoke $r6.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $r10 = virtualinvoke $r9.<okhttp3.ResponseBody: okio.BufferedSource source()>();

        $l1 = interfaceinvoke $r8.<okio.BufferedSink: long writeAll(okio.Source)>($r10);

     label05:
        l0 = $l1;

     label06:
        interfaceinvoke $r8.<okio.BufferedSink: void close()>();

        virtualinvoke $r6.<okhttp3.Response: void close()>();

     label07:
        return $l1;

     label08:
        $r11 := @caughtexception;

     label09:
        interfaceinvoke $r8.<okio.BufferedSink: void close()>();

        virtualinvoke $r6.<okhttp3.Response: void close()>();

        throw $r11;

     label10:
        $r12 := @caughtexception;

        return l0;

     label11:
        return 0L;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }
