butterknife.ImmutableList extends java.util.AbstractList implements java.util.RandomAccess
private final java.lang.Object[] views
    void <init>(java.lang.Object[])
    {
        butterknife.ImmutableList r0;
        java.lang.Object[] r1;

        r0 := @this: butterknife.ImmutableList;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<butterknife.ImmutableList: java.lang.Object[] views> = r1;

        return;
    }
    public boolean contains(java.lang.Object)
    {
        butterknife.ImmutableList r0;
        java.lang.Object $r1, r2;
        java.lang.Object[] $r3;
        int $i0, $i1;

        r0 := @this: butterknife.ImmutableList;

        $r1 := @parameter0: java.lang.Object;

        $r3 = r0.<butterknife.ImmutableList: java.lang.Object[] views>;

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r2 = $r3[$i1];

        if r2 != $r1 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    public java.lang.Object get(int)
    {
        butterknife.ImmutableList r0;
        int $i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: butterknife.ImmutableList;

        $i0 := @parameter0: int;

        $r1 = r0.<butterknife.ImmutableList: java.lang.Object[] views>;

        $r2 = $r1[$i0];

        return $r2;
    }
    public int size()
    {
        butterknife.ImmutableList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: butterknife.ImmutableList;

        $r1 = r0.<butterknife.ImmutableList: java.lang.Object[] views>;

        $i0 = lengthof $r1;

        return $i0;
    }
