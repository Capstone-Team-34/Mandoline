okhttp3.FormBody$Builder extends java.lang.Object
private final java.util.List names
private final java.util.List values
    public void <init>()
    {
        okhttp3.FormBody$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: okhttp3.FormBody$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.FormBody$Builder: java.util.List names> = $r1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.FormBody$Builder: java.util.List values> = $r1;

        return;
    }
    public okhttp3.FormBody$Builder add(java.lang.String, java.lang.String)
    {
        okhttp3.FormBody$Builder r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.FormBody$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.FormBody$Builder: java.util.List names>;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<okhttp3.FormBody$Builder: java.util.List values>;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 0, 0, 1, 1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public okhttp3.FormBody$Builder addEncoded(java.lang.String, java.lang.String)
    {
        okhttp3.FormBody$Builder r0;
        java.lang.String $r1, $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.FormBody$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.FormBody$Builder: java.util.List names>;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 1, 0, 1, 1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r3 = r0.<okhttp3.FormBody$Builder: java.util.List values>;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\':;<=>@[]^`{}|/\\?#&!$(),~", 1, 0, 1, 1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public okhttp3.FormBody build()
    {
        okhttp3.FormBody$Builder r0;
        okhttp3.FormBody $r1;
        java.util.List $r2, $r3;

        r0 := @this: okhttp3.FormBody$Builder;

        $r1 = new okhttp3.FormBody;

        $r2 = r0.<okhttp3.FormBody$Builder: java.util.List names>;

        $r3 = r0.<okhttp3.FormBody$Builder: java.util.List values>;

        specialinvoke $r1.<okhttp3.FormBody: void <init>(java.util.List,java.util.List)>($r2, $r3);

        return $r1;
    }
