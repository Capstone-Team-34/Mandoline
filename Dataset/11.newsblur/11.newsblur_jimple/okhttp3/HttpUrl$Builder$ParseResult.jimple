okhttp3.HttpUrl$Builder$ParseResult extends java.lang.Enum
private static final okhttp3.HttpUrl$Builder$ParseResult[] $VALUES
public static final enum okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST
public static final enum okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT
public static final enum okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME
public static final enum okhttp3.HttpUrl$Builder$ParseResult SUCCESS
public static final enum okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME
    static void <clinit>()
    {
        okhttp3.HttpUrl$Builder$ParseResult $r0;
        okhttp3.HttpUrl$Builder$ParseResult[] $r1;

        $r0 = new okhttp3.HttpUrl$Builder$ParseResult;

        specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("SUCCESS", 0);

        <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult SUCCESS> = $r0;

        $r0 = new okhttp3.HttpUrl$Builder$ParseResult;

        specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("MISSING_SCHEME", 1);

        <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME> = $r0;

        $r0 = new okhttp3.HttpUrl$Builder$ParseResult;

        specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("UNSUPPORTED_SCHEME", 2);

        <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME> = $r0;

        $r0 = new okhttp3.HttpUrl$Builder$ParseResult;

        specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_PORT", 3);

        <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT> = $r0;

        $r0 = new okhttp3.HttpUrl$Builder$ParseResult;

        specialinvoke $r0.<okhttp3.HttpUrl$Builder$ParseResult: void <init>(java.lang.String,int)>("INVALID_HOST", 4);

        <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST> = $r0;

        $r1 = newarray (okhttp3.HttpUrl$Builder$ParseResult)[5];

        $r0 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult SUCCESS>;

        $r1[0] = $r0;

        $r0 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME>;

        $r1[1] = $r0;

        $r0 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME>;

        $r1[2] = $r0;

        $r0 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT>;

        $r1[3] = $r0;

        $r0 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST>;

        $r1[4] = $r0;

        <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int)
    {
        okhttp3.HttpUrl$Builder$ParseResult r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: okhttp3.HttpUrl$Builder$ParseResult;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }
    public static okhttp3.HttpUrl$Builder$ParseResult valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        okhttp3.HttpUrl$Builder$ParseResult $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lokhttp3/HttpUrl$Builder$ParseResult;", $r0);

        $r2 = (okhttp3.HttpUrl$Builder$ParseResult) $r1;

        return $r2;
    }
    public static okhttp3.HttpUrl$Builder$ParseResult[] values()
    {
        java.lang.Object $r0;
        okhttp3.HttpUrl$Builder$ParseResult[] $r1;

        $r1 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (okhttp3.HttpUrl$Builder$ParseResult[]) $r0;

        return $r1;
    }
