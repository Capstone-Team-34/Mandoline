okhttp3.ConnectionSpec extends java.lang.Object
private static final okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES
public static final okhttp3.ConnectionSpec CLEARTEXT
public static final okhttp3.ConnectionSpec COMPATIBLE_TLS
public static final okhttp3.ConnectionSpec MODERN_TLS
final java.lang.String[] cipherSuites
final boolean supportsTlsExtensions
final boolean tls
final java.lang.String[] tlsVersions
    static void <clinit>()
    {
        okhttp3.CipherSuite[] $r0;
        okhttp3.CipherSuite $r1;
        okhttp3.ConnectionSpec$Builder $r2;
        okhttp3.TlsVersion[] $r3;
        okhttp3.TlsVersion $r4;
        okhttp3.ConnectionSpec $r5;

        $r0 = newarray (okhttp3.CipherSuite)[15];

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256>;

        $r0[0] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[1] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384>;

        $r0[2] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384>;

        $r0[3] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256>;

        $r0[4] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256>;

        $r0[5] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA>;

        $r0[6] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA>;

        $r0[7] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA>;

        $r0[8] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA>;

        $r0[9] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256>;

        $r0[10] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384>;

        $r0[11] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA>;

        $r0[12] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA>;

        $r0[13] = $r1;

        $r1 = <okhttp3.CipherSuite: okhttp3.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA>;

        $r0[14] = $r1;

        <okhttp3.ConnectionSpec: okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES> = $r0;

        $r2 = new okhttp3.ConnectionSpec$Builder;

        specialinvoke $r2.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1);

        $r0 = <okhttp3.ConnectionSpec: okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES>;

        $r2 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>($r0);

        $r3 = newarray (okhttp3.TlsVersion)[4];

        $r4 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_3>;

        $r3[0] = $r4;

        $r4 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_2>;

        $r3[1] = $r4;

        $r4 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_1>;

        $r3[2] = $r4;

        $r4 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_0>;

        $r3[3] = $r4;

        $r2 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3);

        $r2 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r5 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>();

        <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec MODERN_TLS> = $r5;

        $r2 = new okhttp3.ConnectionSpec$Builder;

        $r5 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec MODERN_TLS>;

        specialinvoke $r2.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>($r5);

        $r3 = newarray (okhttp3.TlsVersion)[1];

        $r4 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_0>;

        $r3[0] = $r4;

        $r2 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r3);

        $r2 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1);

        $r5 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>();

        <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec COMPATIBLE_TLS> = $r5;

        $r2 = new okhttp3.ConnectionSpec$Builder;

        specialinvoke $r2.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(0);

        $r5 = virtualinvoke $r2.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>();

        <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec CLEARTEXT> = $r5;

        return;
    }
    void <init>(okhttp3.ConnectionSpec$Builder)
    {
        okhttp3.ConnectionSpec r0;
        okhttp3.ConnectionSpec$Builder $r1;
        boolean $z0;
        java.lang.String[] $r2;

        r0 := @this: okhttp3.ConnectionSpec;

        $r1 := @parameter0: okhttp3.ConnectionSpec$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = $r1.<okhttp3.ConnectionSpec$Builder: boolean tls>;

        r0.<okhttp3.ConnectionSpec: boolean tls> = $z0;

        $r2 = $r1.<okhttp3.ConnectionSpec$Builder: java.lang.String[] cipherSuites>;

        r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites> = $r2;

        $r2 = $r1.<okhttp3.ConnectionSpec$Builder: java.lang.String[] tlsVersions>;

        r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions> = $r2;

        $z0 = $r1.<okhttp3.ConnectionSpec$Builder: boolean supportsTlsExtensions>;

        r0.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions> = $z0;

        return;
    }
    private okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket, boolean)
    {
        okhttp3.ConnectionSpec r0;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] $r2, $r4, $r5;
        java.util.Comparator $r3;
        int $i0;
        java.lang.String $r6;
        okhttp3.ConnectionSpec$Builder $r7;

        r0 := @this: okhttp3.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 := @parameter1: boolean;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 == null goto label4;

        $r3 = <okhttp3.CipherSuite: java.util.Comparator ORDER_BY_NAME>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r4 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r2 = staticinvoke <okhttp3.internal.Util: java.lang.String[] intersect(java.util.Comparator,java.lang.String[],java.lang.String[])>($r3, $r2, $r4);

     label1:
        $r4 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        if $r4 == null goto label5;

        $r3 = <okhttp3.internal.Util: java.util.Comparator NATURAL_ORDER>;

        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        $r5 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = staticinvoke <okhttp3.internal.Util: java.lang.String[] intersect(java.util.Comparator,java.lang.String[],java.lang.String[])>($r3, $r4, $r5);

     label2:
        $r5 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        $r3 = <okhttp3.CipherSuite: java.util.Comparator ORDER_BY_NAME>;

        $i0 = staticinvoke <okhttp3.internal.Util: int indexOf(java.util.Comparator,java.lang.String[],java.lang.String)>($r3, $r5, "TLS_FALLBACK_SCSV");

        if $z0 == 0 goto label3;

        if $i0 == -1 goto label3;

        $r6 = $r5[$i0];

        $r2 = staticinvoke <okhttp3.internal.Util: java.lang.String[] concat(java.lang.String[],java.lang.String)>($r2, $r6);

     label3:
        $r7 = new okhttp3.ConnectionSpec$Builder;

        specialinvoke $r7.<okhttp3.ConnectionSpec$Builder: void <init>(okhttp3.ConnectionSpec)>(r0);

        $r7 = virtualinvoke $r7.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r2);

        $r7 = virtualinvoke $r7.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r4);

        r0 = virtualinvoke $r7.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>();

        return r0;

     label4:
        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        goto label1;

     label5:
        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        goto label2;
    }
    void apply(javax.net.ssl.SSLSocket, boolean)
    {
        okhttp3.ConnectionSpec r0;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] $r2;

        r0 := @this: okhttp3.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 := @parameter1: boolean;

        r0 = specialinvoke r0.<okhttp3.ConnectionSpec: okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean)>($r1, $z0);

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r2);

     label1:
        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 == null goto label2;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r2);

     label2:
        return;
    }
    public java.util.List cipherSuites()
    {
        okhttp3.ConnectionSpec r0;
        java.util.List $r1;
        java.lang.String[] $r2;

        r0 := @this: okhttp3.ConnectionSpec;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r1 = staticinvoke <okhttp3.CipherSuite: java.util.List forJavaNames(java.lang.String[])>($r2);

        return $r1;

     label1:
        return null;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.ConnectionSpec r0, r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        java.lang.String[] $r3, $r4;

        r0 := @this: okhttp3.ConnectionSpec;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof okhttp3.ConnectionSpec;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if $r1 != r0 goto label2;

        return 1;

     label2:
        r2 = (okhttp3.ConnectionSpec) $r1;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean tls>;

        $z1 = r2.<okhttp3.ConnectionSpec: boolean tls>;

        if $z0 != $z1 goto label4;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r3 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r4 = r2.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 == 0 goto label4;

        $r3 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = r2.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        if $z0 == 0 goto label4;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions>;

        $z1 = r2.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions>;

        if $z0 != $z1 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }
    public int hashCode()
    {
        okhttp3.ConnectionSpec r0;
        boolean $z0;
        java.lang.String[] $r1;
        int $i0, $i1;
        byte $b2;

        r0 := @this: okhttp3.ConnectionSpec;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean tls>;

        if $z0 == 0 goto label3;

        $r1 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + 527;

        $i0 = $i0 * 31;

        $r1 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions>;

        if $z0 == 0 goto label2;

        $b2 = 0;

     label1:
        $i0 = $i0 + $b2;

        return $i0;

     label2:
        $b2 = 1;

        goto label1;

     label3:
        return 17;
    }
    public boolean isCompatible(javax.net.ssl.SSLSocket)
    {
        okhttp3.ConnectionSpec r0;
        javax.net.ssl.SSLSocket $r1;
        boolean $z0;
        java.lang.String[] $r2, $r4;
        java.util.Comparator $r3;

        r0 := @this: okhttp3.ConnectionSpec;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean tls>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        if $r2 == null goto label2;

        $r3 = <okhttp3.internal.Util: java.util.Comparator NATURAL_ORDER>;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        $z0 = staticinvoke <okhttp3.internal.Util: boolean nonEmptyIntersection(java.util.Comparator,java.lang.String[],java.lang.String[])>($r3, $r2, $r4);

        if $z0 == 0 goto label4;

     label2:
        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r2 == null goto label3;

        $r3 = <okhttp3.CipherSuite: java.util.Comparator ORDER_BY_NAME>;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        $z0 = staticinvoke <okhttp3.internal.Util: boolean nonEmptyIntersection(java.util.Comparator,java.lang.String[],java.lang.String[])>($r3, $r2, $r4);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }
    public boolean isTls()
    {
        okhttp3.ConnectionSpec r0;
        boolean z0;

        r0 := @this: okhttp3.ConnectionSpec;

        z0 = r0.<okhttp3.ConnectionSpec: boolean tls>;

        return z0;
    }
    public boolean supportsTlsExtensions()
    {
        okhttp3.ConnectionSpec r0;
        boolean z0;

        r0 := @this: okhttp3.ConnectionSpec;

        z0 = r0.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions>;

        return z0;
    }
    public java.util.List tlsVersions()
    {
        okhttp3.ConnectionSpec r0;
        java.util.List $r1;
        java.lang.String[] $r2;

        r0 := @this: okhttp3.ConnectionSpec;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        if $r2 == null goto label1;

        $r2 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        $r1 = staticinvoke <okhttp3.TlsVersion: java.util.List forJavaNames(java.lang.String[])>($r2);

        return $r1;

     label1:
        return null;
    }
    public java.lang.String toString()
    {
        okhttp3.ConnectionSpec r0;
        boolean $z0;
        java.lang.String[] $r1;
        java.util.List $r2;
        java.lang.String $r3, $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: okhttp3.ConnectionSpec;

        $z0 = r0.<okhttp3.ConnectionSpec: boolean tls>;

        if $z0 != 0 goto label1;

        return "ConnectionSpec()";

     label1:
        $r1 = r0.<okhttp3.ConnectionSpec: java.lang.String[] cipherSuites>;

        if $r1 == null goto label4;

        $r2 = virtualinvoke r0.<okhttp3.ConnectionSpec: java.util.List cipherSuites()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label2:
        $r1 = r0.<okhttp3.ConnectionSpec: java.lang.String[] tlsVersions>;

        if $r1 == null goto label5;

        $r2 = virtualinvoke r0.<okhttp3.ConnectionSpec: java.util.List tlsVersions()>();

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ConnectionSpec(cipherSuites=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tlsVersions=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", supportsTlsExtensions=");

        $z0 = r0.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label4:
        $r3 = "[all enabled]";

        goto label2;

     label5:
        $r4 = "[all enabled]";

        goto label3;
    }
