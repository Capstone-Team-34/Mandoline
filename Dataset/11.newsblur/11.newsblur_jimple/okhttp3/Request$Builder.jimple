okhttp3.Request$Builder extends java.lang.Object
okhttp3.RequestBody body
okhttp3.Headers$Builder headers
java.lang.String method
java.lang.Object tag
okhttp3.HttpUrl url
    public void <init>()
    {
        okhttp3.Request$Builder r0;
        okhttp3.Headers$Builder $r1;

        r0 := @this: okhttp3.Request$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.Request$Builder: java.lang.String method> = "GET";

        $r1 = new okhttp3.Headers$Builder;

        specialinvoke $r1.<okhttp3.Headers$Builder: void <init>()>();

        r0.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers> = $r1;

        return;
    }
    void <init>(okhttp3.Request)
    {
        okhttp3.Request$Builder r0;
        okhttp3.Request $r1;
        okhttp3.Headers$Builder $r2;
        okhttp3.HttpUrl $r3;
        java.lang.String $r4;
        okhttp3.RequestBody $r5;
        java.lang.Object $r6;
        okhttp3.Headers $r7;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.Request;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<okhttp3.Request: okhttp3.HttpUrl url>;

        r0.<okhttp3.Request$Builder: okhttp3.HttpUrl url> = $r3;

        $r4 = $r1.<okhttp3.Request: java.lang.String method>;

        r0.<okhttp3.Request$Builder: java.lang.String method> = $r4;

        $r5 = $r1.<okhttp3.Request: okhttp3.RequestBody body>;

        r0.<okhttp3.Request$Builder: okhttp3.RequestBody body> = $r5;

        $r6 = $r1.<okhttp3.Request: java.lang.Object tag>;

        r0.<okhttp3.Request$Builder: java.lang.Object tag> = $r6;

        $r7 = $r1.<okhttp3.Request: okhttp3.Headers headers>;

        $r2 = virtualinvoke $r7.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>();

        r0.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers> = $r2;

        return;
    }
    public okhttp3.Request$Builder addHeader(java.lang.String, java.lang.String)
    {
        okhttp3.Request$Builder r0;
        java.lang.String $r1, $r2;
        okhttp3.Headers$Builder $r3;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers>;

        virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder add(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public okhttp3.Request build()
    {
        okhttp3.Request$Builder r0;
        okhttp3.HttpUrl $r1;
        java.lang.IllegalStateException $r2;
        okhttp3.Request $r3;

        r0 := @this: okhttp3.Request$Builder;

        $r1 = r0.<okhttp3.Request$Builder: okhttp3.HttpUrl url>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("url == null");

        throw $r2;

     label1:
        $r3 = new okhttp3.Request;

        specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.Request$Builder)>(r0);

        return $r3;
    }
    public okhttp3.Request$Builder cacheControl(okhttp3.CacheControl)
    {
        okhttp3.Request$Builder r0;
        okhttp3.CacheControl $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.CacheControl;

        $r2 = virtualinvoke $r1.<okhttp3.CacheControl: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder removeHeader(java.lang.String)>("Cache-Control");

        return r0;

     label1:
        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Cache-Control", $r2);

        return r0;
    }
    public okhttp3.Request$Builder delete()
    {
        okhttp3.Request$Builder r0;
        okhttp3.RequestBody $r1;

        r0 := @this: okhttp3.Request$Builder;

        $r1 = <okhttp3.internal.Util: okhttp3.RequestBody EMPTY_REQUEST>;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder delete(okhttp3.RequestBody)>($r1);

        return r0;
    }
    public okhttp3.Request$Builder delete(okhttp3.RequestBody)
    {
        okhttp3.Request$Builder r0;
        okhttp3.RequestBody $r1;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.RequestBody;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("DELETE", $r1);

        return r0;
    }
    public okhttp3.Request$Builder get()
    {
        okhttp3.Request$Builder r0;

        r0 := @this: okhttp3.Request$Builder;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("GET", null);

        return r0;
    }
    public okhttp3.Request$Builder head()
    {
        okhttp3.Request$Builder r0;

        r0 := @this: okhttp3.Request$Builder;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("HEAD", null);

        return r0;
    }
    public okhttp3.Request$Builder header(java.lang.String, java.lang.String)
    {
        okhttp3.Request$Builder r0;
        java.lang.String $r1, $r2;
        okhttp3.Headers$Builder $r3;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers>;

        virtualinvoke $r3.<okhttp3.Headers$Builder: okhttp3.Headers$Builder set(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public okhttp3.Request$Builder headers(okhttp3.Headers)
    {
        okhttp3.Request$Builder r0;
        okhttp3.Headers $r1;
        okhttp3.Headers$Builder $r2;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.Headers;

        $r2 = virtualinvoke $r1.<okhttp3.Headers: okhttp3.Headers$Builder newBuilder()>();

        r0.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers> = $r2;

        return r0;
    }
    public okhttp3.Request$Builder method(java.lang.String, okhttp3.RequestBody)
    {
        okhttp3.Request$Builder r0;
        java.lang.String $r1;
        okhttp3.RequestBody $r2;
        java.lang.NullPointerException $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: okhttp3.RequestBody;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("method == null");

        throw $r3;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("method.length() == 0");

        throw $r4;

     label2:
        if $r2 == null goto label3;

        $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("method ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not have a request body.");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        if $r2 != null goto label4;

        $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1);

        if $z0 == 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("method ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have a request body.");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label4:
        r0.<okhttp3.Request$Builder: java.lang.String method> = $r1;

        r0.<okhttp3.Request$Builder: okhttp3.RequestBody body> = $r2;

        return r0;
    }
    public okhttp3.Request$Builder patch(okhttp3.RequestBody)
    {
        okhttp3.Request$Builder r0;
        okhttp3.RequestBody $r1;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.RequestBody;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("PATCH", $r1);

        return r0;
    }
    public okhttp3.Request$Builder post(okhttp3.RequestBody)
    {
        okhttp3.Request$Builder r0;
        okhttp3.RequestBody $r1;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.RequestBody;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1);

        return r0;
    }
    public okhttp3.Request$Builder put(okhttp3.RequestBody)
    {
        okhttp3.Request$Builder r0;
        okhttp3.RequestBody $r1;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.RequestBody;

        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("PUT", $r1);

        return r0;
    }
    public okhttp3.Request$Builder removeHeader(java.lang.String)
    {
        okhttp3.Request$Builder r0;
        java.lang.String $r1;
        okhttp3.Headers$Builder $r2;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.Request$Builder: okhttp3.Headers$Builder headers>;

        virtualinvoke $r2.<okhttp3.Headers$Builder: okhttp3.Headers$Builder removeAll(java.lang.String)>($r1);

        return r0;
    }
    public okhttp3.Request$Builder tag(java.lang.Object)
    {
        okhttp3.Request$Builder r0;
        java.lang.Object $r1;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.lang.Object;

        r0.<okhttp3.Request$Builder: java.lang.Object tag> = $r1;

        return r0;
    }
    public okhttp3.Request$Builder url(java.lang.String)
    {
        okhttp3.Request$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        okhttp3.HttpUrl $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("url == null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, "ws:", 0, 3);

        if $z0 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http:");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(3);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r4 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1);

        if $r4 != null goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected url: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label3:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, "wss:", 0, 4);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("https:");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label4:
        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4);

        return r0;
    }
    public okhttp3.Request$Builder url(java.net.URL)
    {
        okhttp3.Request$Builder r0;
        java.net.URL $r1;
        java.lang.NullPointerException $r2;
        okhttp3.HttpUrl $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: java.net.URL;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("url == null");

        throw $r2;

     label1:
        $r3 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl get(java.net.URL)>($r1);

        if $r3 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected url: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r3);

        return r0;
    }
    public okhttp3.Request$Builder url(okhttp3.HttpUrl)
    {
        okhttp3.Request$Builder r0;
        okhttp3.HttpUrl $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.Request$Builder;

        $r1 := @parameter0: okhttp3.HttpUrl;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("url == null");

        throw $r2;

     label1:
        r0.<okhttp3.Request$Builder: okhttp3.HttpUrl url> = $r1;

        return r0;
    }
