okhttp3.CertificatePinner$Pin extends java.lang.Object
private static final java.lang.String WILDCARD
final java.lang.String canonicalHostname
final okio.ByteString hash
final java.lang.String hashAlgorithm
final java.lang.String pattern
    void <init>(java.lang.String, java.lang.String)
    {
        okhttp3.CertificatePinner$Pin r0;
        java.lang.String $r1, $r2, $r4;
        boolean $z0;
        java.lang.StringBuilder $r3;
        int $i0;
        okhttp3.HttpUrl $r5;
        okio.ByteString $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: okhttp3.CertificatePinner$Pin;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.CertificatePinner$Pin: java.lang.String pattern> = $r1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if $z0 == 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r4 = "*.";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<okhttp3.HttpUrl: java.lang.String host()>();

     label1:
        r0.<okhttp3.CertificatePinner$Pin: java.lang.String canonicalHostname> = $r1;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("sha1/");

        if $z0 == 0 goto label4;

        r0.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm> = "sha1/";

        $r1 = "sha1/";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = staticinvoke <okio.ByteString: okio.ByteString decodeBase64(java.lang.String)>($r1);

        r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash> = $r6;

     label2:
        $r6 = r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        if $r6 != null goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pins must be base64: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<okhttp3.HttpUrl: java.lang.String host()>();

        goto label1;

     label4:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("sha256/");

        if $z0 == 0 goto label5;

        r0.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm> = "sha256/";

        $r1 = "sha256/";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = staticinvoke <okio.ByteString: okio.ByteString decodeBase64(java.lang.String)>($r1);

        r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash> = $r6;

        goto label2;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pins must start with \'sha256/\' or \'sha1/\': ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label6:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.CertificatePinner$Pin r0, $r3;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2, $r4;
        okio.ByteString $r5, $r6;

        r0 := @this: okhttp3.CertificatePinner$Pin;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof okhttp3.CertificatePinner$Pin;

        if $z0 == 0 goto label1;

        $r2 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String pattern>;

        $r3 = (okhttp3.CertificatePinner$Pin) $r1;

        $r4 = $r3.<okhttp3.CertificatePinner$Pin: java.lang.String pattern>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r2 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm>;

        $r3 = (okhttp3.CertificatePinner$Pin) $r1;

        $r4 = $r3.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        r0 = (okhttp3.CertificatePinner$Pin) $r1;

        $r6 = r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        $z0 = virtualinvoke $r5.<okio.ByteString: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public int hashCode()
    {
        okhttp3.CertificatePinner$Pin r0;
        java.lang.String $r1;
        int $i0, $i1;
        okio.ByteString $r2;

        r0 := @this: okhttp3.CertificatePinner$Pin;

        $r1 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String pattern>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 + 527;

        $i0 = $i0 * 31;

        $r1 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r2 = r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        $i1 = virtualinvoke $r2.<okio.ByteString: int hashCode()>();

        $i0 = $i0 + $i1;

        return $i0;
    }
    boolean matches(java.lang.String)
    {
        okhttp3.CertificatePinner$Pin r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: okhttp3.CertificatePinner$Pin;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String pattern>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("*.");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        $i0 = $i0 + 1;

        $r2 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String canonicalHostname>;

        $r3 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String canonicalHostname>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $i0, $r2, 0, $i1);

        return $z0;

     label1:
        $r2 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String canonicalHostname>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }
    public java.lang.String toString()
    {
        okhttp3.CertificatePinner$Pin r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        okio.ByteString $r3;

        r0 := @this: okhttp3.CertificatePinner$Pin;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<okhttp3.CertificatePinner$Pin: java.lang.String hashAlgorithm>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = r0.<okhttp3.CertificatePinner$Pin: okio.ByteString hash>;

        $r2 = virtualinvoke $r3.<okio.ByteString: java.lang.String base64()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
