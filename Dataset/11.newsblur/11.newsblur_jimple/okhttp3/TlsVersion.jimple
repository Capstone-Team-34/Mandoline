okhttp3.TlsVersion extends java.lang.Enum
private static final okhttp3.TlsVersion[] $VALUES
public static final enum okhttp3.TlsVersion SSL_3_0
public static final enum okhttp3.TlsVersion TLS_1_0
public static final enum okhttp3.TlsVersion TLS_1_1
public static final enum okhttp3.TlsVersion TLS_1_2
public static final enum okhttp3.TlsVersion TLS_1_3
final java.lang.String javaName
    static void <clinit>()
    {
        okhttp3.TlsVersion $r0;
        okhttp3.TlsVersion[] $r1;

        $r0 = new okhttp3.TlsVersion;

        specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_3", 0, "TLSv1.3");

        <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_3> = $r0;

        $r0 = new okhttp3.TlsVersion;

        specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_2", 1, "TLSv1.2");

        <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_2> = $r0;

        $r0 = new okhttp3.TlsVersion;

        specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_1", 2, "TLSv1.1");

        <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_1> = $r0;

        $r0 = new okhttp3.TlsVersion;

        specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_0", 3, "TLSv1");

        <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_0> = $r0;

        $r0 = new okhttp3.TlsVersion;

        specialinvoke $r0.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("SSL_3_0", 4, "SSLv3");

        <okhttp3.TlsVersion: okhttp3.TlsVersion SSL_3_0> = $r0;

        $r1 = newarray (okhttp3.TlsVersion)[5];

        $r0 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_3>;

        $r1[0] = $r0;

        $r0 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_2>;

        $r1[1] = $r0;

        $r0 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_1>;

        $r1[2] = $r0;

        $r0 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_0>;

        $r1[3] = $r0;

        $r0 = <okhttp3.TlsVersion: okhttp3.TlsVersion SSL_3_0>;

        $r1[4] = $r0;

        <okhttp3.TlsVersion: okhttp3.TlsVersion[] $VALUES> = $r1;

        return;
    }
    private void <init>(java.lang.String, int, java.lang.String)
    {
        okhttp3.TlsVersion r0;
        java.lang.String $r1, $r2;
        int $i0;

        r0 := @this: okhttp3.TlsVersion;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        r0.<okhttp3.TlsVersion: java.lang.String javaName> = $r2;

        return;
    }
    public static okhttp3.TlsVersion forJavaName(java.lang.String)
    {
        java.lang.String $r0;
        byte $b0;
        int $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        boolean $z0;
        okhttp3.TlsVersion r3;

        $r0 := @parameter0: java.lang.String;

        $b0 = -1;

        $i1 = virtualinvoke $r0.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -503070503: goto label05;
            case -503070502: goto label04;
            case -503070501: goto label03;
            case 79201641: goto label07;
            case 79923350: goto label06;
            default: goto label01;
        };

     label01:
        lookupswitch($b0)
        {
            case 0: goto label08;
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label12;
            default: goto label02;
        };

     label02:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected TLS version: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label03:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.3");

        if $z0 == 0 goto label01;

        $b0 = 0;

        goto label01;

     label04:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.2");

        if $z0 == 0 goto label01;

        $b0 = 1;

        goto label01;

     label05:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1.1");

        if $z0 == 0 goto label01;

        $b0 = 2;

        goto label01;

     label06:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1");

        if $z0 == 0 goto label01;

        $b0 = 3;

        goto label01;

     label07:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("SSLv3");

        if $z0 == 0 goto label01;

        $b0 = 4;

        goto label01;

     label08:
        r3 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_3>;

        return r3;

     label09:
        r3 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_2>;

        return r3;

     label10:
        r3 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_1>;

        return r3;

     label11:
        r3 = <okhttp3.TlsVersion: okhttp3.TlsVersion TLS_1_0>;

        return r3;

     label12:
        r3 = <okhttp3.TlsVersion: okhttp3.TlsVersion SSL_3_0>;

        return r3;
    }
    static transient java.util.List forJavaNames(java.lang.String[])
    {
        java.lang.String[] $r0;
        java.util.ArrayList r1;
        java.lang.String r2;
        int $i0, $i1;
        okhttp3.TlsVersion $r3;
        java.util.List $r4;

        $r0 := @parameter0: java.lang.String[];

        r1 = new java.util.ArrayList;

        $i0 = lengthof $r0;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r2 = $r0[$i1];

        $r3 = staticinvoke <okhttp3.TlsVersion: okhttp3.TlsVersion forJavaName(java.lang.String)>(r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r4;
    }
    public static okhttp3.TlsVersion valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        okhttp3.TlsVersion $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lokhttp3/TlsVersion;", $r0);

        $r2 = (okhttp3.TlsVersion) $r1;

        return $r2;
    }
    public static okhttp3.TlsVersion[] values()
    {
        java.lang.Object $r0;
        okhttp3.TlsVersion[] $r1;

        $r1 = <okhttp3.TlsVersion: okhttp3.TlsVersion[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (okhttp3.TlsVersion[]) $r0;

        return $r1;
    }
    public java.lang.String javaName()
    {
        okhttp3.TlsVersion r0;
        java.lang.String r1;

        r0 := @this: okhttp3.TlsVersion;

        r1 = r0.<okhttp3.TlsVersion: java.lang.String javaName>;

        return r1;
    }
