okhttp3.HttpUrl extends java.lang.Object
static final java.lang.String FORM_ENCODE_SET
static final java.lang.String FRAGMENT_ENCODE_SET
static final java.lang.String FRAGMENT_ENCODE_SET_URI
private static final char[] HEX_DIGITS
static final java.lang.String PASSWORD_ENCODE_SET
static final java.lang.String PATH_SEGMENT_ENCODE_SET
static final java.lang.String PATH_SEGMENT_ENCODE_SET_URI
static final java.lang.String QUERY_COMPONENT_ENCODE_SET
static final java.lang.String QUERY_COMPONENT_ENCODE_SET_URI
static final java.lang.String QUERY_ENCODE_SET
static final java.lang.String USERNAME_ENCODE_SET
private final java.lang.String fragment
final java.lang.String host
private final java.lang.String password
private final java.util.List pathSegments
final int port
private final java.util.List queryNamesAndValues
final java.lang.String scheme
private final java.lang.String url
private final java.lang.String username
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        <okhttp3.HttpUrl: char[] HEX_DIGITS> = $r0;

        return;
    }
    void <init>(okhttp3.HttpUrl$Builder)
    {
        okhttp3.HttpUrl r0;
        okhttp3.HttpUrl$Builder $r1;
        java.lang.String $r2, $r3;
        int $i0;
        java.util.List $r4;

        r0 := @this: okhttp3.HttpUrl;

        $r1 := @parameter0: okhttp3.HttpUrl$Builder;

        $r2 = null;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = $r1.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        r0.<okhttp3.HttpUrl: java.lang.String scheme> = $r3;

        $r3 = $r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername>;

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r3, 0);

        r0.<okhttp3.HttpUrl: java.lang.String username> = $r3;

        $r3 = $r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword>;

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r3, 0);

        r0.<okhttp3.HttpUrl: java.lang.String password> = $r3;

        $r3 = $r1.<okhttp3.HttpUrl$Builder: java.lang.String host>;

        r0.<okhttp3.HttpUrl: java.lang.String host> = $r3;

        $i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: int effectivePort()>();

        r0.<okhttp3.HttpUrl: int port> = $i0;

        $r4 = $r1.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r4 = specialinvoke r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 0);

        r0.<okhttp3.HttpUrl: java.util.List pathSegments> = $r4;

        $r4 = $r1.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r4 == null goto label3;

        $r4 = $r1.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $r4 = specialinvoke r0.<okhttp3.HttpUrl: java.util.List percentDecode(java.util.List,boolean)>($r4, 1);

     label1:
        r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues> = $r4;

        $r3 = $r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment>;

        if $r3 == null goto label2;

        $r2 = $r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment>;

        $r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>($r2, 0);

     label2:
        r0.<okhttp3.HttpUrl: java.lang.String fragment> = $r2;

        $r2 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: java.lang.String toString()>();

        r0.<okhttp3.HttpUrl: java.lang.String url> = $r2;

        return;

     label3:
        $r4 = null;

        goto label1;
    }
    static java.lang.String canonicalize(java.lang.String, int, int, java.lang.String, boolean, boolean, boolean, boolean)
    {
        java.lang.String $r0, $r1;
        int $i0, $i1, i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4;
        okio.Buffer r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.lang.String;

        $z0 := @parameter4: boolean;

        $z1 := @parameter5: boolean;

        $z2 := @parameter6: boolean;

        $z3 := @parameter7: boolean;

        i2 = $i0;

     label1:
        if i2 >= $i1 goto label6;

        $i3 = virtualinvoke $r0.<java.lang.String: int codePointAt(int)>(i2);

        if $i3 < 32 goto label4;

        if $i3 == 127 goto label4;

        if $i3 < 128 goto label2;

        if $z3 != 0 goto label4;

     label2:
        $i4 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($i3);

        if $i4 != -1 goto label4;

        if $i3 != 37 goto label3;

        if $z0 == 0 goto label4;

        if $z1 == 0 goto label3;

        $z4 = staticinvoke <okhttp3.HttpUrl: boolean percentEncoded(java.lang.String,int,int)>($r0, i2, $i1);

        if $z4 == 0 goto label4;

     label3:
        if $i3 != 43 goto label5;

        if $z2 == 0 goto label5;

     label4:
        r2 = new okio.Buffer;

        specialinvoke r2.<okio.Buffer: void <init>()>();

        virtualinvoke r2.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r0, $i0, i2);

        staticinvoke <okhttp3.HttpUrl: void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>(r2, $r0, i2, $i1, $r1, $z0, $z1, $z2, $z3);

        $r0 = virtualinvoke r2.<okio.Buffer: java.lang.String readUtf8()>();

        return $r0;

     label5:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        i2 = i2 + $i3;

        goto label1;

     label6:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r0;
    }
    static java.lang.String canonicalize(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean)
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $z2 := @parameter4: boolean;

        $z3 := @parameter5: boolean;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, 0, $i0, $r1, $z0, $z1, $z2, $z3);

        return $r0;
    }
    static void canonicalize(okio.Buffer, java.lang.String, int, int, java.lang.String, boolean, boolean, boolean, boolean)
    {
        okio.Buffer $r0, r3;
        java.lang.String $r1, $r2, $r4;
        int $i0, $i1, i2, $i3, $i5;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b4;
        char[] $r5;
        char $c6;

        $r0 := @parameter0: okio.Buffer;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.String;

        $z0 := @parameter5: boolean;

        $z1 := @parameter6: boolean;

        $z2 := @parameter7: boolean;

        $z3 := @parameter8: boolean;

        r3 = null;

     label01:
        if $i0 >= $i1 goto label12;

        $i3 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>($i0);

        if $z0 == 0 goto label03;

        if $i3 == 9 goto label02;

        if $i3 == 10 goto label02;

        if $i3 == 12 goto label02;

        if $i3 != 13 goto label03;

     label02:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i3);

        $i0 = $i0 + $i3;

        goto label01;

     label03:
        if $i3 != 43 goto label06;

        if $z2 == 0 goto label06;

        if $z0 == 0 goto label05;

        $r4 = "+";

     label04:
        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r4);

        goto label02;

     label05:
        $r4 = "%2B";

        goto label04;

     label06:
        if $i3 < 32 goto label08;

        if $i3 == 127 goto label08;

        if $i3 < 128 goto label07;

        if $z3 != 0 goto label08;

     label07:
        i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i3);

        if i2 != -1 goto label08;

        if $i3 != 37 goto label11;

        if $z0 == 0 goto label08;

        if $z1 == 0 goto label11;

        $z4 = staticinvoke <okhttp3.HttpUrl: boolean percentEncoded(java.lang.String,int,int)>($r1, $i0, $i1);

        if $z4 != 0 goto label11;

     label08:
        if r3 != null goto label09;

        r3 = new okio.Buffer;

        specialinvoke r3.<okio.Buffer: void <init>()>();

     label09:
        virtualinvoke r3.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>($i3);

     label10:
        $z4 = virtualinvoke r3.<okio.Buffer: boolean exhausted()>();

        if $z4 != 0 goto label02;

        $b4 = virtualinvoke r3.<okio.Buffer: byte readByte()>();

        i2 = $b4 & 255;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>(37);

        $r5 = <okhttp3.HttpUrl: char[] HEX_DIGITS>;

        $i5 = i2 >> 4;

        $i5 = $i5 & 15;

        $c6 = $r5[$i5];

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>($c6);

        $r5 = <okhttp3.HttpUrl: char[] HEX_DIGITS>;

        i2 = i2 & 15;

        $c6 = $r5[i2];

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>($c6);

        goto label10;

     label11:
        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>($i3);

        goto label02;

     label12:
        return;
    }
    static int decodeHexDigit(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        if $c0 < 48 goto label1;

        if $c0 > 57 goto label1;

        $i1 = $c0 + -48;

        return $i1;

     label1:
        if $c0 < 97 goto label2;

        if $c0 > 102 goto label2;

        $i1 = $c0 + -97;

        $i1 = $i1 + 10;

        return $i1;

     label2:
        if $c0 < 65 goto label3;

        if $c0 > 70 goto label3;

        $i1 = $c0 + -65;

        $i1 = $i1 + 10;

        return $i1;

     label3:
        return -1;
    }
    public static int defaultPort(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 == 0 goto label1;

        return 80;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("https");

        if $z0 == 0 goto label2;

        return 443;

     label2:
        return -1;
    }
    public static okhttp3.HttpUrl get(java.net.URI)
    {
        java.net.URI $r0;
        java.lang.String $r1;
        okhttp3.HttpUrl $r2;

        $r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke $r0.<java.net.URI: java.lang.String toString()>();

        $r2 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1);

        return $r2;
    }
    public static okhttp3.HttpUrl get(java.net.URL)
    {
        java.net.URL $r0;
        java.lang.String $r1;
        okhttp3.HttpUrl $r2;

        $r0 := @parameter0: java.net.URL;

        $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String toString()>();

        $r2 = staticinvoke <okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)>($r1);

        return $r2;
    }
    static okhttp3.HttpUrl getChecked(java.lang.String) throws java.net.MalformedURLException, java.net.UnknownHostException
    {
        java.lang.String $r0;
        okhttp3.HttpUrl$Builder r1;
        okhttp3.HttpUrl$Builder$ParseResult $r2;
        int[] $r3;
        int $i0;
        java.net.MalformedURLException $r4;
        java.lang.StringBuilder $r5;
        okhttp3.HttpUrl $r6;
        java.net.UnknownHostException $r7;

        $r0 := @parameter0: java.lang.String;

        r1 = new okhttp3.HttpUrl$Builder;

        specialinvoke r1.<okhttp3.HttpUrl$Builder: void <init>()>();

        $r2 = virtualinvoke r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0);

        $r3 = <okhttp3.HttpUrl$1: int[] $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult>;

        $i0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder$ParseResult: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        $r4 = new java.net.MalformedURLException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URL: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.MalformedURLException: void <init>(java.lang.String)>($r0);

        throw $r4;

     label2:
        $r6 = virtualinvoke r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>();

        return $r6;

     label3:
        $r7 = new java.net.UnknownHostException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid host: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.net.UnknownHostException: void <init>(java.lang.String)>($r0);

        throw $r7;
    }
    static void namesAndValuesToQueryString(java.lang.StringBuilder, java.util.List)
    {
        java.lang.StringBuilder $r0;
        java.util.List r1;
        int i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.String r3, r4;

        $r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.List;

        i0 = 0;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label4;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.lang.String) $r2;

        $i2 = i0 + 1;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        r4 = (java.lang.String) $r2;

        if i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        if r4 == null goto label3;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label3:
        i0 = i0 + 2;

        goto label1;

     label4:
        return;
    }
    public static okhttp3.HttpUrl parse(java.lang.String)
    {
        java.lang.String $r0;
        okhttp3.HttpUrl$Builder r1;
        okhttp3.HttpUrl$Builder$ParseResult $r2, $r3;
        okhttp3.HttpUrl $r4;

        $r0 := @parameter0: java.lang.String;

        r1 = new okhttp3.HttpUrl$Builder;

        specialinvoke r1.<okhttp3.HttpUrl$Builder: void <init>()>();

        $r3 = virtualinvoke r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(null, $r0);

        $r2 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult SUCCESS>;

        if $r3 != $r2 goto label1;

        $r4 = virtualinvoke r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>();

        return $r4;

     label1:
        return null;
    }
    static void pathSegmentsToString(java.lang.StringBuilder, java.util.List)
    {
        java.lang.StringBuilder $r0;
        java.util.List r1;
        int i0, $i1;
        java.lang.Object $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.List;

        i0 = 0;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
    static java.lang.String percentDecode(java.lang.String, int, int, boolean)
    {
        java.lang.String $r0;
        int $i0, $i1, i2;
        boolean $z0;
        okio.Buffer r1;
        char $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        i2 = $i0;

     label1:
        if i2 >= $i1 goto label4;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i2);

        if $c3 == 37 goto label2;

        if $c3 != 43 goto label3;

        if $z0 == 0 goto label3;

     label2:
        r1 = new okio.Buffer;

        specialinvoke r1.<okio.Buffer: void <init>()>();

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r0, $i0, i2);

        staticinvoke <okhttp3.HttpUrl: void percentDecode(okio.Buffer,java.lang.String,int,int,boolean)>(r1, $r0, i2, $i1, $z0);

        $r0 = virtualinvoke r1.<okio.Buffer: java.lang.String readUtf8()>();

        return $r0;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r0;
    }
    static java.lang.String percentDecode(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, 0, $i0, $z0);

        return $r0;
    }
    private java.util.List percentDecode(java.util.List, boolean)
    {
        okhttp3.HttpUrl r0;
        java.util.List r1;
        boolean $z0;
        java.util.ArrayList r2;
        int $i0, i1;
        java.lang.Object $r3;
        java.lang.String r4;

        r0 := @this: okhttp3.HttpUrl;

        r1 := @parameter0: java.util.List;

        $z0 := @parameter1: boolean;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label3;

        r4 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,boolean)>(r4, $z0);

     label2:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        r4 = null;

        goto label2;

     label4:
        r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return r1;
    }
    static void percentDecode(okio.Buffer, java.lang.String, int, int, boolean)
    {
        okio.Buffer $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0;
        char $c4;

        $r0 := @parameter0: okio.Buffer;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 := @parameter4: boolean;

     label1:
        if $i0 >= $i1 goto label5;

        $i2 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>($i0);

        if $i2 != 37 goto label3;

        $i3 = $i0 + 2;

        if $i3 >= $i1 goto label3;

        $i3 = $i0 + 1;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        $i3 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4);

        $i5 = $i0 + 2;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i5);

        $i5 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c4);

        if $i3 == -1 goto label4;

        if $i5 == -1 goto label4;

        $i3 = $i3 << 4;

        $i3 = $i3 + $i5;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>($i3);

        $i0 = $i0 + 2;

     label2:
        $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i2);

        $i0 = $i0 + $i2;

        goto label1;

     label3:
        if $i2 != 43 goto label4;

        if $z0 == 0 goto label4;

        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeByte(int)>(32);

        goto label2;

     label4:
        virtualinvoke $r0.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>($i2);

        goto label2;

     label5:
        return;
    }
    static boolean percentEncoded(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        char $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i0 + 2;

        if $i2 >= $i1 goto label1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c3 != 37 goto label1;

        $i1 = $i0 + 1;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $i1 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c3);

        if $i1 == -1 goto label1;

        $i0 = $i0 + 2;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $i0 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c3);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }
    static java.util.List queryStringToNamesAndValues(java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.util.ArrayList r1;
        int i0, $i1, $i2;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 > $i1 goto label6;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(38, i0);

        $i1 = $i2;

        if $i2 != -1 goto label2;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

     label2:
        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(61, i0);

        if $i2 == -1 goto label3;

        if $i2 <= $i1 goto label5;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(null);

     label4:
        i0 = $i1 + 1;

        goto label1;

     label5:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i0 = $i2 + 1;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label4;

     label6:
        return r1;
    }
    public java.lang.String encodedFragment()
    {
        okhttp3.HttpUrl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String fragment>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(35);

        i0 = i0 + 1;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r1;
    }
    public java.lang.String encodedPassword()
    {
        okhttp3.HttpUrl r0;
        int i0, $i1;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String password>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        i0 = i0 + 3;

        i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(58, i0);

        i0 = i0 + 1;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(64);

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }
    public java.lang.String encodedPath()
    {
        okhttp3.HttpUrl r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 + 3;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(47, $i0);

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i0, $i1, "?#");

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r1;
    }
    public java.util.List encodedPathSegments()
    {
        okhttp3.HttpUrl r0;
        java.util.ArrayList r1;
        java.lang.String $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: okhttp3.HttpUrl;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r3 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 3;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(47, $i0);

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r3 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i1, $i0, "?#");

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label1:
        if $i1 >= $i0 goto label2;

        $i1 = $i1 + 1;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i1, $i0, 47);

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $i1 = $i2;

        goto label1;

     label2:
        return r1;
    }
    public java.lang.String encodedQuery()
    {
        okhttp3.HttpUrl r0;
        int i0, $i1, $i2;
        java.util.List $r1;
        java.lang.String $r2, $r3;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(63);

        i0 = i0 + 1;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i1 = i0 + 1;

        $r3 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i1, $i2, 35);

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }
    public java.lang.String encodedUsername()
    {
        okhttp3.HttpUrl r0;
        int i0, $i1;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String username>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r1 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i0 = i0 + 3;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, i0, $i1, ":@");

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.HttpUrl r0, $r3;
        java.lang.String $r1, $r4;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @this: okhttp3.HttpUrl;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof okhttp3.HttpUrl;

        if $z0 == 0 goto label1;

        $r3 = (okhttp3.HttpUrl) $r2;

        $r4 = $r3.<okhttp3.HttpUrl: java.lang.String url>;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.lang.String fragment()
    {
        okhttp3.HttpUrl r0;
        java.lang.String r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.lang.String fragment>;

        return r1;
    }
    public int hashCode()
    {
        okhttp3.HttpUrl r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }
    public java.lang.String host()
    {
        okhttp3.HttpUrl r0;
        java.lang.String r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.lang.String host>;

        return r1;
    }
    public boolean isHttps()
    {
        okhttp3.HttpUrl r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("https");

        return $z0;
    }
    public okhttp3.HttpUrl$Builder newBuilder()
    {
        okhttp3.HttpUrl r0;
        okhttp3.HttpUrl$Builder r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.util.List $r3, $r4;

        r0 := @this: okhttp3.HttpUrl;

        r1 = new okhttp3.HttpUrl$Builder;

        specialinvoke r1.<okhttp3.HttpUrl$Builder: void <init>()>();

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        r1.<okhttp3.HttpUrl$Builder: java.lang.String scheme> = $r2;

        $r2 = virtualinvoke r0.<okhttp3.HttpUrl: java.lang.String encodedUsername()>();

        r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername> = $r2;

        $r2 = virtualinvoke r0.<okhttp3.HttpUrl: java.lang.String encodedPassword()>();

        r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = $r2;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String host>;

        r1.<okhttp3.HttpUrl$Builder: java.lang.String host> = $r2;

        $i0 = r0.<okhttp3.HttpUrl: int port>;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        $i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2);

        if $i0 == $i1 goto label2;

        $i0 = r0.<okhttp3.HttpUrl: int port>;

     label1:
        r1.<okhttp3.HttpUrl$Builder: int port> = $i0;

        $r3 = r1.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r3 = r1.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r4 = virtualinvoke r0.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r2 = virtualinvoke r0.<okhttp3.HttpUrl: java.lang.String encodedQuery()>();

        virtualinvoke r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r2);

        $r2 = virtualinvoke r0.<okhttp3.HttpUrl: java.lang.String encodedFragment()>();

        r1.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment> = $r2;

        return r1;

     label2:
        $i0 = -1;

        goto label1;
    }
    public okhttp3.HttpUrl$Builder newBuilder(java.lang.String)
    {
        okhttp3.HttpUrl r0;
        java.lang.String $r1;
        okhttp3.HttpUrl$Builder$ParseResult $r2, $r3;
        okhttp3.HttpUrl$Builder r4;

        r0 := @this: okhttp3.HttpUrl;

        $r1 := @parameter0: java.lang.String;

        r4 = new okhttp3.HttpUrl$Builder;

        specialinvoke r4.<okhttp3.HttpUrl$Builder: void <init>()>();

        $r3 = virtualinvoke r4.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)>(r0, $r1);

        $r2 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult SUCCESS>;

        if $r3 != $r2 goto label1;

        return r4;

     label1:
        return null;
    }
    public java.lang.String password()
    {
        okhttp3.HttpUrl r0;
        java.lang.String r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.lang.String password>;

        return r1;
    }
    public java.util.List pathSegments()
    {
        okhttp3.HttpUrl r0;
        java.util.List r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.util.List pathSegments>;

        return r1;
    }
    public int pathSize()
    {
        okhttp3.HttpUrl r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.util.List pathSegments>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }
    public int port()
    {
        okhttp3.HttpUrl r0;
        int i0;

        r0 := @this: okhttp3.HttpUrl;

        i0 = r0.<okhttp3.HttpUrl: int port>;

        return i0;
    }
    public java.lang.String query()
    {
        okhttp3.HttpUrl r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.HttpUrl;

        $r3 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r3 != null goto label1;

        return null;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>(r1, $r3);

        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public java.lang.String queryParameter(java.lang.String)
    {
        okhttp3.HttpUrl r0;
        java.lang.String $r1;
        java.util.List $r2;
        int i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r2 != null goto label1;

        return null;

     label1:
        i0 = 0;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        if i0 >= $i1 goto label4;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        i0 = i0 + 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r1 = (java.lang.String) $r3;

        return $r1;

     label3:
        i0 = i0 + 2;

        goto label2;

     label4:
        return null;
    }
    public java.lang.String queryParameterName(int)
    {
        okhttp3.HttpUrl r0;
        int $i0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: okhttp3.HttpUrl;

        $i0 := @parameter0: int;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i0 = $i0 * 2;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r1;

        return $r4;
    }
    public java.util.Set queryParameterNames()
    {
        okhttp3.HttpUrl r0;
        java.util.LinkedHashSet r1;
        java.util.List $r2;
        java.util.Set $r3;
        int i0, $i1;
        java.lang.Object $r4;

        r0 := @this: okhttp3.HttpUrl;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r3;

     label1:
        r1 = new java.util.LinkedHashSet;

        specialinvoke r1.<java.util.LinkedHashSet: void <init>()>();

        i0 = 0;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        if i0 >= $i1 goto label3;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

        i0 = i0 + 2;

        goto label2;

     label3:
        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r1);

        return $r3;
    }
    public java.lang.String queryParameterValue(int)
    {
        okhttp3.HttpUrl r0;
        int $i0;
        java.lang.Object $r1;
        java.util.List $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: okhttp3.HttpUrl;

        $i0 := @parameter0: int;

        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i0 = $i0 * 2;

        $i0 = $i0 + 1;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r4 = (java.lang.String) $r1;

        return $r4;
    }
    public java.util.List queryParameterValues(java.lang.String)
    {
        okhttp3.HttpUrl r0;
        java.lang.String $r1;
        java.util.ArrayList r2;
        int $i0, i1, $i2;
        java.util.List $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r3 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i1 = 0;

        $r3 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

     label2:
        if i1 >= $i2 goto label4;

        $r3 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r3 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i0 = i1 + 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4);

     label3:
        i1 = i1 + 2;

        goto label2;

     label4:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r2);

        return $r3;
    }
    public int querySize()
    {
        okhttp3.HttpUrl r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        if $r1 == null goto label1;

        $r1 = r0.<okhttp3.HttpUrl: java.util.List queryNamesAndValues>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = $i0 / 2;

        return $i0;

     label1:
        return 0;
    }
    public java.lang.String redact()
    {
        okhttp3.HttpUrl r0;
        okhttp3.HttpUrl$Builder $r1;
        java.lang.String $r2;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = virtualinvoke r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>("/...");

        $r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder username(java.lang.String)>("");

        $r1 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder password(java.lang.String)>("");

        r0 = virtualinvoke $r1.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>();

        $r2 = virtualinvoke r0.<okhttp3.HttpUrl: java.lang.String toString()>();

        return $r2;
    }
    public okhttp3.HttpUrl resolve(java.lang.String)
    {
        okhttp3.HttpUrl r0;
        java.lang.String $r1;
        okhttp3.HttpUrl$Builder $r2;

        r0 := @this: okhttp3.HttpUrl;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder(java.lang.String)>($r1);

        if $r2 == null goto label1;

        r0 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>();

        return r0;

     label1:
        return null;
    }
    public java.lang.String scheme()
    {
        okhttp3.HttpUrl r0;
        java.lang.String r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.lang.String scheme>;

        return r1;
    }
    public java.lang.String toString()
    {
        okhttp3.HttpUrl r0;
        java.lang.String r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.lang.String url>;

        return r1;
    }
    public java.lang.String topPrivateDomain()
    {
        okhttp3.HttpUrl r0;
        java.lang.String $r1;
        boolean $z0;
        okhttp3.internal.publicsuffix.PublicSuffixDatabase $r2;

        r0 := @this: okhttp3.HttpUrl;

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String host>;

        $z0 = staticinvoke <okhttp3.internal.Util: boolean verifyAsIpAddress(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = staticinvoke <okhttp3.internal.publicsuffix.PublicSuffixDatabase: okhttp3.internal.publicsuffix.PublicSuffixDatabase get()>();

        $r1 = r0.<okhttp3.HttpUrl: java.lang.String host>;

        $r1 = virtualinvoke $r2.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String getEffectiveTldPlusOne(java.lang.String)>($r1);

        return $r1;
    }
    public java.net.URI uri()
    {
        okhttp3.HttpUrl r0;
        java.net.URISyntaxException r1;
        java.lang.Exception r2;
        okhttp3.HttpUrl$Builder $r3;
        java.lang.String $r4;
        java.net.URI $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: okhttp3.HttpUrl;

        $r3 = virtualinvoke r0.<okhttp3.HttpUrl: okhttp3.HttpUrl$Builder newBuilder()>();

        $r3 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder reencodeForUri()>();

        $r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Builder: java.lang.String toString()>();

        $r5 = new java.net.URI;

     label1:
        specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r4);

     label2:
        return $r5;

     label3:
        r1 := @caughtexception;

     label4:
        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]", "");

        $r5 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r4);

     label5:
        return $r5;

     label6:
        r2 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.net.URISyntaxException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }
    public java.net.URL url()
    {
        okhttp3.HttpUrl r0;
        java.net.MalformedURLException r1;
        java.lang.String $r2;
        java.net.URL $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: okhttp3.HttpUrl;

        $r3 = new java.net.URL;

        $r2 = r0.<okhttp3.HttpUrl: java.lang.String url>;

     label1:
        specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r2);

     label2:
        return $r3;

     label3:
        r1 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

        throw $r4;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }
    public java.lang.String username()
    {
        okhttp3.HttpUrl r0;
        java.lang.String r1;

        r0 := @this: okhttp3.HttpUrl;

        r1 = r0.<okhttp3.HttpUrl: java.lang.String username>;

        return r1;
    }
