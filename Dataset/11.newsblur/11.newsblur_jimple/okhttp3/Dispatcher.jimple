okhttp3.Dispatcher extends java.lang.Object
private java.util.concurrent.ExecutorService executorService
private java.lang.Runnable idleCallback
private int maxRequests
private int maxRequestsPerHost
private final java.util.Deque readyAsyncCalls
private final java.util.Deque runningAsyncCalls
private final java.util.Deque runningSyncCalls
    public void <init>()
    {
        okhttp3.Dispatcher r0;
        java.util.ArrayDeque $r1;

        r0 := @this: okhttp3.Dispatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.Dispatcher: int maxRequests> = 64;

        r0.<okhttp3.Dispatcher: int maxRequestsPerHost> = 5;

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls> = $r1;

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls> = $r1;

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls> = $r1;

        return;
    }
    public void <init>(java.util.concurrent.ExecutorService)
    {
        okhttp3.Dispatcher r0;
        java.util.concurrent.ExecutorService $r1;
        java.util.ArrayDeque $r2;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.Dispatcher: int maxRequests> = 64;

        r0.<okhttp3.Dispatcher: int maxRequestsPerHost> = 5;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls> = $r2;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls> = $r2;

        $r2 = new java.util.ArrayDeque;

        specialinvoke $r2.<java.util.ArrayDeque: void <init>()>();

        r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls> = $r2;

        r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService> = $r1;

        return;
    }
    private void finished(java.util.Deque, java.lang.Object, boolean)
    {
        okhttp3.Dispatcher r0;
        java.util.Deque r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        java.lang.Runnable r3;
        java.lang.AssertionError $r4;
        java.lang.Throwable $r5;
        int $i0;

        r0 := @this: okhttp3.Dispatcher;

        r1 := @parameter0: java.util.Deque;

        r2 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        entermonitor r0;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Deque: boolean remove(java.lang.Object)>(r2);

        if $z1 != 0 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Call wasn\'t in-flight!");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        exitmonitor r0;

     label3:
        throw $r5;

     label4:
        if $z0 == 0 goto label6;

     label5:
        specialinvoke r0.<okhttp3.Dispatcher: void promoteCalls()>();

     label6:
        $i0 = virtualinvoke r0.<okhttp3.Dispatcher: int runningCallsCount()>();

        r3 = r0.<okhttp3.Dispatcher: java.lang.Runnable idleCallback>;

        exitmonitor r0;

     label7:
        if $i0 != 0 goto label8;

        if r3 == null goto label8;

        interfaceinvoke r3.<java.lang.Runnable: void run()>();

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label5 to label7 with label2;
    }
    private void promoteCalls()
    {
        okhttp3.Dispatcher r0;
        java.util.Deque $r1;
        int $i0, $i1;
        boolean $z0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        okhttp3.RealCall$AsyncCall r4;
        java.util.concurrent.ExecutorService $r5;

        r0 := @this: okhttp3.Dispatcher;

        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        $i1 = r0.<okhttp3.Dispatcher: int maxRequests>;

        if $i0 < $i1 goto label1;

        return;

     label1:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls>;

        $z0 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (okhttp3.RealCall$AsyncCall) $r3;

        $i0 = specialinvoke r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>(r4);

        $i1 = r0.<okhttp3.Dispatcher: int maxRequestsPerHost>;

        if $i0 >= $i1 goto label3;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        interfaceinvoke $r1.<java.util.Deque: boolean add(java.lang.Object)>(r4);

        $r5 = virtualinvoke r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>();

        interfaceinvoke $r5.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r4);

     label3:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        $i1 = r0.<okhttp3.Dispatcher: int maxRequests>;

        if $i0 < $i1 goto label2;

     label4:
        return;
    }
    private int runningCallsForHost(okhttp3.RealCall$AsyncCall)
    {
        okhttp3.Dispatcher r0;
        okhttp3.RealCall$AsyncCall $r1, r5;
        int i0;
        java.util.Deque $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r6, $r7;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: okhttp3.RealCall$AsyncCall;

        i0 = 0;

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (okhttp3.RealCall$AsyncCall) $r4;

        $r6 = virtualinvoke r5.<okhttp3.RealCall$AsyncCall: java.lang.String host()>();

        $r7 = virtualinvoke $r1.<okhttp3.RealCall$AsyncCall: java.lang.String host()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }
    public void cancelAll()
    {
        okhttp3.Dispatcher r0;
        java.util.Deque $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        okhttp3.RealCall$AsyncCall r4;
        okhttp3.RealCall $r5;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label01:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (okhttp3.RealCall$AsyncCall) $r3;

        $r5 = virtualinvoke r4.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall get()>();

        virtualinvoke $r5.<okhttp3.RealCall: void cancel()>();

     label03:
        goto label02;

     label04:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

     label05:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (okhttp3.RealCall$AsyncCall) $r3;

        $r5 = virtualinvoke r4.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall get()>();

        virtualinvoke $r5.<okhttp3.RealCall: void cancel()>();

        goto label06;

     label07:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (okhttp3.RealCall) $r3;

        virtualinvoke $r5.<okhttp3.RealCall: void cancel()>();

     label09:
        goto label08;

     label10:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label05 to label09 with label04;
    }
    void enqueue(okhttp3.RealCall$AsyncCall)
    {
        okhttp3.Dispatcher r0;
        okhttp3.RealCall$AsyncCall $r1;
        java.util.Deque $r2;
        int $i0, $i1;
        java.util.concurrent.ExecutorService $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: okhttp3.RealCall$AsyncCall;

        entermonitor r0;

     label1:
        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $i0 = interfaceinvoke $r2.<java.util.Deque: int size()>();

        $i1 = r0.<okhttp3.Dispatcher: int maxRequests>;

        if $i0 >= $i1 goto label3;

        $i0 = specialinvoke r0.<okhttp3.Dispatcher: int runningCallsForHost(okhttp3.RealCall$AsyncCall)>($r1);

        $i1 = r0.<okhttp3.Dispatcher: int maxRequestsPerHost>;

        if $i0 >= $i1 goto label3;

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        interfaceinvoke $r2.<java.util.Deque: boolean add(java.lang.Object)>($r1);

        $r3 = virtualinvoke r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>();

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls>;

        interfaceinvoke $r2.<java.util.Deque: boolean add(java.lang.Object)>($r1);

     label4:
        goto label2;

     label5:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    void executed(okhttp3.RealCall)
    {
        okhttp3.Dispatcher r0;
        okhttp3.RealCall $r1;
        java.util.Deque $r2;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: okhttp3.RealCall;

        entermonitor r0;

     label1:
        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls>;

        interfaceinvoke $r2.<java.util.Deque: boolean add(java.lang.Object)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.util.concurrent.ExecutorService executorService()
    {
        okhttp3.Dispatcher r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.SynchronousQueue $r3;
        java.util.concurrent.ThreadFactory $r4;
        java.util.concurrent.ExecutorService $r5;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        $r5 = r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService>;

        if $r5 != null goto label2;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r3.<java.util.concurrent.SynchronousQueue: void <init>()>();

        $r4 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>("OkHttp Dispatcher", 0);

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 2147483647, 60L, $r2, $r3, $r4);

        r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService> = $r1;

     label2:
        $r5 = r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService>;

     label3:
        exitmonitor r0;

        return $r5;

     label4:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
    void finished(okhttp3.RealCall$AsyncCall)
    {
        okhttp3.Dispatcher r0;
        okhttp3.RealCall$AsyncCall $r1;
        java.util.Deque $r2;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: okhttp3.RealCall$AsyncCall;

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        specialinvoke r0.<okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object,boolean)>($r2, $r1, 1);

        return;
    }
    void finished(okhttp3.RealCall)
    {
        okhttp3.Dispatcher r0;
        okhttp3.RealCall $r1;
        java.util.Deque $r2;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: okhttp3.RealCall;

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls>;

        specialinvoke r0.<okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object,boolean)>($r2, $r1, 0);

        return;
    }
    public int getMaxRequests()
    {
        okhttp3.Dispatcher r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Dispatcher: int maxRequests>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getMaxRequestsPerHost()
    {
        okhttp3.Dispatcher r0;
        java.lang.Throwable $r1;
        int i0;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        i0 = r0.<okhttp3.Dispatcher: int maxRequestsPerHost>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.util.List queuedCalls()
    {
        okhttp3.Dispatcher r0;
        java.util.ArrayList r1;
        java.util.Deque $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        okhttp3.RealCall$AsyncCall r5;
        okhttp3.RealCall $r6;
        java.lang.Throwable $r7;
        java.util.List $r8;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (okhttp3.RealCall$AsyncCall) $r4;

        $r6 = virtualinvoke r5.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall get()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

     label5:
        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

     label6:
        exitmonitor r0;

        return $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public int queuedCallsCount()
    {
        okhttp3.Dispatcher r0;
        int $i0;
        java.util.Deque $r1;
        java.lang.Throwable $r2;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque readyAsyncCalls>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

     label2:
        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public java.util.List runningCalls()
    {
        okhttp3.Dispatcher r0;
        java.util.ArrayList r1;
        java.util.Deque $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        okhttp3.RealCall$AsyncCall r5;
        okhttp3.RealCall $r6;
        java.lang.Throwable $r7;
        java.util.List $r8;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls>;

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r2 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (okhttp3.RealCall$AsyncCall) $r4;

        $r6 = virtualinvoke r5.<okhttp3.RealCall$AsyncCall: okhttp3.RealCall get()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        goto label2;

     label4:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

     label5:
        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

     label6:
        exitmonitor r0;

        return $r8;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
    public int runningCallsCount()
    {
        okhttp3.Dispatcher r0;
        java.util.Deque $r1;
        int $i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: okhttp3.Dispatcher;

        entermonitor r0;

     label1:
        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningAsyncCalls>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        $r1 = r0.<okhttp3.Dispatcher: java.util.Deque runningSyncCalls>;

        $i1 = interfaceinvoke $r1.<java.util.Deque: int size()>();

     label2:
        $i0 = $i0 + $i1;

        exitmonitor r0;

        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setIdleCallback(java.lang.Runnable)
    {
        okhttp3.Dispatcher r0;
        java.lang.Runnable $r1;
        java.lang.Throwable $r2;

        r0 := @this: okhttp3.Dispatcher;

        $r1 := @parameter0: java.lang.Runnable;

        entermonitor r0;

     label1:
        r0.<okhttp3.Dispatcher: java.lang.Runnable idleCallback> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void setMaxRequests(int)
    {
        okhttp3.Dispatcher r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.Dispatcher;

        $i0 := @parameter0: int;

        entermonitor r0;

        if $i0 >= 1 goto label3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max < 1: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label3:
        r0.<okhttp3.Dispatcher: int maxRequests> = $i0;

        specialinvoke r0.<okhttp3.Dispatcher: void promoteCalls()>();

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
    public void setMaxRequestsPerHost(int)
    {
        okhttp3.Dispatcher r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        r0 := @this: okhttp3.Dispatcher;

        $i0 := @parameter0: int;

        entermonitor r0;

        if $i0 >= 1 goto label3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max < 1: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

     label3:
        r0.<okhttp3.Dispatcher: int maxRequestsPerHost> = $i0;

        specialinvoke r0.<okhttp3.Dispatcher: void promoteCalls()>();

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
