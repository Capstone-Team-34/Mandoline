okhttp3.internal.cache.DiskLruCache$Entry extends java.lang.Object
final java.io.File[] cleanFiles
okhttp3.internal.cache.DiskLruCache$Editor currentEditor
final java.io.File[] dirtyFiles
final java.lang.String key
final long[] lengths
boolean readable
long sequenceNumber
final okhttp3.internal.cache.DiskLruCache this$0
    void <init>(okhttp3.internal.cache.DiskLruCache, java.lang.String)
    {
        okhttp3.internal.cache.DiskLruCache$Entry r0;
        okhttp3.internal.cache.DiskLruCache $r1;
        java.lang.String $r2;
        int $i0, i1, $i2;
        long[] $r3;
        java.io.File[] $r4;
        java.lang.StringBuilder $r5;
        java.io.File $r6, $r7;

        r0 := @this: okhttp3.internal.cache.DiskLruCache$Entry;

        $r1 := @parameter0: okhttp3.internal.cache.DiskLruCache;

        $r2 := @parameter1: java.lang.String;

        r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.lang.String key> = $r2;

        $i0 = $r1.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        $r3 = newarray (long)[$i0];

        r0.<okhttp3.internal.cache.DiskLruCache$Entry: long[] lengths> = $r3;

        $i0 = $r1.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        $r4 = newarray (java.io.File)[$i0];

        r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.File[] cleanFiles> = $r4;

        $i0 = $r1.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        $r4 = newarray (java.io.File)[$i0];

        r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.File[] dirtyFiles> = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        i1 = 0;

     label1:
        $i2 = $r1.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.File[] cleanFiles>;

        $r6 = new java.io.File;

        $r7 = $r1.<okhttp3.internal.cache.DiskLruCache: java.io.File directory>;

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r2);

        $r4[i1] = $r6;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.File[] dirtyFiles>;

        $r6 = new java.io.File;

        $r7 = $r1.<okhttp3.internal.cache.DiskLruCache: java.io.File directory>;

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r2);

        $r4[i1] = $r6;

        virtualinvoke $r5.<java.lang.StringBuilder: void setLength(int)>($i0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    private java.io.IOException invalidLengths(java.lang.String[]) throws java.io.IOException
    {
        okhttp3.internal.cache.DiskLruCache$Entry r0;
        java.lang.String[] $r1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: okhttp3.internal.cache.DiskLruCache$Entry;

        $r1 := @parameter0: java.lang.String[];

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }
    void setLengths(java.lang.String[]) throws java.io.IOException
    {
        okhttp3.internal.cache.DiskLruCache$Entry r0;
        java.lang.String[] $r1;
        java.lang.NumberFormatException r2;
        int $i0, $i1;
        okhttp3.internal.cache.DiskLruCache $r3;
        java.io.IOException $r4;
        long[] $r5;
        java.lang.String $r6;
        long $l2;

        r0 := @this: okhttp3.internal.cache.DiskLruCache$Entry;

        $r1 := @parameter0: java.lang.String[];

        $i0 = lengthof $r1;

        $r3 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $i1 = $r3.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        if $i0 == $i1 goto label1;

        $r4 = specialinvoke r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.IOException invalidLengths(java.lang.String[])>($r1);

        throw $r4;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        $r5 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: long[] lengths>;

        $r6 = $r1[$i0];

     label3:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

     label4:
        $r5[$i0] = $l2;

        $i0 = $i0 + 1;

        goto label2;

     label5:
        r2 := @caughtexception;

        $r4 = specialinvoke r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.IOException invalidLengths(java.lang.String[])>($r1);

        throw $r4;

     label6:
        return;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }
    okhttp3.internal.cache.DiskLruCache$Snapshot snapshot()
    {
        okhttp3.internal.cache.DiskLruCache$Entry r0;
        java.io.FileNotFoundException r1;
        java.lang.String $r2;
        long $l0;
        okio.Source[] r3;
        okhttp3.internal.cache.DiskLruCache $r4;
        boolean $z0;
        java.lang.AssertionError $r5;
        int $i1, $i2;
        long[] $r6;
        java.lang.Object $r7;
        okhttp3.internal.io.FileSystem $r8;
        java.io.File[] $r9;
        java.io.File $r10;
        okio.Source $r11;
        okhttp3.internal.cache.DiskLruCache$Snapshot $r12;
        java.io.IOException $r13;

        r0 := @this: okhttp3.internal.cache.DiskLruCache$Entry;

        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r4);

        if $z0 != 0 goto label01;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label01:
        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $i1 = $r4.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        r3 = newarray (okio.Source)[$i1];

        $r6 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: long[] lengths>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (long[]) $r7;

        $i1 = 0;

     label02:
        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $i2 = $r4.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        if $i1 >= $i2 goto label05;

        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $r8 = $r4.<okhttp3.internal.cache.DiskLruCache: okhttp3.internal.io.FileSystem fileSystem>;

        $r9 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.io.File[] cleanFiles>;

        $r10 = $r9[$i1];

     label03:
        $r11 = interfaceinvoke $r8.<okhttp3.internal.io.FileSystem: okio.Source source(java.io.File)>($r10);

     label04:
        r3[$i1] = $r11;

        $i1 = $i1 + 1;

        goto label02;

     label05:
        $r12 = new okhttp3.internal.cache.DiskLruCache$Snapshot;

        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $r2 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: java.lang.String key>;

        $l0 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: long sequenceNumber>;

     label06:
        specialinvoke $r12.<okhttp3.internal.cache.DiskLruCache$Snapshot: void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[])>($r4, $r2, $l0, r3, $r6);

     label07:
        return $r12;

     label08:
        r1 := @caughtexception;

        $i1 = 0;

     label09:
        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

        $i2 = $r4.<okhttp3.internal.cache.DiskLruCache: int valueCount>;

        if $i1 >= $i2 goto label10;

        $r11 = r3[$i1];

        if $r11 == null goto label10;

        $r11 = r3[$i1];

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r11);

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r4 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: okhttp3.internal.cache.DiskLruCache this$0>;

     label11:
        virtualinvoke $r4.<okhttp3.internal.cache.DiskLruCache: boolean removeEntry(okhttp3.internal.cache.DiskLruCache$Entry)>(r0);

     label12:
        return null;

     label13:
        $r13 := @caughtexception;

        goto label12;

        catch java.io.FileNotFoundException from label03 to label04 with label08;
        catch java.io.FileNotFoundException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label13;
    }
    void writeLengths(okio.BufferedSink) throws java.io.IOException
    {
        okhttp3.internal.cache.DiskLruCache$Entry r0;
        okio.BufferedSink $r1, $r3;
        long l0;
        long[] $r2;
        int $i1, $i2;

        r0 := @this: okhttp3.internal.cache.DiskLruCache$Entry;

        $r1 := @parameter0: okio.BufferedSink;

        $r2 = r0.<okhttp3.internal.cache.DiskLruCache$Entry: long[] lengths>;

        $i1 = lengthof $r2;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        l0 = $r2[$i2];

        $r3 = interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink writeByte(int)>(32);

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>(l0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }
