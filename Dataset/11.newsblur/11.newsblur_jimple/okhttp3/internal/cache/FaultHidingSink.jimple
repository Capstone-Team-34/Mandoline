okhttp3.internal.cache.FaultHidingSink extends okio.ForwardingSink
private boolean hasErrors
    void <init>(okio.Sink)
    {
        okhttp3.internal.cache.FaultHidingSink r0;
        okio.Sink $r1;

        r0 := @this: okhttp3.internal.cache.FaultHidingSink;

        $r1 := @parameter0: okio.Sink;

        specialinvoke r0.<okio.ForwardingSink: void <init>(okio.Sink)>($r1);

        return;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.internal.cache.FaultHidingSink r0;
        java.io.IOException r1;
        boolean $z0;

        r0 := @this: okhttp3.internal.cache.FaultHidingSink;

        $z0 = r0.<okhttp3.internal.cache.FaultHidingSink: boolean hasErrors>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<okio.ForwardingSink: void close()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        r0.<okhttp3.internal.cache.FaultHidingSink: boolean hasErrors> = 1;

        virtualinvoke r0.<okhttp3.internal.cache.FaultHidingSink: void onException(java.io.IOException)>(r1);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    public void flush() throws java.io.IOException
    {
        okhttp3.internal.cache.FaultHidingSink r0;
        java.io.IOException r1;
        boolean $z0;

        r0 := @this: okhttp3.internal.cache.FaultHidingSink;

        $z0 = r0.<okhttp3.internal.cache.FaultHidingSink: boolean hasErrors>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<okio.ForwardingSink: void flush()>();

     label2:
        return;

     label3:
        r1 := @caughtexception;

        r0.<okhttp3.internal.cache.FaultHidingSink: boolean hasErrors> = 1;

        virtualinvoke r0.<okhttp3.internal.cache.FaultHidingSink: void onException(java.io.IOException)>(r1);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
    protected void onException(java.io.IOException)
    {
        okhttp3.internal.cache.FaultHidingSink r0;
        java.io.IOException $r1;

        r0 := @this: okhttp3.internal.cache.FaultHidingSink;

        $r1 := @parameter0: java.io.IOException;

        return;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okhttp3.internal.cache.FaultHidingSink r0;
        okio.Buffer $r1;
        long $l0;
        java.io.IOException r2;
        boolean $z0;

        r0 := @this: okhttp3.internal.cache.FaultHidingSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $z0 = r0.<okhttp3.internal.cache.FaultHidingSink: boolean hasErrors>;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<okio.Buffer: void skip(long)>($l0);

        return;

     label1:
        specialinvoke r0.<okio.ForwardingSink: void write(okio.Buffer,long)>($r1, $l0);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        r0.<okhttp3.internal.cache.FaultHidingSink: boolean hasErrors> = 1;

        virtualinvoke r0.<okhttp3.internal.cache.FaultHidingSink: void onException(java.io.IOException)>(r2);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
