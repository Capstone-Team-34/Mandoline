okhttp3.internal.http.RealInterceptorChain extends java.lang.Object implements okhttp3.Interceptor$Chain
private int calls
private final okhttp3.internal.connection.RealConnection connection
private final okhttp3.internal.http.HttpCodec httpCodec
private final int index
private final java.util.List interceptors
private final okhttp3.Request request
private final okhttp3.internal.connection.StreamAllocation streamAllocation
    public void <init>(java.util.List, okhttp3.internal.connection.StreamAllocation, okhttp3.internal.http.HttpCodec, okhttp3.internal.connection.RealConnection, int, okhttp3.Request)
    {
        okhttp3.internal.http.RealInterceptorChain r0;
        java.util.List r1;
        okhttp3.internal.connection.StreamAllocation $r2;
        okhttp3.internal.http.HttpCodec $r3;
        okhttp3.internal.connection.RealConnection $r4;
        int $i0;
        okhttp3.Request $r5;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        r1 := @parameter0: java.util.List;

        $r2 := @parameter1: okhttp3.internal.connection.StreamAllocation;

        $r3 := @parameter2: okhttp3.internal.http.HttpCodec;

        $r4 := @parameter3: okhttp3.internal.connection.RealConnection;

        $i0 := @parameter4: int;

        $r5 := @parameter5: okhttp3.Request;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors> = r1;

        r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.RealConnection connection> = $r4;

        r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.StreamAllocation streamAllocation> = $r2;

        r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpCodec> = $r3;

        r0.<okhttp3.internal.http.RealInterceptorChain: int index> = $i0;

        r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.Request request> = $r5;

        return;
    }
    public okhttp3.Connection connection()
    {
        okhttp3.internal.http.RealInterceptorChain r0;
        okhttp3.internal.connection.RealConnection r1;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        r1 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.RealConnection connection>;

        return r1;
    }
    public okhttp3.internal.http.HttpCodec httpStream()
    {
        okhttp3.internal.http.RealInterceptorChain r0;
        okhttp3.internal.http.HttpCodec r1;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        r1 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpCodec>;

        return r1;
    }
    public okhttp3.Response proceed(okhttp3.Request) throws java.io.IOException
    {
        okhttp3.internal.http.RealInterceptorChain r0;
        okhttp3.Request $r1;
        okhttp3.internal.http.HttpCodec $r2;
        okhttp3.internal.connection.RealConnection $r3;
        okhttp3.Response $r4;
        okhttp3.internal.connection.StreamAllocation $r5;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        $r1 := @parameter0: okhttp3.Request;

        $r5 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        $r2 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpCodec>;

        $r3 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.RealConnection connection>;

        $r4 = virtualinvoke r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.internal.connection.RealConnection)>($r1, $r5, $r2, $r3);

        return $r4;
    }
    public okhttp3.Response proceed(okhttp3.Request, okhttp3.internal.connection.StreamAllocation, okhttp3.internal.http.HttpCodec, okhttp3.internal.connection.RealConnection) throws java.io.IOException
    {
        okhttp3.internal.http.RealInterceptorChain r0, r5;
        okhttp3.Request $r1;
        okhttp3.internal.connection.StreamAllocation $r2;
        okhttp3.internal.http.HttpCodec $r3, $r8;
        okhttp3.internal.connection.RealConnection $r4, $r9;
        int $i0, $i1;
        java.util.List $r6;
        java.lang.AssertionError $r7;
        okhttp3.HttpUrl $r10;
        boolean $z0;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12;
        java.lang.Object $r13;
        java.lang.String $r14;
        okhttp3.Interceptor r15;
        okhttp3.Response $r16;
        java.lang.NullPointerException $r17;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        $r1 := @parameter0: okhttp3.Request;

        $r2 := @parameter1: okhttp3.internal.connection.StreamAllocation;

        $r3 := @parameter2: okhttp3.internal.http.HttpCodec;

        $r4 := @parameter3: okhttp3.internal.connection.RealConnection;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int index>;

        $r6 = r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 < $i1 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int calls>;

        $i0 = $i0 + 1;

        r0.<okhttp3.internal.http.RealInterceptorChain: int calls> = $i0;

        $r8 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpCodec>;

        if $r8 == null goto label2;

        $r9 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.RealConnection connection>;

        $r10 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $z0 = virtualinvoke $r9.<okhttp3.internal.connection.RealConnection: boolean supportsUrl(okhttp3.HttpUrl)>($r10);

        if $z0 != 0 goto label2;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network interceptor ");

        $r6 = r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors>;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int index>;

        $i0 = $i0 + -1;

        $r13 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must retain the same host and port");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        $r8 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpCodec>;

        if $r8 == null goto label3;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int calls>;

        if $i0 <= 1 goto label3;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network interceptor ");

        $r6 = r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors>;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int index>;

        $i0 = $i0 + -1;

        $r13 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i0);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must call proceed() exactly once");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label3:
        r5 = new okhttp3.internal.http.RealInterceptorChain;

        $r6 = r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors>;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int index>;

        $i0 = $i0 + 1;

        specialinvoke r5.<okhttp3.internal.http.RealInterceptorChain: void <init>(java.util.List,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.internal.connection.RealConnection,int,okhttp3.Request)>($r6, $r2, $r3, $r4, $i0, $r1);

        $r6 = r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors>;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int index>;

        $r13 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i0);

        r15 = (okhttp3.Interceptor) $r13;

        $r16 = interfaceinvoke r15.<okhttp3.Interceptor: okhttp3.Response intercept(okhttp3.Interceptor$Chain)>(r5);

        if $r3 == null goto label4;

        $i0 = r0.<okhttp3.internal.http.RealInterceptorChain: int index>;

        $i0 = $i0 + 1;

        $r6 = r0.<okhttp3.internal.http.RealInterceptorChain: java.util.List interceptors>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 >= $i1 goto label4;

        $i0 = r5.<okhttp3.internal.http.RealInterceptorChain: int calls>;

        if $i0 == 1 goto label4;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network interceptor ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must call proceed() exactly once");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label4:
        if $r16 != null goto label5;

        $r17 = new java.lang.NullPointerException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interceptor ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned null");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label5:
        return $r16;
    }
    public okhttp3.Request request()
    {
        okhttp3.internal.http.RealInterceptorChain r0;
        okhttp3.Request r1;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        r1 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.Request request>;

        return r1;
    }
    public okhttp3.internal.connection.StreamAllocation streamAllocation()
    {
        okhttp3.internal.http.RealInterceptorChain r0;
        okhttp3.internal.connection.StreamAllocation r1;

        r0 := @this: okhttp3.internal.http.RealInterceptorChain;

        r1 = r0.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        return r1;
    }
