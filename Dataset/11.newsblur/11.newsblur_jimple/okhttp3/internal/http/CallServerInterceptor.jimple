okhttp3.internal.http.CallServerInterceptor extends java.lang.Object implements okhttp3.Interceptor
private final boolean forWebSocket
    public void <init>(boolean)
    {
        okhttp3.internal.http.CallServerInterceptor r0;
        boolean $z0;

        r0 := @this: okhttp3.internal.http.CallServerInterceptor;

        $z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http.CallServerInterceptor: boolean forWebSocket> = $z0;

        return;
    }
    public okhttp3.Response intercept(okhttp3.Interceptor$Chain) throws java.io.IOException
    {
        okhttp3.internal.http.CallServerInterceptor r0;
        okhttp3.Interceptor$Chain $r1;
        okhttp3.internal.http.RealInterceptorChain r2;
        okhttp3.internal.http.HttpCodec $r3;
        okhttp3.internal.connection.StreamAllocation $r4;
        okhttp3.Connection $r5;
        okhttp3.internal.connection.RealConnection r6;
        okhttp3.Request $r7;
        long $l0, $l1;
        okhttp3.Response$Builder r8;
        java.lang.String $r9, $r11;
        boolean $z0;
        okhttp3.RequestBody $r10;
        okio.Sink $r12;
        okio.BufferedSink $r13;
        okhttp3.Handshake $r14;
        okhttp3.Response $r15;
        int $i2;
        okhttp3.ResponseBody $r16;
        byte $b3;
        java.net.ProtocolException $r17;
        java.lang.StringBuilder $r18;

        r0 := @this: okhttp3.internal.http.CallServerInterceptor;

        $r1 := @parameter0: okhttp3.Interceptor$Chain;

        r2 = (okhttp3.internal.http.RealInterceptorChain) $r1;

        $r3 = virtualinvoke r2.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.HttpCodec httpStream()>();

        $r4 = virtualinvoke r2.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.connection.StreamAllocation streamAllocation()>();

        $r5 = virtualinvoke r2.<okhttp3.internal.http.RealInterceptorChain: okhttp3.Connection connection()>();

        r6 = (okhttp3.internal.connection.RealConnection) $r5;

        $r7 = virtualinvoke r2.<okhttp3.internal.http.RealInterceptorChain: okhttp3.Request request()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: void writeRequestHeaders(okhttp3.Request)>($r7);

        r8 = null;

        $r9 = virtualinvoke $r7.<okhttp3.Request: java.lang.String method()>();

        $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r9);

        if $z0 == 0 goto label02;

        $r10 = virtualinvoke $r7.<okhttp3.Request: okhttp3.RequestBody body()>();

        if $r10 == null goto label02;

        $r9 = "100-continue";

        $r11 = virtualinvoke $r7.<okhttp3.Request: java.lang.String header(java.lang.String)>("Expect");

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z0 == 0 goto label01;

        interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: void flushRequest()>();

        r8 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okhttp3.Response$Builder readResponseHeaders(boolean)>(1);

     label01:
        if r8 != null goto label08;

        $r10 = virtualinvoke $r7.<okhttp3.Request: okhttp3.RequestBody body()>();

        $l1 = virtualinvoke $r10.<okhttp3.RequestBody: long contentLength()>();

        $r12 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okio.Sink createRequestBody(okhttp3.Request,long)>($r7, $l1);

        $r13 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r12);

        $r10 = virtualinvoke $r7.<okhttp3.Request: okhttp3.RequestBody body()>();

        virtualinvoke $r10.<okhttp3.RequestBody: void writeTo(okio.BufferedSink)>($r13);

        interfaceinvoke $r13.<okio.BufferedSink: void close()>();

     label02:
        interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: void finishRequest()>();

        if r8 != null goto label03;

        r8 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okhttp3.Response$Builder readResponseHeaders(boolean)>(0);

     label03:
        r8 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r7);

        r6 = virtualinvoke $r4.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        $r14 = virtualinvoke r6.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake()>();

        r8 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response$Builder handshake(okhttp3.Handshake)>($r14);

        r8 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response$Builder sentRequestAtMillis(long)>($l0);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r8 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response$Builder receivedResponseAtMillis(long)>($l0);

        $r15 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response build()>();

        $i2 = virtualinvoke $r15.<okhttp3.Response: int code()>();

        $z0 = r0.<okhttp3.internal.http.CallServerInterceptor: boolean forWebSocket>;

        if $z0 == 0 goto label09;

        if $i2 != 101 goto label09;

        r8 = virtualinvoke $r15.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r16 = <okhttp3.internal.Util: okhttp3.ResponseBody EMPTY_RESPONSE>;

        r8 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r16);

        $r15 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response build()>();

     label04:
        $r9 = "close";

        $r7 = virtualinvoke $r15.<okhttp3.Response: okhttp3.Request request()>();

        $r11 = virtualinvoke $r7.<okhttp3.Request: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z0 != 0 goto label05;

        $r9 = "close";

        $r11 = virtualinvoke $r15.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z0 == 0 goto label06;

     label05:
        virtualinvoke $r4.<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>();

     label06:
        if $i2 == 204 goto label07;

        if $i2 != 205 goto label10;

     label07:
        $r16 = virtualinvoke $r15.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $l0 = virtualinvoke $r16.<okhttp3.ResponseBody: long contentLength()>();

        $b3 = $l0 cmp 0L;

        if $b3 <= 0 goto label10;

        $r17 = new java.net.ProtocolException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HTTP ");

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" had non-zero Content-Length: ");

        $r16 = virtualinvoke $r15.<okhttp3.Response: okhttp3.ResponseBody body()>();

        $l0 = virtualinvoke $r16.<okhttp3.ResponseBody: long contentLength()>();

        $r18 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r9 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.net.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r17;

     label08:
        $z0 = virtualinvoke r6.<okhttp3.internal.connection.RealConnection: boolean isMultiplexed()>();

        if $z0 != 0 goto label02;

        virtualinvoke $r4.<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>();

        goto label02;

     label09:
        r8 = virtualinvoke $r15.<okhttp3.Response: okhttp3.Response$Builder newBuilder()>();

        $r16 = interfaceinvoke $r3.<okhttp3.internal.http.HttpCodec: okhttp3.ResponseBody openResponseBody(okhttp3.Response)>($r15);

        r8 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response$Builder body(okhttp3.ResponseBody)>($r16);

        $r15 = virtualinvoke r8.<okhttp3.Response$Builder: okhttp3.Response build()>();

        goto label04;

     label10:
        return $r15;
    }
