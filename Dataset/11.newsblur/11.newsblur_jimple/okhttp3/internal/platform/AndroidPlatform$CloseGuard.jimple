okhttp3.internal.platform.AndroidPlatform$CloseGuard extends java.lang.Object
private final java.lang.reflect.Method getMethod
private final java.lang.reflect.Method openMethod
private final java.lang.reflect.Method warnIfOpenMethod
    void <init>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method)
    {
        okhttp3.internal.platform.AndroidPlatform$CloseGuard r0;
        java.lang.reflect.Method $r1, $r2, $r3;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform$CloseGuard;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method getMethod> = $r1;

        r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method openMethod> = $r2;

        r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method warnIfOpenMethod> = $r3;

        return;
    }
    static okhttp3.internal.platform.AndroidPlatform$CloseGuard get()
    {
        java.lang.Exception r0;
        java.lang.Class $r1;
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r3, $r4, $r5;
        okhttp3.internal.platform.AndroidPlatform$CloseGuard $r6;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.CloseGuard");

        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("get", $r2);

     label2:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/lang/String;";

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("open", $r2);

     label3:
        $r2 = newarray (java.lang.Class)[0];

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("warnIfOpen", $r2);

     label4:
        $r6 = new okhttp3.internal.platform.AndroidPlatform$CloseGuard;

        specialinvoke $r6.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>($r3, $r4, $r5);

        return $r6;

     label5:
        r0 := @caughtexception;

        $r3 = null;

        $r4 = null;

        $r5 = null;

        goto label4;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }
    java.lang.Object createAndOpen(java.lang.String)
    {
        okhttp3.internal.platform.AndroidPlatform$CloseGuard r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.reflect.Method $r3;
        java.lang.Object[] $r4;
        java.lang.Exception $r5;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform$CloseGuard;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method getMethod>;

        if $r3 == null goto label4;

     label1:
        $r3 = r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method getMethod>;

        $r4 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r3 = r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method openMethod>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r4);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

     label4:
        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    boolean warnIfOpen(java.lang.Object)
    {
        okhttp3.internal.platform.AndroidPlatform$CloseGuard r0;
        java.lang.Object $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Exception $r4;

        r0 := @this: okhttp3.internal.platform.AndroidPlatform$CloseGuard;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label4;

     label1:
        $r2 = r0.<okhttp3.internal.platform.AndroidPlatform$CloseGuard: java.lang.reflect.Method warnIfOpenMethod>;

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r3);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

     label4:
        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }
