okhttp3.internal.platform.JdkWithJettyBootPlatform extends okhttp3.internal.platform.Platform
private final java.lang.Class clientProviderClass
private final java.lang.reflect.Method getMethod
private final java.lang.reflect.Method putMethod
private final java.lang.reflect.Method removeMethod
private final java.lang.Class serverProviderClass
    void <init>(java.lang.reflect.Method, java.lang.reflect.Method, java.lang.reflect.Method, java.lang.Class, java.lang.Class)
    {
        okhttp3.internal.platform.JdkWithJettyBootPlatform r0;
        java.lang.reflect.Method $r1, $r2, $r3;
        java.lang.Class r4, r5;

        r0 := @this: okhttp3.internal.platform.JdkWithJettyBootPlatform;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: java.lang.Class;

        r5 := @parameter4: java.lang.Class;

        specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>();

        r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.reflect.Method putMethod> = $r1;

        r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.reflect.Method getMethod> = $r2;

        r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.reflect.Method removeMethod> = $r3;

        r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.Class clientProviderClass> = r4;

        r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.Class serverProviderClass> = r5;

        return;
    }
    public static okhttp3.internal.platform.Platform buildIfSupported()
    {
        java.lang.Class $r0, $r3, $r4, $r5;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.Class[] $r6;
        java.lang.reflect.Method $r7, $r8, $r9;
        okhttp3.internal.platform.JdkWithJettyBootPlatform $r10;
        java.lang.ClassNotFoundException $r11;
        java.lang.NoSuchMethodException $r12;

     label01:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

     label02:
        $r1 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$Provider");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label04:
        $r1 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$ClientProvider");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label06:
        $r1 = new java.lang.StringBuilder;

     label07:
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.eclipse.jetty.alpn.ALPN");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$ServerProvider");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label08:
        $r6 = newarray (java.lang.Class)[2];

        $r6[0] = class "Ljavax/net/ssl/SSLSocket;";

        $r6[1] = $r3;

     label09:
        $r7 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("put", $r6);

     label10:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljavax/net/ssl/SSLSocket;";

     label11:
        $r8 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("get", $r6);

     label12:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljavax/net/ssl/SSLSocket;";

     label13:
        $r9 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("remove", $r6);

     label14:
        $r10 = new okhttp3.internal.platform.JdkWithJettyBootPlatform;

     label15:
        specialinvoke $r10.<okhttp3.internal.platform.JdkWithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)>($r7, $r8, $r9, $r4, $r5);

     label16:
        return $r10;

     label17:
        $r11 := @caughtexception;

     label18:
        return null;

     label19:
        $r12 := @caughtexception;

        goto label18;

        catch java.lang.ClassNotFoundException from label01 to label02 with label17;
        catch java.lang.ClassNotFoundException from label03 to label04 with label17;
        catch java.lang.ClassNotFoundException from label05 to label06 with label17;
        catch java.lang.ClassNotFoundException from label07 to label08 with label17;
        catch java.lang.ClassNotFoundException from label09 to label10 with label17;
        catch java.lang.ClassNotFoundException from label11 to label12 with label17;
        catch java.lang.ClassNotFoundException from label13 to label14 with label17;
        catch java.lang.ClassNotFoundException from label15 to label16 with label17;
        catch java.lang.NoSuchMethodException from label01 to label02 with label19;
        catch java.lang.NoSuchMethodException from label03 to label04 with label19;
        catch java.lang.NoSuchMethodException from label05 to label06 with label19;
        catch java.lang.NoSuchMethodException from label07 to label08 with label19;
        catch java.lang.NoSuchMethodException from label09 to label10 with label19;
        catch java.lang.NoSuchMethodException from label11 to label12 with label19;
        catch java.lang.NoSuchMethodException from label13 to label14 with label19;
        catch java.lang.NoSuchMethodException from label15 to label16 with label19;
    }
    public void afterHandshake(javax.net.ssl.SSLSocket)
    {
        okhttp3.internal.platform.JdkWithJettyBootPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.IllegalAccessException r4;
        java.lang.AssertionError $r5;
        java.lang.reflect.InvocationTargetException r6;

        r0 := @this: okhttp3.internal.platform.JdkWithJettyBootPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.reflect.Method removeMethod>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

     label1:
        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        return;

     label3:
        r4 := @caughtexception;

     label4:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label5:
        r6 := @caughtexception;

        goto label4;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }
    public void configureTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String, java.util.List)
    {
        okhttp3.internal.platform.JdkWithJettyBootPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        java.util.List r3;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        java.lang.Class[] $r6;
        okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider $r7;
        java.lang.Object $r8;
        java.lang.reflect.Method $r9;
        java.lang.Object[] $r10;
        java.lang.ReflectiveOperationException r11;
        java.lang.AssertionError $r12;

        r0 := @this: okhttp3.internal.platform.JdkWithJettyBootPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r3 = staticinvoke <okhttp3.internal.platform.JdkWithJettyBootPlatform: java.util.List alpnProtocolNames(java.util.List)>(r3);

        $r4 = class "Lokhttp3/internal/platform/Platform;";

     label1:
        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        $r6 = newarray (java.lang.Class)[2];

        $r4 = r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.Class clientProviderClass>;

        $r6[0] = $r4;

        $r4 = r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.Class serverProviderClass>;

        $r6[1] = $r4;

        $r7 = new okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider;

     label3:
        specialinvoke $r7.<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: void <init>(java.util.List)>(r3);

        $r8 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r5, $r6, $r7);

     label4:
        $r9 = r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.reflect.Method putMethod>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r1;

        $r10[1] = $r8;

     label5:
        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r10);

     label6:
        return;

     label7:
        r11 := @caughtexception;

     label8:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r11);

        throw $r12;

     label9:
        r11 := @caughtexception;

        goto label8;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label9;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label9;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label9;
        catch java.lang.IllegalAccessException from label1 to label2 with label7;
        catch java.lang.IllegalAccessException from label3 to label4 with label7;
        catch java.lang.IllegalAccessException from label5 to label6 with label7;
    }
    public java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        okhttp3.internal.platform.JdkWithJettyBootPlatform r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.reflect.InvocationHandler $r5;
        okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider r6;
        boolean $z0;
        java.lang.String $r7;
        okhttp3.internal.platform.Platform $r8;
        java.lang.IllegalAccessException r9;
        java.lang.AssertionError $r10;
        java.lang.reflect.InvocationTargetException r11;

        r0 := @this: okhttp3.internal.platform.JdkWithJettyBootPlatform;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = r0.<okhttp3.internal.platform.JdkWithJettyBootPlatform: java.lang.reflect.Method getMethod>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

     label1:
        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>($r4);

     label2:
        r6 = (okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider) $r5;

        $z0 = r6.<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: boolean unsupported>;

        if $z0 != 0 goto label5;

        $r7 = r6.<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: java.lang.String selected>;

        if $r7 != null goto label5;

     label3:
        $r8 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        virtualinvoke $r8.<okhttp3.internal.platform.Platform: void log(int,java.lang.String,java.lang.Throwable)>(4, "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?", null);

     label4:
        return null;

     label5:
        $z0 = r6.<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: boolean unsupported>;

        if $z0 != 0 goto label9;

        $r7 = r6.<okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider: java.lang.String selected>;

        return $r7;

     label6:
        r9 := @caughtexception;

     label7:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label8:
        r11 := @caughtexception;

        goto label7;

     label9:
        return null;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label8;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label8;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
    }
