okhttp3.internal.connection.RealConnection extends okhttp3.internal.http2.Http2Connection$Listener implements okhttp3.Connection
private static final java.lang.String NPE_THROW_WITH_NULL
public int allocationLimit
public final java.util.List allocations
private final okhttp3.ConnectionPool connectionPool
private okhttp3.Handshake handshake
private okhttp3.internal.http2.Http2Connection http2Connection
public long idleAtNanos
public boolean noNewStreams
private okhttp3.Protocol protocol
private java.net.Socket rawSocket
private final okhttp3.Route route
private okio.BufferedSink sink
private java.net.Socket socket
private okio.BufferedSource source
public int successCount
    public void <init>(okhttp3.ConnectionPool, okhttp3.Route)
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.ConnectionPool $r1;
        okhttp3.Route $r2;
        java.util.ArrayList $r3;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.ConnectionPool;

        $r2 := @parameter1: okhttp3.Route;

        specialinvoke r0.<okhttp3.internal.http2.Http2Connection$Listener: void <init>()>();

        r0.<okhttp3.internal.connection.RealConnection: int allocationLimit> = 1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.internal.connection.RealConnection: java.util.List allocations> = $r3;

        r0.<okhttp3.internal.connection.RealConnection: long idleAtNanos> = 9223372036854775807L;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.ConnectionPool connectionPool> = $r1;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route> = $r2;

        return;
    }
    private void connectSocket(int, int) throws java.io.IOException
    {
        okhttp3.internal.connection.RealConnection r0;
        int $i0, $i1;
        java.net.ConnectException r1, r2;
        java.lang.NullPointerException r3;
        okhttp3.Route $r4;
        java.net.Proxy $r5;
        okhttp3.Address $r6;
        java.net.Proxy$Type $r7, $r8;
        javax.net.SocketFactory $r9;
        java.net.Socket $r10;
        okhttp3.internal.platform.Platform $r11;
        java.net.InetSocketAddress $r12;
        okio.Source $r13;
        okio.BufferedSource $r14;
        okio.Sink $r15;
        okio.BufferedSink $r16;
        java.lang.StringBuilder $r17;
        java.lang.String $r18, $r19;
        boolean $z0;
        java.io.IOException $r20;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>();

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r6 = virtualinvoke $r4.<okhttp3.Route: okhttp3.Address address()>();

        $r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r8 = <java.net.Proxy$Type: java.net.Proxy$Type DIRECT>;

        if $r7 == $r8 goto label01;

        $r7 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r8 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r7 != $r8 goto label08;

     label01:
        $r9 = virtualinvoke $r6.<okhttp3.Address: javax.net.SocketFactory socketFactory()>();

        $r10 = virtualinvoke $r9.<javax.net.SocketFactory: java.net.Socket createSocket()>();

     label02:
        r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket> = $r10;

        $r10 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        virtualinvoke $r10.<java.net.Socket: void setSoTimeout(int)>($i1);

     label03:
        $r11 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

     label04:
        $r10 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

     label05:
        $r12 = virtualinvoke $r4.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>();

        virtualinvoke $r11.<okhttp3.internal.platform.Platform: void connectSocket(java.net.Socket,java.net.InetSocketAddress,int)>($r10, $r12, $i0);

     label06:
        $r10 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        $r13 = staticinvoke <okio.Okio: okio.Source source(java.net.Socket)>($r10);

        $r14 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r13);

        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source> = $r14;

        $r10 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        $r15 = staticinvoke <okio.Okio: okio.Sink sink(java.net.Socket)>($r10);

        $r16 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r15);

        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink> = $r16;

     label07:
        return;

     label08:
        $r10 = new java.net.Socket;

        specialinvoke $r10.<java.net.Socket: void <init>(java.net.Proxy)>($r5);

        goto label02;

     label09:
        r2 := @caughtexception;

        r1 = new java.net.ConnectException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to connect to ");

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r12 = virtualinvoke $r4.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.net.ConnectException: void <init>(java.lang.String)>($r18);

        virtualinvoke r1.<java.net.ConnectException: java.lang.Throwable initCause(java.lang.Throwable)>(r2);

        throw r1;

     label10:
        r3 := @caughtexception;

        $r18 = "throw with null exception";

        $r19 = virtualinvoke r3.<java.lang.NullPointerException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z0 == 0 goto label11;

        $r20 = new java.io.IOException;

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.Throwable)>(r3);

        throw $r20;

     label11:
        return;

        catch java.net.ConnectException from label03 to label04 with label09;
        catch java.net.ConnectException from label05 to label06 with label09;
        catch java.lang.NullPointerException from label06 to label07 with label10;
    }
    private void connectTls(okhttp3.internal.connection.ConnectionSpecSelector) throws java.io.IOException
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.internal.connection.ConnectionSpecSelector $r1;
        java.lang.AssertionError r2;
        okhttp3.Route $r3;
        okhttp3.Address $r4;
        javax.net.ssl.SSLSocketFactory $r5;
        javax.net.ssl.SSLSocket r6, $r10;
        java.net.Socket $r7;
        okhttp3.HttpUrl $r8;
        java.lang.String $r9;
        int $i0;
        okhttp3.ConnectionSpec $r11;
        boolean $z0;
        okhttp3.internal.platform.Platform $r12;
        java.util.List $r13;
        javax.net.ssl.SSLSession $r14;
        okhttp3.Handshake $r15;
        javax.net.ssl.HostnameVerifier $r16;
        java.lang.Object $r17;
        java.security.cert.X509Certificate r18;
        javax.net.ssl.SSLPeerUnverifiedException $r19;
        java.lang.StringBuilder $r20;
        java.security.Principal $r21;
        java.io.IOException $r22;
        java.lang.Throwable $r23;
        okhttp3.CertificatePinner $r24;
        okio.Source $r25;
        okio.BufferedSource $r26;
        okio.Sink $r27;
        okio.BufferedSink $r28;
        okhttp3.Protocol $r29;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.internal.connection.ConnectionSpecSelector;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r4 = virtualinvoke $r3.<okhttp3.Route: okhttp3.Address address()>();

        $r5 = virtualinvoke $r4.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>();

        r6 = null;

     label01:
        $r7 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

     label02:
        $r8 = virtualinvoke $r4.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r8 = virtualinvoke $r4.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $i0 = virtualinvoke $r8.<okhttp3.HttpUrl: int port()>();

        $r7 = virtualinvoke $r5.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r7, $r9, $i0, 1);

     label03:
        $r10 = (javax.net.ssl.SSLSocket) $r7;

     label04:
        r6 = $r10;

     label05:
        $r11 = virtualinvoke $r1.<okhttp3.internal.connection.ConnectionSpecSelector: okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket)>($r10);

        $z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>();

     label06:
        if $z0 == 0 goto label08;

     label07:
        $r12 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r8 = virtualinvoke $r4.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r13 = virtualinvoke $r4.<okhttp3.Address: java.util.List protocols()>();

        virtualinvoke $r12.<okhttp3.internal.platform.Platform: void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List)>($r10, $r9, $r13);

     label08:
        virtualinvoke $r10.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r14 = virtualinvoke $r10.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r15 = staticinvoke <okhttp3.Handshake: okhttp3.Handshake get(javax.net.ssl.SSLSession)>($r14);

        $r16 = virtualinvoke $r4.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>();

        $r8 = virtualinvoke $r4.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r14 = virtualinvoke $r10.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $z0 = interfaceinvoke $r16.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>($r9, $r14);

     label09:
        if $z0 != 0 goto label20;

     label10:
        $r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>();

        $r17 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

     label11:
        r18 = (java.security.cert.X509Certificate) $r17;

     label12:
        $r19 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hostname ");

        $r8 = virtualinvoke $r4.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not verified:\n    certificate: ");

        $r9 = staticinvoke <okhttp3.CertificatePinner: java.lang.String pin(java.security.cert.Certificate)>(r18);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    DN: ");

        $r21 = virtualinvoke r18.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        $r9 = interfaceinvoke $r21.<java.security.Principal: java.lang.String getName()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    subjectAltNames: ");

        $r13 = staticinvoke <okhttp3.internal.tls.OkHostnameVerifier: java.util.List allSubjectAltNames(java.security.cert.X509Certificate)>(r18);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r9 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r9);

     label13:
        throw $r19;

     label14:
        r2 := @caughtexception;

     label15:
        $z0 = staticinvoke <okhttp3.internal.Util: boolean isAndroidGetsocknameError(java.lang.AssertionError)>(r2);

     label16:
        if $z0 == 0 goto label36;

     label17:
        $r22 = new java.io.IOException;

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.Throwable)>(r2);

        throw $r22;

     label18:
        $r23 := @caughtexception;

        if r6 == null goto label19;

        $r12 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        virtualinvoke $r12.<okhttp3.internal.platform.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>(r6);

     label19:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>(r6);

        throw $r23;

     label20:
        $r24 = virtualinvoke $r4.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>();

        $r8 = virtualinvoke $r4.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r13 = virtualinvoke $r15.<okhttp3.Handshake: java.util.List peerCertificates()>();

        virtualinvoke $r24.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r9, $r13);

        $z0 = virtualinvoke $r11.<okhttp3.ConnectionSpec: boolean supportsTlsExtensions()>();

     label21:
        if $z0 == 0 goto label33;

     label22:
        $r12 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $r9 = virtualinvoke $r12.<okhttp3.internal.platform.Platform: java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket)>($r10);

     label23:
        r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket> = $r10;

        $r7 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

     label24:
        $r25 = staticinvoke <okio.Okio: okio.Source source(java.net.Socket)>($r7);

        $r26 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r25);

     label25:
        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source> = $r26;

        $r7 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

     label26:
        $r27 = staticinvoke <okio.Okio: okio.Sink sink(java.net.Socket)>($r7);

        $r28 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r27);

     label27:
        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink> = $r28;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake> = $r15;

     label28:
        if $r9 == null goto label34;

     label29:
        $r29 = staticinvoke <okhttp3.Protocol: okhttp3.Protocol get(java.lang.String)>($r9);

     label30:
        r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol> = $r29;

     label31:
        if $r10 == null goto label32;

        $r12 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        virtualinvoke $r12.<okhttp3.internal.platform.Platform: void afterHandshake(javax.net.ssl.SSLSocket)>($r10);

     label32:
        goto label37;

     label33:
        $r9 = null;

        goto label23;

     label34:
        $r29 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

     label35:
        goto label30;

     label36:
        throw r2;

     label37:
        return;

        catch java.lang.AssertionError from label02 to label03 with label14;
        catch java.lang.AssertionError from label05 to label06 with label14;
        catch java.lang.AssertionError from label07 to label09 with label14;
        catch java.lang.AssertionError from label10 to label11 with label14;
        catch java.lang.AssertionError from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label09 with label18;
        catch java.lang.Throwable from label10 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.AssertionError from label20 to label21 with label14;
        catch java.lang.AssertionError from label22 to label23 with label14;
        catch java.lang.AssertionError from label24 to label25 with label14;
        catch java.lang.AssertionError from label26 to label27 with label14;
        catch java.lang.AssertionError from label29 to label30 with label14;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch java.lang.Throwable from label22 to label23 with label18;
        catch java.lang.Throwable from label23 to label28 with label18;
        catch java.lang.Throwable from label29 to label30 with label18;
        catch java.lang.Throwable from label30 to label31 with label18;
        catch java.lang.AssertionError from label34 to label35 with label14;
        catch java.lang.Throwable from label34 to label35 with label18;
        catch java.lang.Throwable from label36 to label37 with label18;
    }
    private void connectTunnel(int, int, int) throws java.io.IOException
    {
        okhttp3.internal.connection.RealConnection r0;
        int $i0, $i1, $i2, i3;
        okhttp3.Request $r1, r2;
        okhttp3.HttpUrl $r3;
        java.net.ProtocolException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.net.Socket $r7;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = specialinvoke r0.<okhttp3.internal.connection.RealConnection: okhttp3.Request createTunnelRequest()>();

        r2 = $r1;

        $r3 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>();

        i3 = 0;

     label1:
        i3 = i3 + 1;

        if i3 <= 21 goto label2;

        $r4 = new java.net.ProtocolException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many tunnel connections attempted: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(21);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        specialinvoke r0.<okhttp3.internal.connection.RealConnection: void connectSocket(int,int)>($i0, $i1);

        $r1 = specialinvoke r0.<okhttp3.internal.connection.RealConnection: okhttp3.Request createTunnel(int,int,okhttp3.Request,okhttp3.HttpUrl)>($i1, $i2, r2, $r3);

        r2 = $r1;

        if $r1 != null goto label3;

        return;

     label3:
        $r7 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r7);

        r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket> = null;

        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink> = null;

        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source> = null;

        goto label1;
    }
    private okhttp3.Request createTunnel(int, int, okhttp3.Request, okhttp3.HttpUrl) throws java.io.IOException
    {
        okhttp3.internal.connection.RealConnection r0;
        int $i0, $i1, $i5;
        okhttp3.HttpUrl $r1;
        okhttp3.internal.http1.Http1Codec r2;
        okhttp3.Request $r3, $r19;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r20, $r21;
        okio.BufferedSource $r6;
        okio.BufferedSink $r7;
        okio.Timeout $r8;
        long $l2, l3;
        java.util.concurrent.TimeUnit $r9;
        okhttp3.Headers $r10;
        okhttp3.Response$Builder $r11;
        okhttp3.Response $r12;
        byte $b4;
        okio.Source $r13;
        java.io.IOException $r14;
        okio.Buffer $r15;
        boolean $z0;
        okhttp3.Route $r16;
        okhttp3.Address $r17;
        okhttp3.Authenticator $r18;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r3 := @parameter2: okhttp3.Request;

        $r1 := @parameter3: okhttp3.HttpUrl;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CONNECT ");

        $r5 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r1, 1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HTTP/1.1");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r2 = new okhttp3.internal.http1.Http1Codec;

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r7 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        specialinvoke r2.<okhttp3.internal.http1.Http1Codec: void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>(null, null, $r6, $r7);

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r8 = interfaceinvoke $r6.<okio.BufferedSource: okio.Timeout timeout()>();

        $l2 = (long) $i0;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r8.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l2, $r9);

        $r7 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        $r8 = interfaceinvoke $r7.<okio.BufferedSink: okio.Timeout timeout()>();

        $l2 = (long) $i1;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r8.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l2, $r9);

        $r10 = virtualinvoke $r3.<okhttp3.Request: okhttp3.Headers headers()>();

        virtualinvoke r2.<okhttp3.internal.http1.Http1Codec: void writeRequest(okhttp3.Headers,java.lang.String)>($r10, $r5);

        virtualinvoke r2.<okhttp3.internal.http1.Http1Codec: void finishRequest()>();

        $r11 = virtualinvoke r2.<okhttp3.internal.http1.Http1Codec: okhttp3.Response$Builder readResponseHeaders(boolean)>(0);

        $r11 = virtualinvoke $r11.<okhttp3.Response$Builder: okhttp3.Response$Builder request(okhttp3.Request)>($r3);

        $r12 = virtualinvoke $r11.<okhttp3.Response$Builder: okhttp3.Response build()>();

        $l2 = staticinvoke <okhttp3.internal.http.HttpHeaders: long contentLength(okhttp3.Response)>($r12);

        l3 = $l2;

        $b4 = $l2 cmp -1L;

        if $b4 != 0 goto label2;

        l3 = 0L;

     label2:
        $r13 = virtualinvoke r2.<okhttp3.internal.http1.Http1Codec: okio.Source newFixedLengthSource(long)>(l3);

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        staticinvoke <okhttp3.internal.Util: boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit)>($r13, 2147483647, $r9);

        interfaceinvoke $r13.<okio.Source: void close()>();

        $i5 = virtualinvoke $r12.<okhttp3.Response: int code()>();

        lookupswitch($i5)
        {
            case 200: goto label4;
            case 407: goto label6;
            default: goto label3;
        };

     label3:
        $r14 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected response code for CONNECT: ");

        $i0 = virtualinvoke $r12.<okhttp3.Response: int code()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r14;

     label4:
        $r6 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r15 = interfaceinvoke $r6.<okio.BufferedSource: okio.Buffer buffer()>();

        $z0 = virtualinvoke $r15.<okio.Buffer: boolean exhausted()>();

        if $z0 == 0 goto label5;

        $r7 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        $r15 = interfaceinvoke $r7.<okio.BufferedSink: okio.Buffer buffer()>();

        $z0 = virtualinvoke $r15.<okio.Buffer: boolean exhausted()>();

        if $z0 != 0 goto label8;

     label5:
        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("TLS tunnel buffered too many bytes!");

        throw $r14;

     label6:
        $r16 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r17 = virtualinvoke $r16.<okhttp3.Route: okhttp3.Address address()>();

        $r18 = virtualinvoke $r17.<okhttp3.Address: okhttp3.Authenticator proxyAuthenticator()>();

        $r16 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r19 = interfaceinvoke $r18.<okhttp3.Authenticator: okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response)>($r16, $r12);

        $r3 = $r19;

        if $r19 != null goto label7;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Failed to authenticate with proxy");

        throw $r14;

     label7:
        $r20 = "close";

        $r21 = virtualinvoke $r12.<okhttp3.Response: java.lang.String header(java.lang.String)>("Connection");

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r21);

        if $z0 == 0 goto label1;

        return $r19;

     label8:
        return null;
    }
    private okhttp3.Request createTunnelRequest()
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.Request$Builder $r1;
        okhttp3.Route $r2;
        okhttp3.Address $r3;
        okhttp3.HttpUrl $r4;
        java.lang.String $r5;
        okhttp3.Request $r6;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 = new okhttp3.Request$Builder;

        specialinvoke $r1.<okhttp3.Request$Builder: void <init>()>();

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r3 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r4 = virtualinvoke $r3.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r1 = virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4);

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r3 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r4 = virtualinvoke $r3.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r5 = staticinvoke <okhttp3.internal.Util: java.lang.String hostHeader(okhttp3.HttpUrl,boolean)>($r4, 1);

        $r1 = virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Host", $r5);

        $r1 = virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("Proxy-Connection", "Keep-Alive");

        $r5 = staticinvoke <okhttp3.internal.Version: java.lang.String userAgent()>();

        $r1 = virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request$Builder header(java.lang.String,java.lang.String)>("User-Agent", $r5);

        $r6 = virtualinvoke $r1.<okhttp3.Request$Builder: okhttp3.Request build()>();

        return $r6;
    }
    private void establishProtocol(okhttp3.internal.connection.ConnectionSpecSelector) throws java.io.IOException
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.internal.connection.ConnectionSpecSelector $r1;
        okio.BufferedSource $r2;
        okio.BufferedSink $r3;
        okhttp3.Route $r4;
        okhttp3.Address $r5;
        javax.net.ssl.SSLSocketFactory $r6;
        okhttp3.Protocol $r7, $r9;
        java.net.Socket $r8;
        okhttp3.internal.http2.Http2Connection$Builder $r10;
        okhttp3.HttpUrl $r11;
        java.lang.String $r12;
        okhttp3.internal.http2.Http2Connection $r13;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.internal.connection.ConnectionSpecSelector;

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r5 = virtualinvoke $r4.<okhttp3.Route: okhttp3.Address address()>();

        $r6 = virtualinvoke $r5.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>();

        if $r6 != null goto label1;

        $r7 = <okhttp3.Protocol: okhttp3.Protocol HTTP_1_1>;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol> = $r7;

        $r8 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket> = $r8;

        return;

     label1:
        specialinvoke r0.<okhttp3.internal.connection.RealConnection: void connectTls(okhttp3.internal.connection.ConnectionSpecSelector)>($r1);

        $r7 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol>;

        $r9 = <okhttp3.Protocol: okhttp3.Protocol HTTP_2>;

        if $r7 != $r9 goto label2;

        $r8 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        virtualinvoke $r8.<java.net.Socket: void setSoTimeout(int)>(0);

        $r10 = new okhttp3.internal.http2.Http2Connection$Builder;

        specialinvoke $r10.<okhttp3.internal.http2.Http2Connection$Builder: void <init>(boolean)>(1);

        $r8 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r5 = virtualinvoke $r4.<okhttp3.Route: okhttp3.Address address()>();

        $r11 = virtualinvoke $r5.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r12 = virtualinvoke $r11.<okhttp3.HttpUrl: java.lang.String host()>();

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        $r10 = virtualinvoke $r10.<okhttp3.internal.http2.Http2Connection$Builder: okhttp3.internal.http2.Http2Connection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink)>($r8, $r12, $r2, $r3);

        $r10 = virtualinvoke $r10.<okhttp3.internal.http2.Http2Connection$Builder: okhttp3.internal.http2.Http2Connection$Builder listener(okhttp3.internal.http2.Http2Connection$Listener)>(r0);

        $r13 = virtualinvoke $r10.<okhttp3.internal.http2.Http2Connection$Builder: okhttp3.internal.http2.Http2Connection build()>();

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection> = $r13;

        $r13 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        virtualinvoke $r13.<okhttp3.internal.http2.Http2Connection: void start()>();

     label2:
        return;
    }
    public static okhttp3.internal.connection.RealConnection testConnection(okhttp3.ConnectionPool, okhttp3.Route, java.net.Socket, long)
    {
        okhttp3.ConnectionPool $r0;
        okhttp3.Route $r1;
        java.net.Socket $r2;
        long $l0;
        okhttp3.internal.connection.RealConnection r3;

        $r0 := @parameter0: okhttp3.ConnectionPool;

        $r1 := @parameter1: okhttp3.Route;

        $r2 := @parameter2: java.net.Socket;

        $l0 := @parameter3: long;

        r3 = new okhttp3.internal.connection.RealConnection;

        specialinvoke r3.<okhttp3.internal.connection.RealConnection: void <init>(okhttp3.ConnectionPool,okhttp3.Route)>($r0, $r1);

        r3.<okhttp3.internal.connection.RealConnection: java.net.Socket socket> = $r2;

        r3.<okhttp3.internal.connection.RealConnection: long idleAtNanos> = $l0;

        return r3;
    }
    public void cancel()
    {
        okhttp3.internal.connection.RealConnection r0;
        java.net.Socket $r1;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r1);

        return;
    }
    public void connect(int, int, int, boolean)
    {
        okhttp3.internal.connection.RealConnection r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        okhttp3.internal.connection.ConnectionSpecSelector r1;
        java.io.IOException r2;
        okhttp3.Protocol $r3;
        java.lang.IllegalStateException $r4;
        okhttp3.internal.connection.RouteException r5;
        okhttp3.Route $r6;
        okhttp3.Address $r7;
        java.util.List $r8;
        javax.net.ssl.SSLSocketFactory $r9;
        okhttp3.ConnectionSpec $r10;
        java.net.UnknownServiceException $r11;
        okhttp3.HttpUrl $r12;
        java.lang.String $r13;
        okhttp3.internal.platform.Platform $r14;
        java.lang.StringBuilder $r15;
        okhttp3.internal.http2.Http2Connection $r16;
        okhttp3.ConnectionPool $r17;
        java.net.Socket $r18;
        java.lang.Throwable $r19;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol>;

        if $r3 == null goto label01;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already connected");

        throw $r4;

     label01:
        r5 = null;

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r7 = virtualinvoke $r6.<okhttp3.Route: okhttp3.Address address()>();

        $r8 = virtualinvoke $r7.<okhttp3.Address: java.util.List connectionSpecs()>();

        r1 = new okhttp3.internal.connection.ConnectionSpecSelector;

        specialinvoke r1.<okhttp3.internal.connection.ConnectionSpecSelector: void <init>(java.util.List)>($r8);

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r7 = virtualinvoke $r6.<okhttp3.Route: okhttp3.Address address()>();

        $r9 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.SSLSocketFactory sslSocketFactory()>();

        if $r9 != null goto label03;

        $r10 = <okhttp3.ConnectionSpec: okhttp3.ConnectionSpec CLEARTEXT>;

        $z1 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>($r10);

        if $z1 != 0 goto label02;

        r5 = new okhttp3.internal.connection.RouteException;

        $r11 = new java.net.UnknownServiceException;

        specialinvoke $r11.<java.net.UnknownServiceException: void <init>(java.lang.String)>("CLEARTEXT communication not enabled for client");

        specialinvoke r5.<okhttp3.internal.connection.RouteException: void <init>(java.io.IOException)>($r11);

        throw r5;

     label02:
        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r7 = virtualinvoke $r6.<okhttp3.Route: okhttp3.Address address()>();

        $r12 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r13 = virtualinvoke $r12.<okhttp3.HttpUrl: java.lang.String host()>();

        $r14 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        $z1 = virtualinvoke $r14.<okhttp3.internal.platform.Platform: boolean isCleartextTrafficPermitted(java.lang.String)>($r13);

        if $z1 != 0 goto label03;

        r5 = new okhttp3.internal.connection.RouteException;

        $r11 = new java.net.UnknownServiceException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEARTEXT communication to ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not permitted by network security policy");

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.net.UnknownServiceException: void <init>(java.lang.String)>($r13);

        specialinvoke r5.<okhttp3.internal.connection.RouteException: void <init>(java.io.IOException)>($r11);

        throw r5;

     label03:
        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

     label04:
        $z1 = virtualinvoke $r6.<okhttp3.Route: boolean requiresTunnel()>();

     label05:
        if $z1 == 0 goto label11;

     label06:
        specialinvoke r0.<okhttp3.internal.connection.RealConnection: void connectTunnel(int,int,int)>($i0, $i1, $i2);

     label07:
        specialinvoke r0.<okhttp3.internal.connection.RealConnection: void establishProtocol(okhttp3.internal.connection.ConnectionSpecSelector)>(r1);

     label08:
        $r16 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        if $r16 == null goto label20;

        $r17 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r17;

     label09:
        $r16 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        $i0 = virtualinvoke $r16.<okhttp3.internal.http2.Http2Connection: int maxConcurrentStreams()>();

        r0.<okhttp3.internal.connection.RealConnection: int allocationLimit> = $i0;

        exitmonitor $r17;

     label10:
        return;

     label11:
        specialinvoke r0.<okhttp3.internal.connection.RealConnection: void connectSocket(int,int)>($i0, $i1);

     label12:
        goto label07;

     label13:
        r2 := @caughtexception;

        $r18 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r18);

        $r18 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket>;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r18);

        r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket> = null;

        r0.<okhttp3.internal.connection.RealConnection: java.net.Socket rawSocket> = null;

        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source> = null;

        r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink> = null;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake> = null;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol> = null;

        r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection> = null;

        if r5 != null goto label16;

        r5 = new okhttp3.internal.connection.RouteException;

        specialinvoke r5.<okhttp3.internal.connection.RouteException: void <init>(java.io.IOException)>(r2);

     label14:
        if $z0 == 0 goto label15;

        $z1 = virtualinvoke r1.<okhttp3.internal.connection.ConnectionSpecSelector: boolean connectionFailed(java.io.IOException)>(r2);

        if $z1 != 0 goto label03;

     label15:
        throw r5;

     label16:
        virtualinvoke r5.<okhttp3.internal.connection.RouteException: void addConnectException(java.io.IOException)>(r2);

        goto label14;

     label17:
        $r19 := @caughtexception;

     label18:
        exitmonitor $r17;

     label19:
        throw $r19;

     label20:
        return;

        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label06 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label18 to label19 with label17;
    }
    public okhttp3.Handshake handshake()
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.Handshake r1;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        r1 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake>;

        return r1;
    }
    public boolean isEligible(okhttp3.Address, okhttp3.Route)
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.Address $r1, $r7;
        okhttp3.Route $r2, $r6;
        javax.net.ssl.SSLPeerUnverifiedException r3;
        java.util.List $r4;
        int $i0, $i1;
        boolean $z0;
        okhttp3.internal.Internal $r5;
        okhttp3.HttpUrl $r8;
        java.lang.String $r9, $r10;
        okhttp3.internal.http2.Http2Connection $r11;
        java.net.Proxy $r12;
        java.net.Proxy$Type $r13, $r14;
        java.net.InetSocketAddress $r15, $r16;
        javax.net.ssl.HostnameVerifier $r17;
        okhttp3.internal.tls.OkHostnameVerifier $r18;
        okhttp3.CertificatePinner $r19;
        okhttp3.Handshake $r20;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.Address;

        $r2 := @parameter1: okhttp3.Route;

        $r4 = r0.<okhttp3.internal.connection.RealConnection: java.util.List allocations>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = r0.<okhttp3.internal.connection.RealConnection: int allocationLimit>;

        if $i0 >= $i1 goto label6;

        $z0 = r0.<okhttp3.internal.connection.RealConnection: boolean noNewStreams>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r5 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r7 = virtualinvoke $r6.<okhttp3.Route: okhttp3.Address address()>();

        $z0 = virtualinvoke $r5.<okhttp3.internal.Internal: boolean equalsNonHost(okhttp3.Address,okhttp3.Address)>($r7, $r1);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r6 = virtualinvoke r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route()>();

        $r7 = virtualinvoke $r6.<okhttp3.Route: okhttp3.Address address()>();

        $r8 = virtualinvoke $r7.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r10 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r11 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        if $r11 == null goto label6;

        if $r2 == null goto label6;

        $r12 = virtualinvoke $r2.<okhttp3.Route: java.net.Proxy proxy()>();

        $r13 = virtualinvoke $r12.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r14 = <java.net.Proxy$Type: java.net.Proxy$Type DIRECT>;

        if $r13 != $r14 goto label6;

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r12 = virtualinvoke $r6.<okhttp3.Route: java.net.Proxy proxy()>();

        $r13 = virtualinvoke $r12.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r14 = <java.net.Proxy$Type: java.net.Proxy$Type DIRECT>;

        if $r13 != $r14 goto label6;

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r15 = virtualinvoke $r6.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>();

        $r16 = virtualinvoke $r2.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>();

        $z0 = virtualinvoke $r15.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label6;

        $r7 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r17 = virtualinvoke $r7.<okhttp3.Address: javax.net.ssl.HostnameVerifier hostnameVerifier()>();

        $r18 = <okhttp3.internal.tls.OkHostnameVerifier: okhttp3.internal.tls.OkHostnameVerifier INSTANCE>;

        if $r17 != $r18 goto label6;

        $r8 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $z0 = virtualinvoke r0.<okhttp3.internal.connection.RealConnection: boolean supportsUrl(okhttp3.HttpUrl)>($r8);

        if $z0 == 0 goto label6;

     label3:
        $r19 = virtualinvoke $r1.<okhttp3.Address: okhttp3.CertificatePinner certificatePinner()>();

        $r8 = virtualinvoke $r1.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r9 = virtualinvoke $r8.<okhttp3.HttpUrl: java.lang.String host()>();

        $r20 = virtualinvoke r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake()>();

        $r4 = virtualinvoke $r20.<okhttp3.Handshake: java.util.List peerCertificates()>();

        virtualinvoke $r19.<okhttp3.CertificatePinner: void check(java.lang.String,java.util.List)>($r9, $r4);

     label4:
        return 1;

     label5:
        r3 := @caughtexception;

     label6:
        return 0;

        catch javax.net.ssl.SSLPeerUnverifiedException from label3 to label4 with label5;
    }
    public boolean isHealthy(boolean)
    {
        okhttp3.internal.connection.RealConnection r0;
        boolean $z0, $z1;
        java.io.IOException r1;
        java.net.Socket $r2;
        okhttp3.internal.http2.Http2Connection $r3;
        int $i0;
        okio.BufferedSource $r4;
        java.net.SocketTimeoutException $r5;
        java.lang.Throwable $r6;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $z0 := @parameter0: boolean;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        $z1 = virtualinvoke $r2.<java.net.Socket: boolean isClosed()>();

        if $z1 != 0 goto label01;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        $z1 = virtualinvoke $r2.<java.net.Socket: boolean isInputShutdown()>();

        if $z1 != 0 goto label01;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        $z1 = virtualinvoke $r2.<java.net.Socket: boolean isOutputShutdown()>();

        if $z1 == 0 goto label02;

     label01:
        return 0;

     label02:
        $r3 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        if $r3 == null goto label03;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        $z0 = virtualinvoke $r3.<okhttp3.internal.http2.Http2Connection: boolean isShutdown()>();

        if $z0 == 0 goto label16;

        return 0;

     label03:
        if $z0 == 0 goto label16;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

     label04:
        $i0 = virtualinvoke $r2.<java.net.Socket: int getSoTimeout()>();

     label05:
        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>(1);

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $z0 = interfaceinvoke $r4.<okio.BufferedSource: boolean exhausted()>();

     label06:
        if $z0 == 0 goto label09;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

     label07:
        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i0);

     label08:
        return 0;

     label09:
        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

     label10:
        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i0);

     label11:
        return 1;

     label12:
        $r5 := @caughtexception;

        return 1;

     label13:
        $r6 := @caughtexception;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

     label14:
        virtualinvoke $r2.<java.net.Socket: void setSoTimeout(int)>($i0);

        throw $r6;

     label15:
        r1 := @caughtexception;

        return 0;

     label16:
        return 1;

        catch java.net.SocketTimeoutException from label04 to label05 with label12;
        catch java.io.IOException from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.net.SocketTimeoutException from label07 to label08 with label12;
        catch java.net.SocketTimeoutException from label10 to label11 with label12;
        catch java.net.SocketTimeoutException from label14 to label15 with label12;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.IOException from label10 to label11 with label15;
        catch java.io.IOException from label14 to label15 with label15;
    }
    public boolean isMultiplexed()
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.internal.http2.Http2Connection $r1;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public okhttp3.internal.http.HttpCodec newCodec(okhttp3.OkHttpClient, okhttp3.internal.connection.StreamAllocation) throws java.net.SocketException
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.OkHttpClient $r1;
        okhttp3.internal.connection.StreamAllocation $r2;
        okhttp3.internal.http2.Http2Connection $r3;
        okhttp3.internal.http2.Http2Codec $r4;
        java.net.Socket $r5;
        int $i0;
        okio.BufferedSource $r6;
        okio.Timeout $r7;
        long $l1;
        java.util.concurrent.TimeUnit $r8;
        okio.BufferedSink $r9;
        okhttp3.internal.http1.Http1Codec $r10;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        $r2 := @parameter1: okhttp3.internal.connection.StreamAllocation;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        if $r3 == null goto label1;

        $r4 = new okhttp3.internal.http2.Http2Codec;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.internal.http2.Http2Connection http2Connection>;

        specialinvoke $r4.<okhttp3.internal.http2.Http2Codec: void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http2.Http2Connection)>($r1, $r2, $r3);

        return $r4;

     label1:
        $r5 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient: int readTimeoutMillis()>();

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>($i0);

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r7 = interfaceinvoke $r6.<okio.BufferedSource: okio.Timeout timeout()>();

        $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient: int readTimeoutMillis()>();

        $l1 = (long) $i0;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r7.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r8);

        $r9 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        $r7 = interfaceinvoke $r9.<okio.BufferedSink: okio.Timeout timeout()>();

        $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient: int writeTimeoutMillis()>();

        $l1 = (long) $i0;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r7.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r8);

        $r10 = new okhttp3.internal.http1.Http1Codec;

        $r6 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r9 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        specialinvoke $r10.<okhttp3.internal.http1.Http1Codec: void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okio.BufferedSource,okio.BufferedSink)>($r1, $r2, $r6, $r9);

        return $r10;
    }
    public okhttp3.internal.ws.RealWebSocket$Streams newWebSocketStreams(okhttp3.internal.connection.StreamAllocation)
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.internal.connection.StreamAllocation $r1;
        okhttp3.internal.connection.RealConnection$1 $r2;
        okio.BufferedSource $r3;
        okio.BufferedSink $r4;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.internal.connection.StreamAllocation;

        $r2 = new okhttp3.internal.connection.RealConnection$1;

        $r3 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSource source>;

        $r4 = r0.<okhttp3.internal.connection.RealConnection: okio.BufferedSink sink>;

        specialinvoke $r2.<okhttp3.internal.connection.RealConnection$1: void <init>(okhttp3.internal.connection.RealConnection,boolean,okio.BufferedSource,okio.BufferedSink,okhttp3.internal.connection.StreamAllocation)>(r0, 1, $r3, $r4, $r1);

        return $r2;
    }
    public void onSettings(okhttp3.internal.http2.Http2Connection)
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.internal.http2.Http2Connection $r1;
        okhttp3.ConnectionPool $r2;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.internal.http2.Http2Connection;

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.ConnectionPool connectionPool>;

        entermonitor $r2;

     label1:
        $i0 = virtualinvoke $r1.<okhttp3.internal.http2.Http2Connection: int maxConcurrentStreams()>();

        r0.<okhttp3.internal.connection.RealConnection: int allocationLimit> = $i0;

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public void onStream(okhttp3.internal.http2.Http2Stream) throws java.io.IOException
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.internal.http2.Http2Stream $r1;
        okhttp3.internal.http2.ErrorCode $r2;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.internal.http2.Http2Stream;

        $r2 = <okhttp3.internal.http2.ErrorCode: okhttp3.internal.http2.ErrorCode REFUSED_STREAM>;

        virtualinvoke $r1.<okhttp3.internal.http2.Http2Stream: void close(okhttp3.internal.http2.ErrorCode)>($r2);

        return;
    }
    public okhttp3.Protocol protocol()
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.Protocol r1;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        r1 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol>;

        return r1;
    }
    public okhttp3.Route route()
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.Route r1;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        r1 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        return r1;
    }
    public java.net.Socket socket()
    {
        okhttp3.internal.connection.RealConnection r0;
        java.net.Socket r1;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        r1 = r0.<okhttp3.internal.connection.RealConnection: java.net.Socket socket>;

        return r1;
    }
    public boolean supportsUrl(okhttp3.HttpUrl)
    {
        okhttp3.internal.connection.RealConnection r0;
        okhttp3.HttpUrl $r1, $r4;
        int $i0, $i1;
        okhttp3.Route $r2;
        okhttp3.Address $r3;
        java.lang.String $r5, $r6;
        boolean $z0;
        okhttp3.Handshake $r7;
        okhttp3.internal.tls.OkHostnameVerifier $r8;
        java.util.List $r9;
        java.lang.Object $r10;
        java.security.cert.X509Certificate $r11;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 := @parameter0: okhttp3.HttpUrl;

        $i0 = virtualinvoke $r1.<okhttp3.HttpUrl: int port()>();

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r3 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r4 = virtualinvoke $r3.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $i1 = virtualinvoke $r4.<okhttp3.HttpUrl: int port()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r5 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String host()>();

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r3 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r4 = virtualinvoke $r3.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r6 = virtualinvoke $r4.<okhttp3.HttpUrl: java.lang.String host()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

        $r7 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake>;

        if $r7 == null goto label3;

        $r8 = <okhttp3.internal.tls.OkHostnameVerifier: okhttp3.internal.tls.OkHostnameVerifier INSTANCE>;

        $r5 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String host()>();

        $r7 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake>;

        $r9 = virtualinvoke $r7.<okhttp3.Handshake: java.util.List peerCertificates()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (java.security.cert.X509Certificate) $r10;

        $z0 = virtualinvoke $r8.<okhttp3.internal.tls.OkHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)>($r5, $r11);

        if $z0 == 0 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        return 1;
    }
    public java.lang.String toString()
    {
        okhttp3.internal.connection.RealConnection r0;
        java.lang.StringBuilder $r1;
        okhttp3.Route $r2;
        okhttp3.Address $r3;
        okhttp3.HttpUrl $r4;
        java.lang.String $r5;
        int $i0;
        java.net.Proxy $r6;
        java.net.InetSocketAddress $r7;
        okhttp3.Handshake $r8;
        java.lang.Object $r9;
        okhttp3.Protocol $r10;

        r0 := @this: okhttp3.internal.connection.RealConnection;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection{");

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r3 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r4 = virtualinvoke $r3.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $r5 = virtualinvoke $r4.<okhttp3.HttpUrl: java.lang.String host()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r3 = virtualinvoke $r2.<okhttp3.Route: okhttp3.Address address()>();

        $r4 = virtualinvoke $r3.<okhttp3.Address: okhttp3.HttpUrl url()>();

        $i0 = virtualinvoke $r4.<okhttp3.HttpUrl: int port()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", proxy=");

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r6 = virtualinvoke $r2.<okhttp3.Route: java.net.Proxy proxy()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hostAddress=");

        $r2 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Route route>;

        $r7 = virtualinvoke $r2.<okhttp3.Route: java.net.InetSocketAddress socketAddress()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cipherSuite=");

        $r8 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake>;

        if $r8 == null goto label2;

        $r8 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Handshake handshake>;

        $r9 = virtualinvoke $r8.<okhttp3.Handshake: okhttp3.CipherSuite cipherSuite()>();

     label1:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" protocol=");

        $r10 = r0.<okhttp3.internal.connection.RealConnection: okhttp3.Protocol protocol>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label2:
        $r9 = "none";

        goto label1;
    }
