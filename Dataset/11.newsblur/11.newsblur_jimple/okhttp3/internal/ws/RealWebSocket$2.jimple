okhttp3.internal.ws.RealWebSocket$2 extends java.lang.Object implements okhttp3.Callback
final okhttp3.internal.ws.RealWebSocket this$0
final int val$pingIntervalMillis
final okhttp3.Request val$request
    void <init>(okhttp3.internal.ws.RealWebSocket, okhttp3.Request, int)
    {
        okhttp3.internal.ws.RealWebSocket$2 r0;
        okhttp3.internal.ws.RealWebSocket $r1;
        okhttp3.Request $r2;
        int $i0;

        r0 := @this: okhttp3.internal.ws.RealWebSocket$2;

        $r1 := @parameter0: okhttp3.internal.ws.RealWebSocket;

        $r2 := @parameter1: okhttp3.Request;

        $i0 := @parameter2: int;

        r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0> = $r1;

        r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.Request val$request> = $r2;

        r0.<okhttp3.internal.ws.RealWebSocket$2: int val$pingIntervalMillis> = $i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public void onFailure(okhttp3.Call, java.io.IOException)
    {
        okhttp3.internal.ws.RealWebSocket$2 r0;
        okhttp3.Call $r1;
        java.io.IOException $r2;
        okhttp3.internal.ws.RealWebSocket $r3;

        r0 := @this: okhttp3.internal.ws.RealWebSocket$2;

        $r1 := @parameter0: okhttp3.Call;

        $r2 := @parameter1: java.io.IOException;

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        virtualinvoke $r3.<okhttp3.internal.ws.RealWebSocket: void failWebSocket(java.lang.Exception,okhttp3.Response)>($r2, null);

        return;
    }
    public void onResponse(okhttp3.Call, okhttp3.Response)
    {
        okhttp3.internal.ws.RealWebSocket$2 r0;
        okhttp3.Call $r1;
        okhttp3.Response $r2;
        long $l0;
        okhttp3.internal.ws.RealWebSocket $r3;
        okhttp3.internal.Internal $r4;
        okhttp3.internal.connection.StreamAllocation $r5;
        okhttp3.internal.connection.RealConnection $r6;
        okhttp3.internal.ws.RealWebSocket$Streams $r7;
        okhttp3.WebSocketListener $r8;
        java.lang.StringBuilder $r9;
        okhttp3.Request $r10;
        okhttp3.HttpUrl $r11;
        java.lang.String $r12;
        int $i1;
        java.net.Socket $r13;
        java.net.ProtocolException r14;
        java.lang.Exception r15;

        r0 := @this: okhttp3.internal.ws.RealWebSocket$2;

        $r1 := @parameter0: okhttp3.Call;

        $r2 := @parameter1: okhttp3.Response;

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

     label01:
        virtualinvoke $r3.<okhttp3.internal.ws.RealWebSocket: void checkResponse(okhttp3.Response)>($r2);

     label02:
        $r4 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        $r5 = virtualinvoke $r4.<okhttp3.internal.Internal: okhttp3.internal.connection.StreamAllocation streamAllocation(okhttp3.Call)>($r1);

        virtualinvoke $r5.<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>();

        $r6 = virtualinvoke $r5.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        $r7 = virtualinvoke $r6.<okhttp3.internal.connection.RealConnection: okhttp3.internal.ws.RealWebSocket$Streams newWebSocketStreams(okhttp3.internal.connection.StreamAllocation)>($r5);

     label03:
        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        $r8 = $r3.<okhttp3.internal.ws.RealWebSocket: okhttp3.WebSocketListener listener>;

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        virtualinvoke $r8.<okhttp3.WebSocketListener: void onOpen(okhttp3.WebSocket,okhttp3.Response)>($r3, $r2);

     label04:
        $r9 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OkHttp WebSocket ");

        $r10 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.Request val$request>;

        $r11 = virtualinvoke $r10.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r12 = virtualinvoke $r11.<okhttp3.HttpUrl: java.lang.String redact()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        $i1 = r0.<okhttp3.internal.ws.RealWebSocket$2: int val$pingIntervalMillis>;

     label06:
        $l0 = (long) $i1;

     label07:
        virtualinvoke $r3.<okhttp3.internal.ws.RealWebSocket: void initReaderAndWriter(java.lang.String,long,okhttp3.internal.ws.RealWebSocket$Streams)>($r12, $l0, $r7);

        $r6 = virtualinvoke $r5.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        $r13 = virtualinvoke $r6.<okhttp3.internal.connection.RealConnection: java.net.Socket socket()>();

        virtualinvoke $r13.<java.net.Socket: void setSoTimeout(int)>(0);

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        virtualinvoke $r3.<okhttp3.internal.ws.RealWebSocket: void loopReader()>();

     label08:
        return;

     label09:
        r14 := @caughtexception;

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        virtualinvoke $r3.<okhttp3.internal.ws.RealWebSocket: void failWebSocket(java.lang.Exception,okhttp3.Response)>(r14, $r2);

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r2);

        return;

     label10:
        r15 := @caughtexception;

        $r3 = r0.<okhttp3.internal.ws.RealWebSocket$2: okhttp3.internal.ws.RealWebSocket this$0>;

        virtualinvoke $r3.<okhttp3.internal.ws.RealWebSocket: void failWebSocket(java.lang.Exception,okhttp3.Response)>(r15, null);

        return;

        catch java.net.ProtocolException from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label10;
        catch java.lang.Exception from label05 to label06 with label10;
        catch java.lang.Exception from label07 to label08 with label10;
    }
