okhttp3.internal.publicsuffix.PublicSuffixDatabase extends java.lang.Object
private static final java.lang.String[] EMPTY_RULE
private static final byte EXCEPTION_MARKER
private static final java.lang.String[] PREVAILING_RULE
public static final java.lang.String PUBLIC_SUFFIX_RESOURCE
private static final byte[] WILDCARD_LABEL
private static final okhttp3.internal.publicsuffix.PublicSuffixDatabase instance
private final java.util.concurrent.atomic.AtomicBoolean listRead
private byte[] publicSuffixExceptionListBytes
private byte[] publicSuffixListBytes
private final java.util.concurrent.CountDownLatch readCompleteLatch
    static void <clinit>()
    {
        byte[] $r0;
        java.lang.String[] $r1;
        okhttp3.internal.publicsuffix.PublicSuffixDatabase $r2;

        $r0 = newarray (byte)[1];

        $r0[0] = 42;

        <okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] WILDCARD_LABEL> = $r0;

        $r1 = newarray (java.lang.String)[0];

        <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String[] EMPTY_RULE> = $r1;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "*";

        <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String[] PREVAILING_RULE> = $r1;

        $r2 = new okhttp3.internal.publicsuffix.PublicSuffixDatabase;

        specialinvoke $r2.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: void <init>()>();

        <okhttp3.internal.publicsuffix.PublicSuffixDatabase: okhttp3.internal.publicsuffix.PublicSuffixDatabase instance> = $r2;

        return;
    }
    public void <init>()
    {
        okhttp3.internal.publicsuffix.PublicSuffixDatabase r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        java.util.concurrent.CountDownLatch $r2;

        r0 := @this: okhttp3.internal.publicsuffix.PublicSuffixDatabase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.atomic.AtomicBoolean listRead> = $r1;

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.CountDownLatch readCompleteLatch> = $r2;

        return;
    }
    private static java.lang.String binarySearchBytes(byte[], byte[][], int)
    {
        byte[] $r0, $r2;
        byte[][] $r1;
        int $i0, i1, i2, i3, i4, i5, i6, $i7, i9, i10, i11;
        byte $b8;
        boolean z0;
        java.lang.String r3;
        java.nio.charset.Charset $r4;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[][];

        $i0 := @parameter2: int;

        i5 = 0;

        i6 = lengthof $r0;

     label01:
        if i5 >= i6 goto label17;

        $i7 = i5 + i6;

        $i7 = $i7 / 2;

     label02:
        if $i7 <= -1 goto label03;

        $b8 = $r0[$i7];

        if $b8 == 10 goto label03;

        $i7 = $i7 + -1;

        goto label02;

     label03:
        $i7 = $i7 + 1;

        i9 = 1;

     label04:
        i4 = $i7 + i9;

        $b8 = $r0[i4];

        if $b8 == 10 goto label05;

        i9 = i9 + 1;

        goto label04;

     label05:
        i4 = $i7 + i9;

        i4 = i4 - $i7;

        i10 = $i0;

        i11 = 0;

        i3 = 0;

        z0 = 0;

     label06:
        if z0 == 0 goto label09;

        i2 = 46;

        z0 = 0;

     label07:
        i1 = $i7 + i3;

        $b8 = $r0[i1];

        i1 = $b8 & 255;

        i2 = i2 - i1;

        if i2 == 0 goto label10;

     label08:
        if i2 >= 0 goto label11;

        i6 = $i7 + -1;

        goto label01;

     label09:
        $r2 = $r1[i10];

        $b8 = $r2[i11];

        i2 = $b8 & 255;

        goto label07;

     label10:
        i3 = i3 + 1;

        i11 = i11 + 1;

        if i3 == i4 goto label08;

        $r2 = $r1[i10];

        i1 = lengthof $r2;

        if i1 != i11 goto label06;

        i1 = lengthof $r1;

        i1 = i1 + -1;

        if i10 == i1 goto label08;

        i10 = i10 + 1;

        i11 = -1;

        z0 = 1;

        goto label06;

     label11:
        if i2 <= 0 goto label12;

        i5 = $i7 + i9;

        i5 = i5 + 1;

        goto label01;

     label12:
        i3 = i4 - i3;

        $r2 = $r1[i10];

        i2 = lengthof $r2;

        i11 = i2 - i11;

        i10 = i10 + 1;

     label13:
        i2 = lengthof $r1;

        if i10 >= i2 goto label14;

        $r2 = $r1[i10];

        i2 = lengthof $r2;

        i11 = i11 + i2;

        i10 = i10 + 1;

        goto label13;

     label14:
        if i11 >= i3 goto label15;

        i6 = $i7 + -1;

        goto label01;

     label15:
        if i11 <= i3 goto label16;

        i5 = $i7 + i9;

        i5 = i5 + 1;

        goto label01;

     label16:
        r3 = new java.lang.String;

        $r4 = <okhttp3.internal.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke r3.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r0, $i7, i4, $r4);

        return r3;

     label17:
        return null;
    }
    private java.lang.String[] findMatchingRule(java.lang.String[])
    {
        okhttp3.internal.publicsuffix.PublicSuffixDatabase r0;
        java.lang.String[] $r1, $r17;
        byte[][] r2, r13;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        byte[] $r4;
        java.lang.IllegalStateException $r5;
        java.lang.Throwable $r6;
        java.util.concurrent.CountDownLatch $r7;
        java.lang.InterruptedException $r8;
        int $i0, $i1;
        java.lang.String $r9, $r11, $r14, $r15;
        java.nio.charset.Charset $r10;
        java.lang.Object $r12;
        java.lang.StringBuilder $r16;

        r0 := @this: okhttp3.internal.publicsuffix.PublicSuffixDatabase;

        $r1 := @parameter0: java.lang.String[];

        $r3 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.atomic.AtomicBoolean listRead>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label05;

        $r3 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.atomic.AtomicBoolean listRead>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label05;

        specialinvoke r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: void readTheList()>();

     label01:
        entermonitor r0;

     label02:
        $r4 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixListBytes>;

        if $r4 != null goto label09;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to load publicsuffixes.gz resource from the classpath.");

        throw $r5;

     label03:
        $r6 := @caughtexception;

        exitmonitor r0;

     label04:
        throw $r6;

     label05:
        $r7 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.CountDownLatch readCompleteLatch>;

     label06:
        virtualinvoke $r7.<java.util.concurrent.CountDownLatch: void await()>();

     label07:
        goto label01;

     label08:
        $r8 := @caughtexception;

        goto label01;

     label09:
        exitmonitor r0;

     label10:
        $i0 = lengthof $r1;

        r2 = newarray (byte[])[$i0];

        $i0 = 0;

     label11:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label12;

        $r9 = $r1[$i0];

        $r10 = <okhttp3.internal.Util: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10);

        r2[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label11;

     label12:
        $r9 = null;

        $i0 = 0;

     label13:
        $i1 = lengthof r2;

        if $i0 >= $i1 goto label14;

        $r4 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixListBytes>;

        $r11 = staticinvoke <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String binarySearchBytes(byte[],byte[][],int)>($r4, r2, $i0);

        if $r11 == null goto label19;

        $r9 = $r11;

     label14:
        $r11 = null;

        $i0 = lengthof r2;

        if $i0 <= 1 goto label16;

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r13 = (byte[][]) $r12;

        $i0 = 0;

     label15:
        $i1 = lengthof r13;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label16;

        $r4 = <okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] WILDCARD_LABEL>;

        r13[$i0] = $r4;

        $r4 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixListBytes>;

        $r14 = staticinvoke <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String binarySearchBytes(byte[],byte[][],int)>($r4, r13, $i0);

        if $r14 == null goto label20;

        $r11 = $r14;

     label16:
        $r14 = null;

        if $r11 == null goto label18;

        $i0 = 0;

     label17:
        $i1 = lengthof r2;

        $i1 = $i1 + -1;

        if $i0 >= $i1 goto label18;

        $r4 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixExceptionListBytes>;

        $r15 = staticinvoke <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String binarySearchBytes(byte[],byte[][],int)>($r4, r2, $i0);

        if $r15 == null goto label21;

        $r14 = $r15;

     label18:
        if $r14 == null goto label22;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r9 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        return $r1;

     label19:
        $i0 = $i0 + 1;

        goto label13;

     label20:
        $i0 = $i0 + 1;

        goto label15;

     label21:
        $i0 = $i0 + 1;

        goto label17;

     label22:
        if $r9 != null goto label23;

        if $r11 != null goto label23;

        $r1 = <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String[] PREVAILING_RULE>;

        return $r1;

     label23:
        if $r9 == null goto label26;

        $r1 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

     label24:
        if $r11 == null goto label27;

        $r17 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

     label25:
        $i0 = lengthof $r1;

        $i1 = lengthof $r17;

        if $i0 > $i1 goto label28;

        return $r17;

     label26:
        $r1 = <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String[] EMPTY_RULE>;

        goto label24;

     label27:
        $r17 = <okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String[] EMPTY_RULE>;

        goto label25;

     label28:
        return $r1;

        catch java.lang.Throwable from label02 to label04 with label03;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label03;
    }
    public static okhttp3.internal.publicsuffix.PublicSuffixDatabase get()
    {
        okhttp3.internal.publicsuffix.PublicSuffixDatabase r0;

        r0 = <okhttp3.internal.publicsuffix.PublicSuffixDatabase: okhttp3.internal.publicsuffix.PublicSuffixDatabase instance>;

        return r0;
    }
    private void readTheList()
    {
        okhttp3.internal.publicsuffix.PublicSuffixDatabase r0;
        java.io.IOException r1;
        byte[] r2, r3;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        java.io.InputStream $r6;
        okio.GzipSource $r7;
        okio.Source $r8;
        okio.BufferedSource $r9;
        int $i0;
        java.util.concurrent.CountDownLatch $r10;
        okhttp3.internal.platform.Platform $r11;
        java.lang.Throwable $r12, $r13;

        r0 := @this: okhttp3.internal.publicsuffix.PublicSuffixDatabase;

        r2 = null;

        r3 = null;

        $r4 = class "Lokhttp3/internal/publicsuffix/PublicSuffixDatabase;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("publicsuffixes.gz");

        if $r6 == null goto label07;

        $r7 = new okio.GzipSource;

        $r8 = staticinvoke <okio.Okio: okio.Source source(java.io.InputStream)>($r6);

        specialinvoke $r7.<okio.GzipSource: void <init>(okio.Source)>($r8);

        $r9 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r7);

     label01:
        $i0 = interfaceinvoke $r9.<okio.BufferedSource: int readInt()>();

     label02:
        r2 = newarray (byte)[$i0];

     label03:
        interfaceinvoke $r9.<okio.BufferedSource: void readFully(byte[])>(r2);

        $i0 = interfaceinvoke $r9.<okio.BufferedSource: int readInt()>();

     label04:
        r3 = newarray (byte)[$i0];

     label05:
        interfaceinvoke $r9.<okio.BufferedSource: void readFully(byte[])>(r3);

     label06:
        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

     label07:
        entermonitor r0;

     label08:
        r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixListBytes> = r2;

        r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixExceptionListBytes> = r3;

        exitmonitor r0;

     label09:
        $r10 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.CountDownLatch readCompleteLatch>;

        virtualinvoke $r10.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label10:
        r1 := @caughtexception;

     label11:
        $r11 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform get()>();

        virtualinvoke $r11.<okhttp3.internal.platform.Platform: void log(int,java.lang.String,java.lang.Throwable)>(5, "Failed to read public suffix list", r1);

     label12:
        r2 = null;

        r3 = null;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

        goto label07;

     label13:
        $r12 := @caughtexception;

        staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r9);

        throw $r12;

     label14:
        $r13 := @caughtexception;

     label15:
        exitmonitor r0;

     label16:
        throw $r13;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.lang.Throwable from label01 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label14;
    }
    public java.lang.String getEffectiveTldPlusOne(java.lang.String)
    {
        okhttp3.internal.publicsuffix.PublicSuffixDatabase r0;
        java.lang.String $r1, $r4;
        java.lang.StringBuilder r2, $r7;
        java.lang.NullPointerException $r3;
        java.lang.String[] $r5, $r6;
        int $i0, $i1;
        char $c2;

        r0 := @this: okhttp3.internal.publicsuffix.PublicSuffixDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("domain == null");

        throw $r3;

     label1:
        $r4 = staticinvoke <java.net.IDN: java.lang.String toUnicode(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $r6 = specialinvoke r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.lang.String[] findMatchingRule(java.lang.String[])>($r5);

        $i0 = lengthof $r5;

        $i1 = lengthof $r6;

        if $i0 != $i1 goto label2;

        $r4 = $r6[0];

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        if $c2 == 33 goto label2;

        return null;

     label2:
        $r4 = $r6[0];

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        if $c2 != 33 goto label5;

        $i0 = lengthof $r5;

        $i1 = lengthof $r6;

        $i0 = $i0 - $i1;

     label3:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

     label4:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label6;

        $r1 = $r5[$i0];

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $i0 = $i0 + 1;

        goto label4;

     label5:
        $i0 = lengthof $r5;

        $i1 = lengthof $r6;

        $i1 = $i1 + 1;

        $i0 = $i0 - $i1;

        goto label3;

     label6:
        $i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i0);

        $r1 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }
    void setListBytes(byte[], byte[])
    {
        okhttp3.internal.publicsuffix.PublicSuffixDatabase r0;
        byte[] $r1, $r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.util.concurrent.CountDownLatch $r4;

        r0 := @this: okhttp3.internal.publicsuffix.PublicSuffixDatabase;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixListBytes> = $r1;

        r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: byte[] publicSuffixExceptionListBytes> = $r2;

        $r3 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.atomic.AtomicBoolean listRead>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r4 = r0.<okhttp3.internal.publicsuffix.PublicSuffixDatabase: java.util.concurrent.CountDownLatch readCompleteLatch>;

        virtualinvoke $r4.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }
