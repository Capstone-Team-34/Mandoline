okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex extends okhttp3.internal.tls.TrustRootIndex
private final java.lang.reflect.Method findByIssuerAndSignatureMethod
private final javax.net.ssl.X509TrustManager trustManager
    void <init>(javax.net.ssl.X509TrustManager, java.lang.reflect.Method)
    {
        okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex r0;
        javax.net.ssl.X509TrustManager $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex;

        $r1 := @parameter0: javax.net.ssl.X509TrustManager;

        $r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<okhttp3.internal.tls.TrustRootIndex: void <init>()>();

        r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: java.lang.reflect.Method findByIssuerAndSignatureMethod> = $r2;

        r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: javax.net.ssl.X509TrustManager trustManager> = $r1;

        return;
    }
    public boolean equals(java.lang.Object)
    {
        okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex r0, r2;
        java.lang.Object $r1;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r3, $r4;
        java.lang.reflect.Method $r5, $r6;

        r0 := @this: okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex) $r1;

        $r3 = r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: javax.net.ssl.X509TrustManager trustManager>;

        $r4 = r2.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: javax.net.ssl.X509TrustManager trustManager>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: java.lang.reflect.Method findByIssuerAndSignatureMethod>;

        $r6 = r2.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: java.lang.reflect.Method findByIssuerAndSignatureMethod>;

        $z0 = virtualinvoke $r5.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }
    public java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)
    {
        okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex r0;
        java.security.cert.X509Certificate $r1;
        java.lang.reflect.Method $r2;
        javax.net.ssl.X509TrustManager $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.security.cert.TrustAnchor r6;
        java.lang.IllegalAccessException r7;
        java.lang.AssertionError $r8;
        java.lang.reflect.InvocationTargetException r9;

        r0 := @this: okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: java.lang.reflect.Method findByIssuerAndSignatureMethod>;

        $r3 = r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: javax.net.ssl.X509TrustManager trustManager>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

     label1:
        $r5 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r4);

     label2:
        r6 = (java.security.cert.TrustAnchor) $r5;

        if r6 == null goto label7;

     label3:
        $r1 = virtualinvoke r6.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

     label4:
        return $r1;

     label5:
        r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label6:
        r9 := @caughtexception;

     label7:
        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
    }
    public int hashCode()
    {
        okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex r0;
        javax.net.ssl.X509TrustManager $r1;
        int $i0, $i1;
        java.lang.reflect.Method $r2;

        r0 := @this: okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex;

        $r1 = r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: javax.net.ssl.X509TrustManager trustManager>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex: java.lang.reflect.Method findByIssuerAndSignatureMethod>;

        $i1 = virtualinvoke $r2.<java.lang.reflect.Method: int hashCode()>();

        $i1 = $i1 * 31;

        $i0 = $i0 + $i1;

        return $i0;
    }
