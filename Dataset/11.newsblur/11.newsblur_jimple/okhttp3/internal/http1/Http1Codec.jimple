okhttp3.internal.http1.Http1Codec extends java.lang.Object implements okhttp3.internal.http.HttpCodec
private static final int STATE_CLOSED
private static final int STATE_IDLE
private static final int STATE_OPEN_REQUEST_BODY
private static final int STATE_OPEN_RESPONSE_BODY
private static final int STATE_READING_RESPONSE_BODY
private static final int STATE_READ_RESPONSE_HEADERS
private static final int STATE_WRITING_REQUEST_BODY
final okhttp3.OkHttpClient client
final okio.BufferedSink sink
final okio.BufferedSource source
int state
final okhttp3.internal.connection.StreamAllocation streamAllocation
    public void <init>(okhttp3.OkHttpClient, okhttp3.internal.connection.StreamAllocation, okio.BufferedSource, okio.BufferedSink)
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.OkHttpClient $r1;
        okhttp3.internal.connection.StreamAllocation $r2;
        okio.BufferedSource $r3;
        okio.BufferedSink $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.OkHttpClient;

        $r2 := @parameter1: okhttp3.internal.connection.StreamAllocation;

        $r3 := @parameter2: okio.BufferedSource;

        $r4 := @parameter3: okio.BufferedSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.internal.http1.Http1Codec: int state> = 0;

        r0.<okhttp3.internal.http1.Http1Codec: okhttp3.OkHttpClient client> = $r1;

        r0.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation> = $r2;

        r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSource source> = $r3;

        r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink> = $r4;

        return;
    }
    private okio.Source getTransferStream(okhttp3.Response) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.Response $r1;
        boolean $z0;
        okio.Source $r2;
        java.lang.String $r3, $r4;
        okhttp3.Request $r5;
        okhttp3.HttpUrl $r6;
        long $l0;
        byte $b1;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.Response;

        $z0 = staticinvoke <okhttp3.internal.http.HttpHeaders: boolean hasBody(okhttp3.Response)>($r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Source newFixedLengthSource(long)>(0L);

        return $r2;

     label1:
        $r3 = "chunked";

        $r4 = virtualinvoke $r1.<okhttp3.Response: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Request request()>();

        $r6 = virtualinvoke $r5.<okhttp3.Request: okhttp3.HttpUrl url()>();

        $r2 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Source newChunkedSource(okhttp3.HttpUrl)>($r6);

        return $r2;

     label2:
        $l0 = staticinvoke <okhttp3.internal.http.HttpHeaders: long contentLength(okhttp3.Response)>($r1);

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label3;

        $r2 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Source newFixedLengthSource(long)>($l0);

        return $r2;

     label3:
        $r2 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Source newUnknownLengthSource()>();

        return $r2;
    }
    public void cancel()
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.internal.connection.StreamAllocation $r1;
        okhttp3.internal.connection.RealConnection $r2;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        $r2 = virtualinvoke $r1.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        if $r2 == null goto label1;

        virtualinvoke $r2.<okhttp3.internal.connection.RealConnection: void cancel()>();

     label1:
        return;
    }
    public okio.Sink createRequestBody(okhttp3.Request, long)
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.Request $r1;
        long $l0;
        java.lang.String $r2, $r3;
        boolean $z0;
        okio.Sink $r4;
        byte $b1;
        java.lang.IllegalStateException $r5;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.Request;

        $l0 := @parameter1: long;

        $r2 = "chunked";

        $r3 = virtualinvoke $r1.<okhttp3.Request: java.lang.String header(java.lang.String)>("Transfer-Encoding");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Sink newChunkedSink()>();

        return $r4;

     label1:
        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label2;

        $r4 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Sink newFixedLengthSink(long)>($l0);

        return $r4;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot stream a request body without chunked encoding or a known content length!");

        throw $r5;
    }
    void detachTimeout(okio.ForwardingTimeout)
    {
        okhttp3.internal.http1.Http1Codec r0;
        okio.ForwardingTimeout $r1;
        okio.Timeout $r2, $r3;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okio.ForwardingTimeout;

        $r3 = virtualinvoke $r1.<okio.ForwardingTimeout: okio.Timeout delegate()>();

        $r2 = <okio.Timeout: okio.Timeout NONE>;

        virtualinvoke $r1.<okio.ForwardingTimeout: okio.ForwardingTimeout setDelegate(okio.Timeout)>($r2);

        virtualinvoke $r3.<okio.Timeout: okio.Timeout clearDeadline()>();

        virtualinvoke $r3.<okio.Timeout: okio.Timeout clearTimeout()>();

        return;
    }
    public void finishRequest() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okio.BufferedSink $r1;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r1.<okio.BufferedSink: void flush()>();

        return;
    }
    public void flushRequest() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okio.BufferedSink $r1;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r1.<okio.BufferedSink: void flush()>();

        return;
    }
    public boolean isClosed()
    {
        okhttp3.internal.http1.Http1Codec r0;
        int $i0;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 != 6 goto label1;

        return 1;

     label1:
        return 0;
    }
    public okio.Sink newChunkedSink()
    {
        okhttp3.internal.http1.Http1Codec r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        okhttp3.internal.http1.Http1Codec$ChunkedSink $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        r0.<okhttp3.internal.http1.Http1Codec: int state> = 2;

        $r4 = new okhttp3.internal.http1.Http1Codec$ChunkedSink;

        specialinvoke $r4.<okhttp3.internal.http1.Http1Codec$ChunkedSink: void <init>(okhttp3.internal.http1.Http1Codec)>(r0);

        return $r4;
    }
    public okio.Source newChunkedSource(okhttp3.HttpUrl) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.HttpUrl $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        okhttp3.internal.http1.Http1Codec$ChunkedSource $r5;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.HttpUrl;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 4 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        r0.<okhttp3.internal.http1.Http1Codec: int state> = 5;

        $r5 = new okhttp3.internal.http1.Http1Codec$ChunkedSource;

        specialinvoke $r5.<okhttp3.internal.http1.Http1Codec$ChunkedSource: void <init>(okhttp3.internal.http1.Http1Codec,okhttp3.HttpUrl)>(r0, $r1);

        return $r5;
    }
    public okio.Sink newFixedLengthSink(long)
    {
        okhttp3.internal.http1.Http1Codec r0;
        long $l0;
        int $i1;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        okhttp3.internal.http1.Http1Codec$FixedLengthSink $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $l0 := @parameter0: long;

        $i1 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i1 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i1 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        r0.<okhttp3.internal.http1.Http1Codec: int state> = 2;

        $r4 = new okhttp3.internal.http1.Http1Codec$FixedLengthSink;

        specialinvoke $r4.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: void <init>(okhttp3.internal.http1.Http1Codec,long)>(r0, $l0);

        return $r4;
    }
    public okio.Source newFixedLengthSource(long) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        long $l0;
        int $i1;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        okhttp3.internal.http1.Http1Codec$FixedLengthSource $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $l0 := @parameter0: long;

        $i1 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i1 == 4 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i1 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        r0.<okhttp3.internal.http1.Http1Codec: int state> = 5;

        $r4 = new okhttp3.internal.http1.Http1Codec$FixedLengthSource;

        specialinvoke $r4.<okhttp3.internal.http1.Http1Codec$FixedLengthSource: void <init>(okhttp3.internal.http1.Http1Codec,long)>(r0, $l0);

        return $r4;
    }
    public okio.Source newUnknownLengthSource() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        okhttp3.internal.connection.StreamAllocation $r4;
        okhttp3.internal.http1.Http1Codec$UnknownLengthSource $r5;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 4 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $r4 = r0.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        if $r4 != null goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("streamAllocation == null");

        throw $r1;

     label2:
        r0.<okhttp3.internal.http1.Http1Codec: int state> = 5;

        $r4 = r0.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        virtualinvoke $r4.<okhttp3.internal.connection.StreamAllocation: void noNewStreams()>();

        $r5 = new okhttp3.internal.http1.Http1Codec$UnknownLengthSource;

        specialinvoke $r5.<okhttp3.internal.http1.Http1Codec$UnknownLengthSource: void <init>(okhttp3.internal.http1.Http1Codec)>(r0);

        return $r5;
    }
    public okhttp3.ResponseBody openResponseBody(okhttp3.Response) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.Response $r1;
        okhttp3.internal.http.RealResponseBody $r2;
        okio.Source $r3;
        okhttp3.Headers $r4;
        okio.BufferedSource $r5;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.Response;

        $r3 = specialinvoke r0.<okhttp3.internal.http1.Http1Codec: okio.Source getTransferStream(okhttp3.Response)>($r1);

        $r2 = new okhttp3.internal.http.RealResponseBody;

        $r4 = virtualinvoke $r1.<okhttp3.Response: okhttp3.Headers headers()>();

        $r5 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r3);

        specialinvoke $r2.<okhttp3.internal.http.RealResponseBody: void <init>(okhttp3.Headers,okio.BufferedSource)>($r4, $r5);

        return $r2;
    }
    public okhttp3.Headers readHeaders() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.Headers$Builder r1;
        okio.BufferedSource $r2;
        java.lang.String $r3;
        int $i0;
        okhttp3.internal.Internal $r4;
        okhttp3.Headers $r5;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        r1 = new okhttp3.Headers$Builder;

        specialinvoke r1.<okhttp3.Headers$Builder: void <init>()>();

     label1:
        $r2 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSource source>;

        $r3 = interfaceinvoke $r2.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r4 = <okhttp3.internal.Internal: okhttp3.internal.Internal instance>;

        virtualinvoke $r4.<okhttp3.internal.Internal: void addLenient(okhttp3.Headers$Builder,java.lang.String)>(r1, $r3);

        goto label1;

     label2:
        $r5 = virtualinvoke r1.<okhttp3.Headers$Builder: okhttp3.Headers build()>();

        return $r5;
    }
    public okhttp3.Response$Builder readResponseHeaders(boolean) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        boolean $z0;
        java.io.EOFException r1;
        java.io.IOException r2;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        okio.BufferedSource $r6;
        okhttp3.internal.http.StatusLine $r7;
        okhttp3.Response$Builder $r8;
        okhttp3.Protocol $r9;
        okhttp3.Headers $r10;
        okhttp3.internal.connection.StreamAllocation $r11;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $z0 := @parameter0: boolean;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 1 goto label01;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 3 goto label01;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label01:
        $r6 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSource source>;

     label02:
        $r5 = interfaceinvoke $r6.<okio.BufferedSource: java.lang.String readUtf8LineStrict()>();

        $r7 = staticinvoke <okhttp3.internal.http.StatusLine: okhttp3.internal.http.StatusLine parse(java.lang.String)>($r5);

     label03:
        $r8 = new okhttp3.Response$Builder;

     label04:
        specialinvoke $r8.<okhttp3.Response$Builder: void <init>()>();

     label05:
        $r9 = $r7.<okhttp3.internal.http.StatusLine: okhttp3.Protocol protocol>;

     label06:
        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder protocol(okhttp3.Protocol)>($r9);

     label07:
        $i0 = $r7.<okhttp3.internal.http.StatusLine: int code>;

     label08:
        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder code(int)>($i0);

     label09:
        $r5 = $r7.<okhttp3.internal.http.StatusLine: java.lang.String message>;

     label10:
        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder message(java.lang.String)>($r5);

        $r10 = virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: okhttp3.Headers readHeaders()>();

        $r8 = virtualinvoke $r8.<okhttp3.Response$Builder: okhttp3.Response$Builder headers(okhttp3.Headers)>($r10);

     label11:
        if $z0 == 0 goto label12;

        $i0 = $r7.<okhttp3.internal.http.StatusLine: int code>;

        if $i0 != 100 goto label12;

        return null;

     label12:
        r0.<okhttp3.internal.http1.Http1Codec: int state> = 4;

        return $r8;

     label13:
        r1 := @caughtexception;

        r2 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected end of stream on ");

        $r11 = r0.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.io.IOException: void <init>(java.lang.String)>($r5);

        virtualinvoke r2.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw r2;

        catch java.io.EOFException from label02 to label03 with label13;
        catch java.io.EOFException from label04 to label05 with label13;
        catch java.io.EOFException from label06 to label07 with label13;
        catch java.io.EOFException from label08 to label09 with label13;
        catch java.io.EOFException from label10 to label11 with label13;
    }
    public void writeRequest(okhttp3.Headers, java.lang.String) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.Headers $r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4;
        okio.BufferedSink $r5;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.Headers;

        $r2 := @parameter1: java.lang.String;

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $i0 = r0.<okhttp3.internal.http1.Http1Codec: int state>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        $r5 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        $i0 = 0;

        $i1 = virtualinvoke $r1.<okhttp3.Headers: int size()>();

     label2:
        if $i0 >= $i1 goto label3;

        $r5 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        $r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String name(int)>($i0);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>(": ");

        $r2 = virtualinvoke $r1.<okhttp3.Headers: java.lang.String value(int)>($i0);

        $r5 = interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r2);

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $r5 = r0.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r5.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("\r\n");

        r0.<okhttp3.internal.http1.Http1Codec: int state> = 1;

        return;
    }
    public void writeRequestHeaders(okhttp3.Request) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec r0;
        okhttp3.Request $r1;
        okhttp3.internal.connection.StreamAllocation $r2;
        okhttp3.internal.connection.RealConnection $r3;
        okhttp3.Route $r4;
        java.net.Proxy $r5;
        java.net.Proxy$Type $r6;
        java.lang.String $r7;
        okhttp3.Headers $r8;

        r0 := @this: okhttp3.internal.http1.Http1Codec;

        $r1 := @parameter0: okhttp3.Request;

        $r2 = r0.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        $r3 = virtualinvoke $r2.<okhttp3.internal.connection.StreamAllocation: okhttp3.internal.connection.RealConnection connection()>();

        $r4 = virtualinvoke $r3.<okhttp3.internal.connection.RealConnection: okhttp3.Route route()>();

        $r5 = virtualinvoke $r4.<okhttp3.Route: java.net.Proxy proxy()>();

        $r6 = virtualinvoke $r5.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r7 = staticinvoke <okhttp3.internal.http.RequestLine: java.lang.String get(okhttp3.Request,java.net.Proxy$Type)>($r1, $r6);

        $r8 = virtualinvoke $r1.<okhttp3.Request: okhttp3.Headers headers()>();

        virtualinvoke r0.<okhttp3.internal.http1.Http1Codec: void writeRequest(okhttp3.Headers,java.lang.String)>($r8, $r7);

        return;
    }
