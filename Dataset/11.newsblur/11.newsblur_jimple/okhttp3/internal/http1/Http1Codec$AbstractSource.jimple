okhttp3.internal.http1.Http1Codec$AbstractSource extends java.lang.Object implements okio.Source
protected boolean closed
final okhttp3.internal.http1.Http1Codec this$0
protected final okio.ForwardingTimeout timeout
    private void <init>(okhttp3.internal.http1.Http1Codec)
    {
        okhttp3.internal.http1.Http1Codec$AbstractSource r0;
        okhttp3.internal.http1.Http1Codec $r1;
        okio.ForwardingTimeout $r2;
        okio.Timeout $r3;
        okio.BufferedSource $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec$AbstractSource;

        $r1 := @parameter0: okhttp3.internal.http1.Http1Codec;

        r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new okio.ForwardingTimeout;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r1.<okhttp3.internal.http1.Http1Codec: okio.BufferedSource source>;

        $r3 = interfaceinvoke $r4.<okio.BufferedSource: okio.Timeout timeout()>();

        specialinvoke $r2.<okio.ForwardingTimeout: void <init>(okio.Timeout)>($r3);

        r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okio.ForwardingTimeout timeout> = $r2;

        return;
    }
    void <init>(okhttp3.internal.http1.Http1Codec, okhttp3.internal.http1.Http1Codec$1)
    {
        okhttp3.internal.http1.Http1Codec$AbstractSource r0;
        okhttp3.internal.http1.Http1Codec $r1;
        okhttp3.internal.http1.Http1Codec$1 $r2;

        r0 := @this: okhttp3.internal.http1.Http1Codec$AbstractSource;

        $r1 := @parameter0: okhttp3.internal.http1.Http1Codec;

        $r2 := @parameter1: okhttp3.internal.http1.Http1Codec$1;

        specialinvoke r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: void <init>(okhttp3.internal.http1.Http1Codec)>($r1);

        return;
    }
    protected final void endOfInput(boolean) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$AbstractSource r0;
        boolean $z0;
        okhttp3.internal.http1.Http1Codec $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        okio.ForwardingTimeout $r5;
        okhttp3.internal.connection.StreamAllocation $r6;

        r0 := @this: okhttp3.internal.http1.Http1Codec$AbstractSource;

        $z0 := @parameter0: boolean;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $i0 = $r1.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 != 6 goto label1;

        return;

     label1:
        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $i0 = $r1.<okhttp3.internal.http1.Http1Codec: int state>;

        if $i0 == 5 goto label2;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state: ");

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $i0 = $r1.<okhttp3.internal.http1.Http1Codec: int state>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $r5 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okio.ForwardingTimeout timeout>;

        virtualinvoke $r1.<okhttp3.internal.http1.Http1Codec: void detachTimeout(okio.ForwardingTimeout)>($r5);

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $r1.<okhttp3.internal.http1.Http1Codec: int state> = 6;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $r6 = $r1.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        if $r6 == null goto label5;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        $r6 = $r1.<okhttp3.internal.http1.Http1Codec: okhttp3.internal.connection.StreamAllocation streamAllocation>;

        if $z0 != 0 goto label4;

        $z0 = 1;

     label3:
        $r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okhttp3.internal.http1.Http1Codec this$0>;

        virtualinvoke $r6.<okhttp3.internal.connection.StreamAllocation: void streamFinished(boolean,okhttp3.internal.http.HttpCodec)>($z0, $r1);

        return;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        return;
    }
    public okio.Timeout timeout()
    {
        okhttp3.internal.http1.Http1Codec$AbstractSource r0;
        okio.ForwardingTimeout r1;

        r0 := @this: okhttp3.internal.http1.Http1Codec$AbstractSource;

        r1 = r0.<okhttp3.internal.http1.Http1Codec$AbstractSource: okio.ForwardingTimeout timeout>;

        return r1;
    }
