okhttp3.internal.http1.Http1Codec$FixedLengthSink extends java.lang.Object implements okio.Sink
private long bytesRemaining
private boolean closed
final okhttp3.internal.http1.Http1Codec this$0
private final okio.ForwardingTimeout timeout
    void <init>(okhttp3.internal.http1.Http1Codec, long)
    {
        okhttp3.internal.http1.Http1Codec$FixedLengthSink r0;
        okhttp3.internal.http1.Http1Codec $r1;
        long $l0;
        okio.ForwardingTimeout $r2;
        okio.Timeout $r3;
        okio.BufferedSink $r4;

        r0 := @this: okhttp3.internal.http1.Http1Codec$FixedLengthSink;

        $r1 := @parameter0: okhttp3.internal.http1.Http1Codec;

        $l0 := @parameter1: long;

        r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okhttp3.internal.http1.Http1Codec this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new okio.ForwardingTimeout;

        $r1 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r4 = $r1.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        $r3 = interfaceinvoke $r4.<okio.BufferedSink: okio.Timeout timeout()>();

        specialinvoke $r2.<okio.ForwardingTimeout: void <init>(okio.Timeout)>($r3);

        r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okio.ForwardingTimeout timeout> = $r2;

        r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: long bytesRemaining> = $l0;

        return;
    }
    public void close() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$FixedLengthSink r0;
        boolean $z0;
        long $l0;
        byte $b1;
        java.net.ProtocolException $r1;
        okhttp3.internal.http1.Http1Codec $r2;
        okio.ForwardingTimeout $r3;

        r0 := @this: okhttp3.internal.http1.Http1Codec$FixedLengthSink;

        $z0 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: boolean closed> = 1;

        $l0 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: long bytesRemaining>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $r1 = new java.net.ProtocolException;

        specialinvoke $r1.<java.net.ProtocolException: void <init>(java.lang.String)>("unexpected end of stream");

        throw $r1;

     label2:
        $r2 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r3 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okio.ForwardingTimeout timeout>;

        virtualinvoke $r2.<okhttp3.internal.http1.Http1Codec: void detachTimeout(okio.ForwardingTimeout)>($r3);

        $r2 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r2.<okhttp3.internal.http1.Http1Codec: int state> = 3;

        return;
    }
    public void flush() throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$FixedLengthSink r0;
        boolean $z0;
        okhttp3.internal.http1.Http1Codec $r1;
        okio.BufferedSink $r2;

        r0 := @this: okhttp3.internal.http1.Http1Codec$FixedLengthSink;

        $z0 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r2 = $r1.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r2.<okio.BufferedSink: void flush()>();

        return;
    }
    public okio.Timeout timeout()
    {
        okhttp3.internal.http1.Http1Codec$FixedLengthSink r0;
        okio.ForwardingTimeout r1;

        r0 := @this: okhttp3.internal.http1.Http1Codec$FixedLengthSink;

        r1 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okio.ForwardingTimeout timeout>;

        return r1;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okhttp3.internal.http1.Http1Codec$FixedLengthSink r0;
        okio.Buffer $r1;
        long $l0, $l1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        byte $b2;
        java.net.ProtocolException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        okhttp3.internal.http1.Http1Codec $r6;
        okio.BufferedSink $r7;

        r0 := @this: okhttp3.internal.http1.Http1Codec$FixedLengthSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $z0 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label1:
        $l1 = virtualinvoke $r1.<okio.Buffer: long size()>();

        staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l1, 0L, $l0);

        $l1 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: long bytesRemaining>;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label2;

        $r3 = new java.net.ProtocolException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $l1 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: long bytesRemaining>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes but received ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.net.ProtocolException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: okhttp3.internal.http1.Http1Codec this$0>;

        $r7 = $r6.<okhttp3.internal.http1.Http1Codec: okio.BufferedSink sink>;

        interfaceinvoke $r7.<okio.BufferedSink: void write(okio.Buffer,long)>($r1, $l0);

        $l1 = r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: long bytesRemaining>;

        $l0 = $l1 - $l0;

        r0.<okhttp3.internal.http1.Http1Codec$FixedLengthSink: long bytesRemaining> = $l0;

        return;
    }
