okhttp3.HttpUrl$Builder extends java.lang.Object
java.lang.String encodedFragment
java.lang.String encodedPassword
final java.util.List encodedPathSegments
java.util.List encodedQueryNamesAndValues
java.lang.String encodedUsername
java.lang.String host
int port
java.lang.String scheme
    public void <init>()
    {
        okhttp3.HttpUrl$Builder r0;
        java.util.ArrayList $r1;
        java.util.List $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername> = "";

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = "";

        r0.<okhttp3.HttpUrl$Builder: int port> = -1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments> = $r1;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("");

        return;
    }
    private okhttp3.HttpUrl$Builder addPathSegments(java.lang.String, boolean)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        boolean $z0, z1;
        int i0, $i1, $i2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, i0, $i1, "/\\");

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label3;

        z1 = 1;

     label2:
        specialinvoke r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, i0, $i1, z1, $z0);

        i0 = $i1 + 1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 <= $i1 goto label1;

        return r0;

     label3:
        z1 = 0;

        goto label2;
    }
    private static java.lang.String canonicalizeHost(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        boolean $z0;
        java.net.InetAddress $r1;
        byte[] $r2;
        java.lang.AssertionError $r3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String percentDecode(java.lang.String,int,int,boolean)>($r0, $i0, $i1, 0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 + -1;

        $r1 = staticinvoke <okhttp3.HttpUrl$Builder: java.net.InetAddress decodeIpv6(java.lang.String,int,int)>($r0, 1, $i0);

     label1:
        if $r1 != null goto label3;

        return null;

     label2:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = staticinvoke <okhttp3.HttpUrl$Builder: java.net.InetAddress decodeIpv6(java.lang.String,int,int)>($r0, 0, $i0);

        goto label1;

     label3:
        $r2 = virtualinvoke $r1.<java.net.InetAddress: byte[] getAddress()>();

        $i0 = lengthof $r2;

        if $i0 != 16 goto label4;

        $r0 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String inet6AddressToAscii(byte[])>($r2);

        return $r0;

     label4:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label5:
        $r0 = staticinvoke <okhttp3.internal.Util: java.lang.String domainToAscii(java.lang.String)>($r0);

        return $r0;
    }
    private static boolean decodeIpv4Suffix(java.lang.String, int, int, byte[], int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2, i3, i4, i6;
        byte[] $r1;
        char $c5;
        byte $b7;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: byte[];

        $i2 := @parameter4: int;

        i4 = $i0;

        $i0 = $i2;

     label1:
        if i4 >= $i1 goto label8;

        i3 = lengthof $r1;

        if $i0 != i3 goto label2;

        return 0;

     label2:
        if $i0 == $i2 goto label3;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i4);

        if $c5 != 46 goto label9;

        i4 = i4 + 1;

     label3:
        i6 = 0;

        i3 = i4;

     label4:
        if i4 >= $i1 goto label5;

        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i4);

        if $c5 < 48 goto label5;

        if $c5 <= 57 goto label6;

     label5:
        i3 = i4 - i3;

        if i3 == 0 goto label9;

        $b7 = (byte) i6;

        $r1[$i0] = $b7;

        $i0 = $i0 + 1;

        goto label1;

     label6:
        if i6 != 0 goto label7;

        if i3 != i4 goto label9;

     label7:
        i6 = i6 * 10;

        i6 = i6 + $c5;

        i6 = i6 + -48;

        if i6 > 255 goto label9;

        i4 = i4 + 1;

        goto label4;

     label8:
        $i1 = $i2 + 4;

        if $i0 != $i1 goto label9;

        return 1;

     label9:
        return 0;
    }
    private static java.net.InetAddress decodeIpv6(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i8;
        byte[] r1;
        java.net.UnknownHostException r2;
        boolean $z0;
        char $c7;
        byte $b9;
        java.net.InetAddress $r3;
        java.lang.AssertionError $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r1 = newarray (byte)[16];

        i3 = 0;

        i4 = -1;

        i5 = -1;

     label01:
        if $i0 >= $i1 goto label04;

        $i6 = lengthof r1;

        if i3 != $i6 goto label02;

        return null;

     label02:
        $i6 = $i0 + 2;

        if $i6 > $i1 goto label05;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i0, "::", 0, 2);

        if $z0 == 0 goto label05;

        if i4 == -1 goto label03;

        return null;

     label03:
        $i0 = $i0 + 2;

        i3 = i3 + 2;

        i4 = i3;

        if $i0 != $i1 goto label06;

     label04:
        $i0 = lengthof r1;

        if i3 == $i0 goto label16;

        if i4 != -1 goto label15;

        return null;

     label05:
        if i3 == 0 goto label06;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i0, ":", 0, 1);

        if $z0 == 0 goto label10;

        $i0 = $i0 + 1;

     label06:
        $i6 = 0;

        i5 = $i0;

     label07:
        if $i0 >= $i1 goto label08;

        $c7 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        i2 = staticinvoke <okhttp3.HttpUrl: int decodeHexDigit(char)>($c7);

        if i2 != -1 goto label13;

     label08:
        i2 = $i0 - i5;

        if i2 == 0 goto label09;

        if i2 <= 4 goto label14;

     label09:
        return null;

     label10:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i0, ".", 0, 1);

        if $z0 == 0 goto label12;

        $i0 = i3 + -2;

        $z0 = staticinvoke <okhttp3.HttpUrl$Builder: boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int)>($r0, i5, $i1, r1, $i0);

        if $z0 != 0 goto label11;

        return null;

     label11:
        i3 = i3 + 2;

        goto label04;

     label12:
        return null;

     label13:
        $i6 = $i6 << 4;

        $i6 = $i6 + i2;

        $i0 = $i0 + 1;

        goto label07;

     label14:
        i2 = i3 + 1;

        $i8 = $i6 >>> 8;

        $i8 = $i8 & 255;

        $b9 = (byte) $i8;

        r1[i3] = $b9;

        i3 = i2 + 1;

        $i6 = $i6 & 255;

        $b9 = (byte) $i6;

        r1[i2] = $b9;

        goto label01;

     label15:
        $i0 = lengthof r1;

        $i1 = i3 - i4;

        $i0 = $i0 - $i1;

        $i1 = i3 - i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i4, r1, $i0, $i1);

        $i0 = lengthof r1;

        $i0 = $i0 - i3;

        $i0 = $i0 + i4;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>(r1, i4, $i0, 0);

     label16:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label17:
        return $r3;

     label18:
        r2 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

        catch java.net.UnknownHostException from label16 to label17 with label18;
    }
    private static java.lang.String inet6AddressToAscii(byte[])
    {
        byte[] $r0;
        int i0, i1, i2, i3, i4;
        okio.Buffer r1;
        java.lang.String $r2;
        byte $b5;
        long $l6;

        $r0 := @parameter0: byte[];

        i2 = -1;

        i3 = 0;

        i4 = 0;

     label1:
        i1 = lengthof $r0;

        if i4 >= i1 goto label5;

        i1 = i4;

     label2:
        if i4 >= 16 goto label3;

        $b5 = $r0[i4];

        if $b5 != 0 goto label3;

        i0 = i4 + 1;

        $b5 = $r0[i0];

        if $b5 != 0 goto label3;

        i4 = i4 + 2;

        goto label2;

     label3:
        i0 = i4 - i1;

        if i0 <= i3 goto label4;

        if i0 < 4 goto label4;

        i2 = i1;

        i3 = i0;

     label4:
        i4 = i4 + 2;

        goto label1;

     label5:
        r1 = new okio.Buffer;

        specialinvoke r1.<okio.Buffer: void <init>()>();

        i4 = 0;

     label6:
        i1 = lengthof $r0;

        if i4 >= i1 goto label9;

        if i4 != i2 goto label7;

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeByte(int)>(58);

        i4 = i4 + i3;

        if i4 != 16 goto label6;

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeByte(int)>(58);

        goto label6;

     label7:
        if i4 <= 0 goto label8;

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeByte(int)>(58);

     label8:
        $b5 = $r0[i4];

        i1 = $b5 & 255;

        i1 = i1 << 8;

        i0 = i4 + 1;

        $b5 = $r0[i0];

        i0 = $b5 & 255;

        i1 = i1 | i0;

        $l6 = (long) i1;

        virtualinvoke r1.<okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)>($l6);

        i4 = i4 + 2;

        goto label6;

     label9:
        $r2 = virtualinvoke r1.<okio.Buffer: java.lang.String readUtf8()>();

        return $r2;
    }
    private boolean isDot(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("%2e");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private boolean isDotDot(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("%2e.");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(".%2e");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("%2e%2e");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static int parsePort(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        java.lang.NumberFormatException r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $r0 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r0, $i0, $i1, "", 0, 0, 0, 1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        if $i0 <= 0 goto label3;

        if $i0 > 65535 goto label3;

        return $i0;

     label3:
        return -1;

     label4:
        r1 := @caughtexception;

        return -1;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }
    private void pop()
    {
        okhttp3.HttpUrl$Builder r0;
        java.util.List $r1, $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i0);

        r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, "");

        return;

     label1:
        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("");

        return;
    }
    private static int portColonOffset(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        lookupswitch($c2)
        {
            case 58: goto label5;
            case 91: goto label3;
            default: goto label2;
        };

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = $i0 + 1;

        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c2 != 93 goto label3;

        goto label2;

     label4:
        $i0 = $i1;

     label5:
        return $i0;
    }
    private void push(java.lang.String, int, int, boolean, boolean)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1, $r5;
        int $i0, $i1;
        boolean $z0, $z1;
        java.util.List $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 1);

        $z1 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1);

        if $z1 == 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void pop()>();

        return;

     label2:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = (java.lang.String) $r4;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i0 = $i0 + -1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r1);

     label3:
        if $z0 == 0 goto label5;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("");

        return;

     label4:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label3;

     label5:
        return;
    }
    private void removeAllCanonicalQueryParameters(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        int $i0, i1;
        java.util.List $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = $i0 + -2;

     label1:
        if i1 < 0 goto label3;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $i0 = i1 + 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>($i0);

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i1);

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues> = null;

        return;

     label2:
        i1 = i1 + -2;

        goto label1;

     label3:
        return;
    }
    private void resolvePath(java.lang.String, int, int)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        int $i0, $i1, $i3;
        char $c2;
        java.util.List $r2, $r3;
        boolean z0;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        if $i1 != $i0 goto label1;

        return;

     label1:
        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $c2 == 47 goto label2;

        if $c2 != 92 goto label5;

     label2:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("");

        $i1 = $i1 + 1;

     label3:
        if $i1 >= $i0 goto label7;

        $i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r1, $i1, $i0, "/\\");

        if $i3 >= $i0 goto label6;

        z0 = 1;

     label4:
        specialinvoke r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i1, $i3, z0, 1);

        $i1 = $i3;

        if z0 == 0 goto label3;

        $i1 = $i3 + 1;

        goto label3;

     label5:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = $i3 + -1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i3, "");

        goto label3;

     label6:
        z0 = 0;

        goto label4;

     label7:
        return;
    }
    private static int schemeDelimiterOffset(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        char $c3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $i1 - $i0;

        if $i2 >= 2 goto label01;

        return -1;

     label01:
        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c3 < 97 goto label02;

        if $c3 <= 122 goto label04;

     label02:
        if $c3 < 65 goto label03;

        if $c3 <= 90 goto label04;

     label03:
        return -1;

     label04:
        $i0 = $i0 + 1;

     label05:
        if $i0 >= $i1 goto label11;

        $c3 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        if $c3 < 97 goto label06;

        if $c3 <= 122 goto label09;

     label06:
        if $c3 < 65 goto label07;

        if $c3 <= 90 goto label09;

     label07:
        if $c3 < 48 goto label08;

        if $c3 <= 57 goto label09;

     label08:
        if $c3 == 43 goto label09;

        if $c3 == 45 goto label09;

        if $c3 != 46 goto label10;

     label09:
        $i0 = $i0 + 1;

        goto label05;

     label10:
        if $c3 == 58 goto label12;

     label11:
        return -1;

     label12:
        return $i0;
    }
    private static int slashCount(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i2, i3;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        $i2 := @parameter1: int;

        $i0 := @parameter2: int;

        i3 = 0;

     label1:
        if $i2 >= $i0 goto label3;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);

        if $c1 == 92 goto label2;

        if $c1 != 47 goto label3;

     label2:
        i3 = i3 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label3:
        return i3;
    }
    public okhttp3.HttpUrl$Builder addEncodedPathSegment(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        int $i0;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedPathSegment == null");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, 0, $i0, 0, 1);

        return r0;
    }
    public okhttp3.HttpUrl$Builder addEncodedPathSegments(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedPathSegments == null");

        throw $r2;

     label1:
        r0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean)>($r1, 1);

        return r0;
    }
    public okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        java.util.List $r4;
        java.util.ArrayList $r5;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedName == null");

        throw $r3;

     label1:
        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r4 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues> = $r5;

     label2:
        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 1, 0, 1, 1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r2 == null goto label4;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 1, 0, 1, 1);

     label3:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;

     label4:
        $r1 = null;

        goto label3;
    }
    public okhttp3.HttpUrl$Builder addPathSegment(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        int $i0;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("pathSegment == null");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, 0, $i0, 0, 0);

        return r0;
    }
    public okhttp3.HttpUrl$Builder addPathSegments(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("pathSegments == null");

        throw $r2;

     label1:
        r0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean)>($r1, 0);

        return r0;
    }
    public okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        java.util.List $r4;
        java.util.ArrayList $r5;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r3;

     label1:
        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r4 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues> = $r5;

     label2:
        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r2 == null goto label4;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r2, " \"\'<>#&=", 0, 0, 1, 1);

     label3:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;

     label4:
        $r1 = null;

        goto label3;
    }
    public okhttp3.HttpUrl build()
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.IllegalStateException $r2;
        okhttp3.HttpUrl $r3;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("scheme == null");

        throw $r2;

     label1:
        $r1 = r0.<okhttp3.HttpUrl$Builder: java.lang.String host>;

        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("host == null");

        throw $r2;

     label2:
        $r3 = new okhttp3.HttpUrl;

        specialinvoke $r3.<okhttp3.HttpUrl: void <init>(okhttp3.HttpUrl$Builder)>(r0);

        return $r3;
    }
    int effectivePort()
    {
        okhttp3.HttpUrl$Builder r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $i0 = r0.<okhttp3.HttpUrl$Builder: int port>;

        if $i0 == -1 goto label1;

        $i0 = r0.<okhttp3.HttpUrl$Builder: int port>;

        return $i0;

     label1:
        $r1 = r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        $i0 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r1);

        return $i0;
    }
    public okhttp3.HttpUrl$Builder encodedFragment(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, "", 1, 0, 0, 0);

     label1:
        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment> = $r1;

        return r0;

     label2:
        $r1 = null;

        goto label1;
    }
    public okhttp3.HttpUrl$Builder encodedPassword(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedPassword == null");

        throw $r2;

     label1:
        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#", 1, 0, 0, 1);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = $r1;

        return r0;
    }
    public okhttp3.HttpUrl$Builder encodedPath(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        int $i0;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedPath == null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected encodedPath: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r1, 0, $i0);

        return r0;
    }
    public okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.util.List $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#", 1, 0, 1, 1);

        $r2 = staticinvoke <okhttp3.HttpUrl: java.util.List queryStringToNamesAndValues(java.lang.String)>($r1);

     label1:
        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues> = $r2;

        return r0;

     label2:
        $r2 = null;

        goto label1;
    }
    public okhttp3.HttpUrl$Builder encodedUsername(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedUsername == null");

        throw $r2;

     label1:
        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#", 1, 0, 0, 1);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername> = $r1;

        return r0;
    }
    public okhttp3.HttpUrl$Builder fragment(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, "", 0, 0, 0, 0);

     label1:
        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment> = $r1;

        return r0;

     label2:
        $r1 = null;

        goto label1;
    }
    public okhttp3.HttpUrl$Builder host(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1, $r3;
        java.lang.NullPointerException $r2;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("host == null");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r1, 0, $i0);

        if $r3 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected host: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        r0.<okhttp3.HttpUrl$Builder: java.lang.String host> = $r3;

        return r0;
    }
    okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        okhttp3.HttpUrl $r1;
        java.lang.String $r2, $r3, $r4;
        int $i0, $i1, i2, $i3, $i5;
        boolean $z0, z1, $z2;
        char $c4;
        java.lang.StringBuilder $r5;
        java.util.List $r6, $r7;
        okhttp3.HttpUrl$Builder$ParseResult r8;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: okhttp3.HttpUrl;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = staticinvoke <okhttp3.internal.Util: int skipLeadingAsciiWhitespace(java.lang.String,int,int)>($r2, 0, $i0);

        i2 = $i1;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = staticinvoke <okhttp3.internal.Util: int skipTrailingAsciiWhitespace(java.lang.String,int,int)>($r2, $i1, $i0);

        $i3 = staticinvoke <okhttp3.HttpUrl$Builder: int schemeDelimiterOffset(java.lang.String,int,int)>($r2, $i1, $i0);

        if $i3 == -1 goto label09;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i1, "https:", 0, 6);

        if $z0 == 0 goto label07;

        r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme> = "https";

        $r3 = "https:";

        i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        i2 = $i1 + i2;

     label01:
        $z0 = 0;

        z1 = 0;

        $i1 = staticinvoke <okhttp3.HttpUrl$Builder: int slashCount(java.lang.String,int,int)>($r2, i2, $i0);

        if $i1 >= 2 goto label02;

        if $r1 == null goto label02;

        $r3 = $r1.<okhttp3.HttpUrl: java.lang.String scheme>;

        $r4 = r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label22;

     label02:
        $i1 = i2 + $i1;

     label03:
        i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, $i1, $i0, "@/\\?#");

        if i2 == $i0 goto label11;

        $i3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i2);

     label04:
        lookupswitch($i3)
        {
            case -1: goto label06;
            case 35: goto label06;
            case 47: goto label06;
            case 63: goto label06;
            case 64: goto label12;
            case 92: goto label06;
            default: goto label05;
        };

     label05:
        goto label03;

     label06:
        $i3 = staticinvoke <okhttp3.HttpUrl$Builder: int portColonOffset(java.lang.String,int,int)>($r2, $i1, i2);

        $i5 = $i3 + 1;

        if $i5 >= i2 goto label17;

        $r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i1, $i3);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String host> = $r3;

        $i1 = $i3 + 1;

        $i1 = staticinvoke <okhttp3.HttpUrl$Builder: int parsePort(java.lang.String,int,int)>($r2, $i1, i2);

        r0.<okhttp3.HttpUrl$Builder: int port> = $i1;

        $i1 = r0.<okhttp3.HttpUrl$Builder: int port>;

        if $i1 != -1 goto label18;

        r8 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT>;

        return r8;

     label07:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i1, "http:", 0, 5);

        if $z0 == 0 goto label08;

        r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme> = "http";

        $r3 = "http:";

        i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        i2 = $i1 + i2;

        goto label01;

     label08:
        r8 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME>;

        return r8;

     label09:
        if $r1 == null goto label10;

        $r3 = $r1.<okhttp3.HttpUrl: java.lang.String scheme>;

        r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme> = $r3;

        goto label01;

     label10:
        r8 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME>;

        return r8;

     label11:
        $i3 = -1;

        goto label04;

     label12:
        if z1 != 0 goto label16;

        $i3 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i1, i2, 58);

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $i1, $i3, " \"\':;<=>@[]^`{}|/\\?#", 1, 0, 0, 1);

        $r4 = $r3;

        if $z0 == 0 goto label13;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%40");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername> = $r4;

        if $i3 == i2 goto label14;

        z1 = 1;

        $i1 = $i3 + 1;

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $i1, i2, " \"\':;<=>@[]^`{}|/\\?#", 1, 0, 0, 1);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = $r3;

     label14:
        $z0 = 1;

     label15:
        $i1 = i2 + 1;

        goto label03;

     label16:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%40");

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $i1, i2, " \"\':;<=>@[]^`{}|/\\?#", 1, 0, 0, 1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = $r3;

        goto label15;

     label17:
        $r3 = staticinvoke <okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)>($r2, $i1, $i3);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String host> = $r3;

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        $i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r3);

        r0.<okhttp3.HttpUrl$Builder: int port> = $i1;

     label18:
        $r3 = r0.<okhttp3.HttpUrl$Builder: java.lang.String host>;

        if $r3 != null goto label19;

        r8 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST>;

        return r8;

     label19:
        $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,java.lang.String)>($r2, i2, $i0, "?#");

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, i2, $i1);

        i2 = $i1;

        if $i1 >= $i0 goto label20;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        if $c4 != 63 goto label20;

        i2 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,int,int,char)>($r2, $i1, $i0, 35);

        $i1 = $i1 + 1;

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, $i1, i2, " \"\'<>#", 1, 0, 1, 1);

        $r6 = staticinvoke <okhttp3.HttpUrl: java.util.List queryStringToNamesAndValues(java.lang.String)>($r3);

        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues> = $r6;

     label20:
        if i2 >= $i0 goto label21;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i2);

        if $c4 != 35 goto label21;

        i2 = i2 + 1;

        $r2 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r2, i2, $i0, "", 1, 0, 0, 0);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment> = $r2;

     label21:
        r8 = <okhttp3.HttpUrl$Builder$ParseResult: okhttp3.HttpUrl$Builder$ParseResult SUCCESS>;

        return r8;

     label22:
        $r3 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedUsername()>();

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername> = $r3;

        $r3 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedPassword()>();

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = $r3;

        $r3 = $r1.<okhttp3.HttpUrl: java.lang.String host>;

        r0.<okhttp3.HttpUrl$Builder: java.lang.String host> = $r3;

        $i1 = $r1.<okhttp3.HttpUrl: int port>;

        r0.<okhttp3.HttpUrl$Builder: int port> = $i1;

        $r6 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r6 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r7 = virtualinvoke $r1.<okhttp3.HttpUrl: java.util.List encodedPathSegments()>();

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        if i2 == $i0 goto label23;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i2);

        if $c4 != 35 goto label19;

     label23:
        $r3 = virtualinvoke $r1.<okhttp3.HttpUrl: java.lang.String encodedQuery()>();

        virtualinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r3);

        goto label19;
    }
    public okhttp3.HttpUrl$Builder password(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("password == null");

        throw $r2;

     label1:
        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#", 0, 0, 0, 1);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword> = $r1;

        return r0;
    }
    public okhttp3.HttpUrl$Builder port(int)
    {
        okhttp3.HttpUrl$Builder r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $i0 := @parameter0: int;

        if $i0 <= 0 goto label1;

        if $i0 <= 65535 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected port: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        r0.<okhttp3.HttpUrl$Builder: int port> = $i0;

        return r0;
    }
    public okhttp3.HttpUrl$Builder query(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.util.List $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#", 0, 0, 1, 1);

        $r2 = staticinvoke <okhttp3.HttpUrl: java.util.List queryStringToNamesAndValues(java.lang.String)>($r1);

     label1:
        r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues> = $r2;

        return r0;

     label2:
        $r2 = null;

        goto label1;
    }
    okhttp3.HttpUrl$Builder reencodeForUri()
    {
        okhttp3.HttpUrl$Builder r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String r3;

        r0 := @this: okhttp3.HttpUrl$Builder;

        i0 = 0;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label2;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.lang.String) $r2;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>(r3, "[]", 1, 1, 0, 1);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r3);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r1 == null goto label5;

        i0 = 0;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

     label3:
        if i0 >= $i1 goto label5;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (java.lang.String) $r2;

        if r3 == null goto label4;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>(r3, "\\^`{|}", 1, 1, 1, 1);

        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r3);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        r3 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment>;

        if r3 == null goto label6;

        r3 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment>;

        r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>(r3, " \"#<>\\^`{|}", 1, 1, 0, 0);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment> = r3;

     label6:
        return r0;
    }
    public okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedName == null");

        throw $r2;

     label1:
        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r3 != null goto label2;

        return r0;

     label2:
        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 1, 0, 1, 1);

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void removeAllCanonicalQueryParameters(java.lang.String)>($r1);

        return r0;
    }
    public okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        java.util.List $r3;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r2;

     label1:
        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r3 != null goto label2;

        return r0;

     label2:
        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\'<>#&=", 0, 0, 1, 1);

        specialinvoke r0.<okhttp3.HttpUrl$Builder: void removeAllCanonicalQueryParameters(java.lang.String)>($r1);

        return r0;
    }
    public okhttp3.HttpUrl$Builder removePathSegment(int)
    {
        okhttp3.HttpUrl$Builder r0;
        int $i0;
        boolean $z0;
        java.util.List $r1;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $i0 := @parameter0: int;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i0);

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("");

     label1:
        return r0;
    }
    public okhttp3.HttpUrl$Builder scheme(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("scheme == null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("http");

        if $z0 == 0 goto label2;

        r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme> = "http";

        return r0;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("https");

        if $z0 == 0 goto label3;

        r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme> = "https";

        return r0;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected scheme: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }
    public okhttp3.HttpUrl$Builder setEncodedPathSegment(int, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        java.lang.NullPointerException $r2;
        java.util.List $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodedPathSegment == null");

        throw $r2;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, 0, $i1, " \"<>^`{}|/\\?#", 1, 0, 0, 1);

        $r4 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r3);

        $z0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r3);

        if $z0 != 0 goto label2;

        $z0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected path segment: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label3:
        return r0;
    }
    public okhttp3.HttpUrl$Builder setEncodedQueryParameter(java.lang.String, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1, $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String)>($r1);

        virtualinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public okhttp3.HttpUrl$Builder setPathSegment(int, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.util.List $r6;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("pathSegment == null");

        throw $r2;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r3 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean)>($r1, 0, $i1, " \"<>^`{}|/\\?#", 0, 0, 0, 1);

        $z0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r3);

        if $z0 != 0 goto label2;

        $z0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected path segment: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        $r6 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r3);

        return r0;
    }
    public okhttp3.HttpUrl$Builder setQueryParameter(java.lang.String, java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1, $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String)>($r1);

        virtualinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String)>($r1, $r2);

        return r0;
    }
    public java.lang.String toString()
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        boolean $z0;
        int $i0, $i1;
        java.util.List $r3;

        r0 := @this: okhttp3.HttpUrl$Builder;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label3;

     label1:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedPassword>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

     label3:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String host>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(58);

        if $i0 == -1 goto label8;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String host>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label4:
        $i0 = virtualinvoke r0.<okhttp3.HttpUrl$Builder: int effectivePort()>();

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String scheme>;

        $i1 = staticinvoke <okhttp3.HttpUrl: int defaultPort(java.lang.String)>($r2);

        if $i0 == $i1 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label5:
        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedPathSegments>;

        staticinvoke <okhttp3.HttpUrl: void pathSegmentsToString(java.lang.StringBuilder,java.util.List)>(r1, $r3);

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        if $r3 == null goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        $r3 = r0.<okhttp3.HttpUrl$Builder: java.util.List encodedQueryNamesAndValues>;

        staticinvoke <okhttp3.HttpUrl: void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List)>(r1, $r3);

     label6:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment>;

        if $r2 == null goto label7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedFragment>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label7:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label8:
        $r2 = r0.<okhttp3.HttpUrl$Builder: java.lang.String host>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        goto label4;
    }
    public okhttp3.HttpUrl$Builder username(java.lang.String)
    {
        okhttp3.HttpUrl$Builder r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        r0 := @this: okhttp3.HttpUrl$Builder;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("username == null");

        throw $r2;

     label1:
        $r1 = staticinvoke <okhttp3.HttpUrl: java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean)>($r1, " \"\':;<=>@[]^`{}|/\\?#", 0, 0, 0, 1);

        r0.<okhttp3.HttpUrl$Builder: java.lang.String encodedUsername> = $r1;

        return r0;
    }
