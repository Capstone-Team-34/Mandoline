okhttp3.MultipartBody extends okhttp3.RequestBody
public static final okhttp3.MediaType ALTERNATIVE
private static final byte[] COLONSPACE
private static final byte[] CRLF
private static final byte[] DASHDASH
public static final okhttp3.MediaType DIGEST
public static final okhttp3.MediaType FORM
public static final okhttp3.MediaType MIXED
public static final okhttp3.MediaType PARALLEL
private final okio.ByteString boundary
private long contentLength
private final okhttp3.MediaType contentType
private final okhttp3.MediaType originalType
private final java.util.List parts
    static void <clinit>()
    {
        okhttp3.MediaType $r0;
        byte[] $r1;

        $r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("multipart/mixed");

        <okhttp3.MultipartBody: okhttp3.MediaType MIXED> = $r0;

        $r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("multipart/alternative");

        <okhttp3.MultipartBody: okhttp3.MediaType ALTERNATIVE> = $r0;

        $r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("multipart/digest");

        <okhttp3.MultipartBody: okhttp3.MediaType DIGEST> = $r0;

        $r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("multipart/parallel");

        <okhttp3.MultipartBody: okhttp3.MediaType PARALLEL> = $r0;

        $r0 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("multipart/form-data");

        <okhttp3.MultipartBody: okhttp3.MediaType FORM> = $r0;

        $r1 = newarray (byte)[2];

        $r1[0] = 58;

        $r1[1] = 32;

        <okhttp3.MultipartBody: byte[] COLONSPACE> = $r1;

        $r1 = newarray (byte)[2];

        $r1[0] = 13;

        $r1[1] = 10;

        <okhttp3.MultipartBody: byte[] CRLF> = $r1;

        $r1 = newarray (byte)[2];

        $r1[0] = 45;

        $r1[1] = 45;

        <okhttp3.MultipartBody: byte[] DASHDASH> = $r1;

        return;
    }
    void <init>(okio.ByteString, okhttp3.MediaType, java.util.List)
    {
        okhttp3.MultipartBody r0;
        okio.ByteString $r1;
        okhttp3.MediaType $r2;
        java.util.List r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: okhttp3.MultipartBody;

        $r1 := @parameter0: okio.ByteString;

        $r2 := @parameter1: okhttp3.MediaType;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<okhttp3.RequestBody: void <init>()>();

        r0.<okhttp3.MultipartBody: long contentLength> = -1L;

        r0.<okhttp3.MultipartBody: okio.ByteString boundary> = $r1;

        r0.<okhttp3.MultipartBody: okhttp3.MediaType originalType> = $r2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; boundary=");

        $r5 = virtualinvoke $r1.<okio.ByteString: java.lang.String utf8()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r5);

        r0.<okhttp3.MultipartBody: okhttp3.MediaType contentType> = $r2;

        r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableList(java.util.List)>(r3);

        r0.<okhttp3.MultipartBody: java.util.List parts> = r3;

        return;
    }
    static java.lang.StringBuilder appendQuotedString(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        int i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        i0 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        if i0 >= $i1 goto label7;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i0);

        lookupswitch($c2)
        {
            case 10: goto label4;
            case 13: goto label5;
            case 34: goto label6;
            default: goto label2;
        };

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%0A");

        goto label3;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%0D");

        goto label3;

     label6:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%22");

        goto label3;

     label7:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        return $r0;
    }
    private long writeOrCountBytes(okio.BufferedSink, boolean) throws java.io.IOException
    {
        okhttp3.MultipartBody r0;
        boolean $z0;
        okhttp3.RequestBody r1;
        okhttp3.Headers r2;
        okio.BufferedSink $r3, $r11;
        long l0, $l5;
        okio.Buffer r4;
        int i1, $i2, i3, $i4;
        java.util.List $r5;
        java.lang.Object $r6;
        okhttp3.MultipartBody$Part r7;
        byte[] $r8;
        okio.ByteString $r9;
        java.lang.String $r10;
        okhttp3.MediaType $r12;
        byte $b6;

        r0 := @this: okhttp3.MultipartBody;

        $r3 := @parameter0: okio.BufferedSink;

        $z0 := @parameter1: boolean;

        l0 = 0L;

        r4 = null;

        if $z0 == 0 goto label01;

        r4 = new okio.Buffer;

        specialinvoke r4.<okio.Buffer: void <init>()>();

        $r3 = r4;

     label01:
        i1 = 0;

        $r5 = r0.<okhttp3.MultipartBody: java.util.List parts>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

     label02:
        if i1 >= $i2 goto label10;

        $r5 = r0.<okhttp3.MultipartBody: java.util.List parts>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (okhttp3.MultipartBody$Part) $r6;

        r2 = r7.<okhttp3.MultipartBody$Part: okhttp3.Headers headers>;

        r1 = r7.<okhttp3.MultipartBody$Part: okhttp3.RequestBody body>;

        $r8 = <okhttp3.MultipartBody: byte[] DASHDASH>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        $r9 = r0.<okhttp3.MultipartBody: okio.ByteString boundary>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(okio.ByteString)>($r9);

        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        if r2 == null goto label04;

        i3 = 0;

        $i4 = virtualinvoke r2.<okhttp3.Headers: int size()>();

     label03:
        if i3 >= $i4 goto label04;

        $r10 = virtualinvoke r2.<okhttp3.Headers: java.lang.String name(int)>(i3);

        $r11 = interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r10);

        $r8 = <okhttp3.MultipartBody: byte[] COLONSPACE>;

        $r11 = interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        $r10 = virtualinvoke r2.<okhttp3.Headers: java.lang.String value(int)>(i3);

        $r11 = interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r10);

        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        i3 = i3 + 1;

        goto label03;

     label04:
        $r12 = virtualinvoke r1.<okhttp3.RequestBody: okhttp3.MediaType contentType()>();

        if $r12 == null goto label05;

        $r11 = interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("Content-Type: ");

        $r10 = virtualinvoke $r12.<okhttp3.MediaType: java.lang.String toString()>();

        $r11 = interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>($r10);

        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

     label05:
        $l5 = virtualinvoke r1.<okhttp3.RequestBody: long contentLength()>();

        $b6 = $l5 cmp -1L;

        if $b6 == 0 goto label08;

        $r11 = interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink writeUtf8(java.lang.String)>("Content-Length: ");

        $r11 = interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink writeDecimalLong(long)>($l5);

        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r11.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

     label06:
        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        if $z0 == 0 goto label09;

        l0 = l0 + $l5;

     label07:
        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        i1 = i1 + 1;

        goto label02;

     label08:
        if $z0 == 0 goto label06;

        virtualinvoke r4.<okio.Buffer: void clear()>();

        return -1L;

     label09:
        virtualinvoke r1.<okhttp3.RequestBody: void writeTo(okio.BufferedSink)>($r3);

        goto label07;

     label10:
        $r8 = <okhttp3.MultipartBody: byte[] DASHDASH>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        $r9 = r0.<okhttp3.MultipartBody: okio.ByteString boundary>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(okio.ByteString)>($r9);

        $r8 = <okhttp3.MultipartBody: byte[] DASHDASH>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        $r8 = <okhttp3.MultipartBody: byte[] CRLF>;

        interfaceinvoke $r3.<okio.BufferedSink: okio.BufferedSink write(byte[])>($r8);

        if $z0 == 0 goto label11;

        $l5 = virtualinvoke r4.<okio.Buffer: long size()>();

        l0 = l0 + $l5;

        virtualinvoke r4.<okio.Buffer: void clear()>();

     label11:
        return l0;
    }
    public java.lang.String boundary()
    {
        okhttp3.MultipartBody r0;
        java.lang.String $r1;
        okio.ByteString $r2;

        r0 := @this: okhttp3.MultipartBody;

        $r2 = r0.<okhttp3.MultipartBody: okio.ByteString boundary>;

        $r1 = virtualinvoke $r2.<okio.ByteString: java.lang.String utf8()>();

        return $r1;
    }
    public long contentLength() throws java.io.IOException
    {
        okhttp3.MultipartBody r0;
        long $l0;
        byte $b1;

        r0 := @this: okhttp3.MultipartBody;

        $l0 = r0.<okhttp3.MultipartBody: long contentLength>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        return $l0;

     label1:
        $l0 = specialinvoke r0.<okhttp3.MultipartBody: long writeOrCountBytes(okio.BufferedSink,boolean)>(null, 1);

        r0.<okhttp3.MultipartBody: long contentLength> = $l0;

        return $l0;
    }
    public okhttp3.MediaType contentType()
    {
        okhttp3.MultipartBody r0;
        okhttp3.MediaType r1;

        r0 := @this: okhttp3.MultipartBody;

        r1 = r0.<okhttp3.MultipartBody: okhttp3.MediaType contentType>;

        return r1;
    }
    public okhttp3.MultipartBody$Part part(int)
    {
        okhttp3.MultipartBody r0;
        int $i0;
        java.lang.Object $r1;
        java.util.List $r2;
        okhttp3.MultipartBody$Part $r3;

        r0 := @this: okhttp3.MultipartBody;

        $i0 := @parameter0: int;

        $r2 = r0.<okhttp3.MultipartBody: java.util.List parts>;

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (okhttp3.MultipartBody$Part) $r1;

        return $r3;
    }
    public java.util.List parts()
    {
        okhttp3.MultipartBody r0;
        java.util.List r1;

        r0 := @this: okhttp3.MultipartBody;

        r1 = r0.<okhttp3.MultipartBody: java.util.List parts>;

        return r1;
    }
    public int size()
    {
        okhttp3.MultipartBody r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: okhttp3.MultipartBody;

        $r1 = r0.<okhttp3.MultipartBody: java.util.List parts>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }
    public okhttp3.MediaType type()
    {
        okhttp3.MultipartBody r0;
        okhttp3.MediaType r1;

        r0 := @this: okhttp3.MultipartBody;

        r1 = r0.<okhttp3.MultipartBody: okhttp3.MediaType originalType>;

        return r1;
    }
    public void writeTo(okio.BufferedSink) throws java.io.IOException
    {
        okhttp3.MultipartBody r0;
        okio.BufferedSink $r1;

        r0 := @this: okhttp3.MultipartBody;

        $r1 := @parameter0: okio.BufferedSink;

        specialinvoke r0.<okhttp3.MultipartBody: long writeOrCountBytes(okio.BufferedSink,boolean)>($r1, 0);

        return;
    }
