de.cketti.safecontentresolver.Blacklist extends java.lang.Object
private static final java.lang.String META_DATA_KEY_ALLOW_INTERNAL_ACCESS
private java.util.Set blacklistedAuthorities
private final android.content.Context context
    void <init>(android.content.Context)
    {
        de.cketti.safecontentresolver.Blacklist r0;
        android.content.Context $r1;

        r0 := @this: de.cketti.safecontentresolver.Blacklist;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<de.cketti.safecontentresolver.Blacklist: android.content.Context context> = $r1;

        return;
    }
    private java.util.Set findBlacklistedContentProviderAuthorities()
    {
        de.cketti.safecontentresolver.Blacklist r0;
        java.util.HashSet r1;
        android.content.pm.ProviderInfo r2;
        int $i0, $i1;
        android.content.Context $r3;
        android.content.pm.ProviderInfo[] $r4;
        boolean $z0;
        java.lang.String $r5;
        java.lang.String[] $r6;

        r0 := @this: de.cketti.safecontentresolver.Blacklist;

        $r3 = r0.<de.cketti.safecontentresolver.Blacklist: android.content.Context context>;

        $r4 = specialinvoke r0.<de.cketti.safecontentresolver.Blacklist: android.content.pm.ProviderInfo[] getProviderInfo(android.content.Context)>($r3);

        r1 = new java.util.HashSet;

        $i0 = lengthof $r4;

        specialinvoke r1.<java.util.HashSet: void <init>(int)>($i0);

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r2 = $r4[$i1];

        $z0 = specialinvoke r0.<de.cketti.safecontentresolver.Blacklist: boolean isContentProviderWhitelisted(android.content.pm.ProviderInfo)>(r2);

        if $z0 != 0 goto label2;

        $r5 = r2.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, $r6);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return r1;
    }
    private android.content.pm.ProviderInfo[] getProviderInfo(android.content.Context)
    {
        de.cketti.safecontentresolver.Blacklist r0;
        android.content.Context $r1;
        android.content.pm.PackageManager$NameNotFoundException r2;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4;
        android.content.pm.PackageInfo $r5;
        android.content.pm.ProviderInfo[] r6;
        java.lang.RuntimeException $r7;

        r0 := @this: de.cketti.safecontentresolver.Blacklist;

        $r1 := @parameter0: android.content.Context;

     label1:
        $r3 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 136);

     label2:
        r6 = $r5.<android.content.pm.PackageInfo: android.content.pm.ProviderInfo[] providers>;

        if r6 == null goto label3;

        return r6;

     label3:
        r6 = newarray (android.content.pm.ProviderInfo)[0];

        return r6;

     label4:
        r2 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r7;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }
    private boolean isContentProviderWhitelisted(android.content.pm.ProviderInfo)
    {
        de.cketti.safecontentresolver.Blacklist r0;
        android.content.pm.ProviderInfo $r1;
        android.os.Bundle r2;
        boolean $z0;

        r0 := @this: de.cketti.safecontentresolver.Blacklist;

        $r1 := @parameter0: android.content.pm.ProviderInfo;

        r2 = $r1.<android.content.pm.ProviderInfo: android.os.Bundle metaData>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("de.cketti.safecontentresolver.ALLOW_INTERNAL_ACCESS", 0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean isBlacklisted(java.lang.String)
    {
        de.cketti.safecontentresolver.Blacklist r0;
        java.lang.String $r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: de.cketti.safecontentresolver.Blacklist;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r2 = r0.<de.cketti.safecontentresolver.Blacklist: java.util.Set blacklistedAuthorities>;

        if $r2 != null goto label2;

        $r2 = specialinvoke r0.<de.cketti.safecontentresolver.Blacklist: java.util.Set findBlacklistedContentProviderAuthorities()>();

        r0.<de.cketti.safecontentresolver.Blacklist: java.util.Set blacklistedAuthorities> = $r2;

     label2:
        $r2 = r0.<de.cketti.safecontentresolver.Blacklist: java.util.Set blacklistedAuthorities>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }
