com.bumptech.glide.signature.ApplicationVersionSignature extends java.lang.Object
private static final java.util.concurrent.ConcurrentHashMap PACKAGE_NAME_TO_KEY
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <com.bumptech.glide.signature.ApplicationVersionSignature: java.util.concurrent.ConcurrentHashMap PACKAGE_NAME_TO_KEY> = $r0;

        return;
    }
    private void <init>()
    {
        com.bumptech.glide.signature.ApplicationVersionSignature r0;

        r0 := @this: com.bumptech.glide.signature.ApplicationVersionSignature;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static com.bumptech.glide.load.Key obtain(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        com.bumptech.glide.load.Key r4, r5;

        $r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r2 = <com.bumptech.glide.signature.ApplicationVersionSignature: java.util.concurrent.ConcurrentHashMap PACKAGE_NAME_TO_KEY>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.bumptech.glide.load.Key) $r3;

        if r4 != null goto label1;

        r4 = staticinvoke <com.bumptech.glide.signature.ApplicationVersionSignature: com.bumptech.glide.load.Key obtainVersionSignature(android.content.Context)>($r0);

        $r2 = <com.bumptech.glide.signature.ApplicationVersionSignature: java.util.concurrent.ConcurrentHashMap PACKAGE_NAME_TO_KEY>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, r4);

        r5 = (com.bumptech.glide.load.Key) $r3;

        if r5 != null goto label2;

     label1:
        return r4;

     label2:
        return r5;
    }
    private static com.bumptech.glide.load.Key obtainVersionSignature(android.content.Context)
    {
        android.content.Context $r0;
        android.content.pm.PackageManager$NameNotFoundException r1;
        android.content.pm.PackageInfo r2, $r5;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4;
        int $i0;
        com.bumptech.glide.signature.StringSignature $r6;
        java.util.UUID $r7;

        $r0 := @parameter0: android.content.Context;

        r2 = null;

     label1:
        $r3 = virtualinvoke $r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r0.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 0);

     label2:
        r2 = $r5;

     label3:
        if r2 == null goto label6;

        $i0 = r2.<android.content.pm.PackageInfo: int versionCode>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

     label4:
        $r6 = new com.bumptech.glide.signature.StringSignature;

        specialinvoke $r6.<com.bumptech.glide.signature.StringSignature: void <init>(java.lang.String)>($r4);

        return $r6;

     label5:
        r1 := @caughtexception;

        virtualinvoke r1.<android.content.pm.PackageManager$NameNotFoundException: void printStackTrace()>();

        goto label3;

     label6:
        $r7 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r4 = virtualinvoke $r7.<java.util.UUID: java.lang.String toString()>();

        goto label4;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
    }
    static void reset()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = <com.bumptech.glide.signature.ApplicationVersionSignature: java.util.concurrent.ConcurrentHashMap PACKAGE_NAME_TO_KEY>;

        virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }
