com.bumptech.glide.provider.DataLoadProviderRegistry extends java.lang.Object
private static final com.bumptech.glide.util.MultiClassKey GET_KEY
private final java.util.Map providers
    static void <clinit>()
    {
        com.bumptech.glide.util.MultiClassKey $r0;

        $r0 = new com.bumptech.glide.util.MultiClassKey;

        specialinvoke $r0.<com.bumptech.glide.util.MultiClassKey: void <init>()>();

        <com.bumptech.glide.provider.DataLoadProviderRegistry: com.bumptech.glide.util.MultiClassKey GET_KEY> = $r0;

        return;
    }
    public void <init>()
    {
        com.bumptech.glide.provider.DataLoadProviderRegistry r0;
        java.util.HashMap $r1;

        r0 := @this: com.bumptech.glide.provider.DataLoadProviderRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.bumptech.glide.provider.DataLoadProviderRegistry: java.util.Map providers> = $r1;

        return;
    }
    public com.bumptech.glide.provider.DataLoadProvider get(java.lang.Class, java.lang.Class)
    {
        com.bumptech.glide.provider.DataLoadProviderRegistry r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.util.MultiClassKey $r3, $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        com.bumptech.glide.provider.DataLoadProvider r7;
        java.lang.Throwable $r8;

        r0 := @this: com.bumptech.glide.provider.DataLoadProviderRegistry;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r3 = <com.bumptech.glide.provider.DataLoadProviderRegistry: com.bumptech.glide.util.MultiClassKey GET_KEY>;

        entermonitor $r3;

     label1:
        $r4 = <com.bumptech.glide.provider.DataLoadProviderRegistry: com.bumptech.glide.util.MultiClassKey GET_KEY>;

        virtualinvoke $r4.<com.bumptech.glide.util.MultiClassKey: void set(java.lang.Class,java.lang.Class)>(r1, r2);

        $r5 = r0.<com.bumptech.glide.provider.DataLoadProviderRegistry: java.util.Map providers>;

        $r4 = <com.bumptech.glide.provider.DataLoadProviderRegistry: com.bumptech.glide.util.MultiClassKey GET_KEY>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r7 = (com.bumptech.glide.provider.DataLoadProvider) $r6;

        exitmonitor $r3;

     label2:
        if r7 != null goto label6;

        r7 = staticinvoke <com.bumptech.glide.provider.EmptyDataLoadProvider: com.bumptech.glide.provider.DataLoadProvider get()>();

        return r7;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor $r3;

     label5:
        throw $r8;

     label6:
        return r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
    public void register(java.lang.Class, java.lang.Class, com.bumptech.glide.provider.DataLoadProvider)
    {
        com.bumptech.glide.provider.DataLoadProviderRegistry r0;
        java.lang.Class r1, r2;
        com.bumptech.glide.provider.DataLoadProvider r3;
        java.util.Map $r4;
        com.bumptech.glide.util.MultiClassKey $r5;

        r0 := @this: com.bumptech.glide.provider.DataLoadProviderRegistry;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: com.bumptech.glide.provider.DataLoadProvider;

        $r4 = r0.<com.bumptech.glide.provider.DataLoadProviderRegistry: java.util.Map providers>;

        $r5 = new com.bumptech.glide.util.MultiClassKey;

        specialinvoke $r5.<com.bumptech.glide.util.MultiClassKey: void <init>(java.lang.Class,java.lang.Class)>(r1, r2);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r3);

        return;
    }
