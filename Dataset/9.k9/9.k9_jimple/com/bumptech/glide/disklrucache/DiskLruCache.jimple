com.bumptech.glide.disklrucache.DiskLruCache extends java.lang.Object implements java.io.Closeable
static final long ANY_SEQUENCE_NUMBER
private static final java.lang.String CLEAN
private static final java.lang.String DIRTY
static final java.lang.String JOURNAL_FILE
static final java.lang.String JOURNAL_FILE_BACKUP
static final java.lang.String JOURNAL_FILE_TEMP
static final java.lang.String MAGIC
private static final java.lang.String READ
private static final java.lang.String REMOVE
static final java.lang.String VERSION_1
private final int appVersion
private final java.util.concurrent.Callable cleanupCallable
private final java.io.File directory
final java.util.concurrent.ThreadPoolExecutor executorService
private final java.io.File journalFile
private final java.io.File journalFileBackup
private final java.io.File journalFileTmp
private java.io.Writer journalWriter
private final java.util.LinkedHashMap lruEntries
private long maxSize
private long nextSequenceNumber
private int redundantOpCount
private long size
private final int valueCount
    private void <init>(java.io.File, int, int, long)
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.File $r1, $r7;
        int $i0, $i1;
        long $l2;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.util.LinkedHashMap $r4;
        java.util.concurrent.ThreadPoolExecutor $r5;
        com.bumptech.glide.disklrucache.DiskLruCache$1 $r6;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size> = 0L;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(0, 0.75F, 1);

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries> = $r4;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long nextSequenceNumber> = 0L;

        $r5 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(0, 1, 60L, $r2, $r3);

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService> = $r5;

        $r6 = new com.bumptech.glide.disklrucache.DiskLruCache$1;

        specialinvoke $r6.<com.bumptech.glide.disklrucache.DiskLruCache$1: void <init>(com.bumptech.glide.disklrucache.DiskLruCache)>(r0);

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable> = $r6;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File directory> = $r1;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: int appVersion> = $i0;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "journal");

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile> = $r7;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "journal.tmp");

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileTmp> = $r7;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "journal.bkp");

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileBackup> = $r7;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount> = $i1;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long maxSize> = $l2;

        return;
    }
    static java.io.Writer access$000(com.bumptech.glide.disklrucache.DiskLruCache)
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        java.io.Writer r1;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        r1 = $r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        return r1;
    }
    static void access$100(com.bumptech.glide.disklrucache.DiskLruCache) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        specialinvoke $r0.<com.bumptech.glide.disklrucache.DiskLruCache: void trimToSize()>();

        return;
    }
    static com.bumptech.glide.disklrucache.DiskLruCache$Editor access$1600(com.bumptech.glide.disklrucache.DiskLruCache, java.lang.String, long) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        java.lang.String $r1;
        long $l0;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r2;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $r2 = specialinvoke $r0.<com.bumptech.glide.disklrucache.DiskLruCache: com.bumptech.glide.disklrucache.DiskLruCache$Editor edit(java.lang.String,long)>($r1, $l0);

        return $r2;
    }
    static java.lang.String access$1700(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: java.lang.String inputStreamToString(java.io.InputStream)>($r0);

        return $r1;
    }
    static int access$1800(com.bumptech.glide.disklrucache.DiskLruCache)
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        int i0;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        i0 = $r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        return i0;
    }
    static java.io.File access$1900(com.bumptech.glide.disklrucache.DiskLruCache)
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        java.io.File r1;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        r1 = $r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File directory>;

        return r1;
    }
    static boolean access$200(com.bumptech.glide.disklrucache.DiskLruCache)
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        boolean $z0;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        $z0 = specialinvoke $r0.<com.bumptech.glide.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        return $z0;
    }
    static void access$2000(com.bumptech.glide.disklrucache.DiskLruCache, com.bumptech.glide.disklrucache.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r1;
        boolean $z0;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter1: com.bumptech.glide.disklrucache.DiskLruCache$Editor;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<com.bumptech.glide.disklrucache.DiskLruCache: void completeEdit(com.bumptech.glide.disklrucache.DiskLruCache$Editor,boolean)>($r1, $z0);

        return;
    }
    static void access$300(com.bumptech.glide.disklrucache.DiskLruCache) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        specialinvoke $r0.<com.bumptech.glide.disklrucache.DiskLruCache: void rebuildJournal()>();

        return;
    }
    static int access$402(com.bumptech.glide.disklrucache.DiskLruCache, int)
    {
        com.bumptech.glide.disklrucache.DiskLruCache $r0;
        int $i0;

        $r0 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache;

        $i0 := @parameter1: int;

        $r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount> = $i0;

        return $i0;
    }
    private void checkNotClosed()
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.Writer $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cache is closed");

        throw $r2;

     label1:
        return;
    }
    private void completeEdit(com.bumptech.glide.disklrucache.DiskLruCache$Editor, boolean) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r1, $r3;
        boolean $z0, $z1;
        long l0, $l3, $l4;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry $r2;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;
        int i1, $i2;
        boolean[] $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.io.File $r9, $r10;
        long[] $r11;
        java.io.Writer $r12;
        byte $b5;
        java.util.concurrent.ThreadPoolExecutor $r13;
        java.util.concurrent.Callable $r14;
        java.util.LinkedHashMap $r15;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: com.bumptech.glide.disklrucache.DiskLruCache$Editor;

        $z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        $r2 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Editor: com.bumptech.glide.disklrucache.DiskLruCache$Entry access$1400(com.bumptech.glide.disklrucache.DiskLruCache$Editor)>($r1);

        $r3 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        if $r3 == $r1 goto label03;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label02:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

     label03:
        if $z0 == 0 goto label09;

     label04:
        $z1 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: boolean access$600(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        if $z1 != 0 goto label09;

        i1 = 0;

     label05:
        $i2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label09;

        $r6 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Editor: boolean[] access$1500(com.bumptech.glide.disklrucache.DiskLruCache$Editor)>($r1);

        $z1 = $r6[i1];

        if $z1 != 0 goto label06;

        virtualinvoke $r1.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void abort()>();

        $r4 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Newly created entry didn\'t create value for index ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label06:
        $r9 = virtualinvoke $r2.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i1);

        $z1 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label08;

        virtualinvoke $r1.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void abort()>();

     label07:
        exitmonitor r0;

        return;

     label08:
        i1 = i1 + 1;

        goto label05;

     label09:
        i1 = 0;

     label10:
        $i2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label13;

        $r9 = virtualinvoke $r2.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i1);

        if $z0 == 0 goto label12;

        $z1 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label11;

        $r10 = virtualinvoke $r2.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i1);

        virtualinvoke $r9.<java.io.File: boolean renameTo(java.io.File)>($r10);

        $r11 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long[] access$1000(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        l0 = $r11[i1];

        $l3 = virtualinvoke $r10.<java.io.File: long length()>();

        $r11 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long[] access$1000(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        $r11[i1] = $l3;

        $l4 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size>;

        l0 = $l4 - l0;

        $l3 = l0 + $l3;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size> = $l3;

     label11:
        i1 = i1 + 1;

        goto label10;

     label12:
        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r9);

        goto label11;

     label13:
        i1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount>;

        i1 = i1 + 1;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount> = i1;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$702(com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$Editor)>($r2, null);

        $z1 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: boolean access$600(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        $z1 = $z1 | $z0;

        if $z1 == 0 goto label16;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: boolean access$602(com.bumptech.glide.disklrucache.DiskLruCache$Entry,boolean)>($r2, 1);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("CLEAN");

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(char)>(32);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r8);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r8 = virtualinvoke $r2.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String getLengths()>();

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r8);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(char)>(10);

        if $z0 == 0 goto label14;

        $l3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long nextSequenceNumber>;

        l0 = 1L + $l3;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long nextSequenceNumber> = l0;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long access$1202(com.bumptech.glide.disklrucache.DiskLruCache$Entry,long)>($r2, $l3);

     label14:
        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: void flush()>();

        $l3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size>;

        l0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long maxSize>;

        $b5 = $l3 cmp l0;

        if $b5 > 0 goto label15;

        $z0 = specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label07;

     label15:
        $r13 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r14 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r13.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r14);

        goto label07;

     label16:
        $r15 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        virtualinvoke $r15.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r8);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("REMOVE");

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(char)>(32);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>($r2);

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r8);

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r12.<java.io.Writer: java.io.Writer append(char)>(10);

     label17:
        goto label14;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label07 with label02;
        catch java.lang.Throwable from label10 to label17 with label02;
    }
    private static void deleteIfExists(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>()>();

        throw $r1;

     label1:
        return;
    }
    private com.bumptech.glide.disklrucache.DiskLruCache$Editor edit(java.lang.String, long) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.String $r1;
        long $l0, $l2;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor r2, $r8;
        java.util.LinkedHashMap $r3;
        java.lang.Object $r4;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r5;
        byte $b1;
        java.io.Writer $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        r2 = null;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void checkNotClosed()>();

        $r3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r4;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label04;

        if r5 == null goto label03;

        $l2 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long access$1200(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r5);

     label02:
        $b1 = $l2 cmp $l0;

        if $b1 == 0 goto label04;

     label03:
        exitmonitor r0;

        return r2;

     label04:
        if r5 != null goto label09;

     label05:
        r5 = new com.bumptech.glide.disklrucache.DiskLruCache$Entry;

        specialinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: void <init>(com.bumptech.glide.disklrucache.DiskLruCache,java.lang.String,com.bumptech.glide.disklrucache.DiskLruCache$1)>(r0, $r1, null);

        $r3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

     label06:
        r2 = new com.bumptech.glide.disklrucache.DiskLruCache$Editor;

        specialinvoke r2.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void <init>(com.bumptech.glide.disklrucache.DiskLruCache,com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$1)>(r0, r5, null);

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$702(com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$Editor)>(r5, r2);

        $r6 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r6.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("DIRTY");

        $r6 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r6.<java.io.Writer: java.io.Writer append(char)>(32);

        $r6 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r6.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r1);

        $r6 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r6.<java.io.Writer: java.io.Writer append(char)>(10);

        $r6 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r6.<java.io.Writer: void flush()>();

     label07:
        goto label03;

     label08:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

     label09:
        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r5);

     label10:
        if $r8 == null goto label06;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }
    private static java.lang.String inputStreamToString(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        java.io.InputStreamReader $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r3 = new java.io.InputStreamReader;

        $r1 = <com.bumptech.glide.disklrucache.Util: java.nio.charset.Charset UTF_8>;

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r0, $r1);

        $r2 = staticinvoke <com.bumptech.glide.disklrucache.Util: java.lang.String readFully(java.io.Reader)>($r3);

        return $r2;
    }
    private boolean journalRebuildRequired()
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        int $i0, $i1;
        java.util.LinkedHashMap $r1;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $i0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount>;

        if $i0 < 2000 goto label1;

        $i1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount>;

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static com.bumptech.glide.disklrucache.DiskLruCache open(java.io.File, int, int, long) throws java.io.IOException
    {
        java.io.File $r0, r1, r2;
        int $i0, $i1;
        long $l2;
        java.io.IOException r3;
        byte $b3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        com.bumptech.glide.disklrucache.DiskLruCache r5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 := @parameter3: long;

        $b3 = $l2 cmp 0L;

        if $b3 > 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxSize <= 0");

        throw $r4;

     label1:
        if $i1 > 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valueCount <= 0");

        throw $r4;

     label2:
        r1 = new java.io.File;

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "journal.bkp");

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "journal");

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label6;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label3:
        r5 = new com.bumptech.glide.disklrucache.DiskLruCache;

        specialinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache: void <init>(java.io.File,int,int,long)>($r0, $i0, $i1, $l2);

        r1 = r5.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label8;

     label4:
        specialinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache: void readJournal()>();

        specialinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache: void processJournal()>();

     label5:
        return r5;

     label6:
        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>(r1, r2, 0);

        goto label3;

     label7:
        r3 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DiskLruCache ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is corrupt: ");

        $r8 = virtualinvoke r3.<java.io.IOException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", removing");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r8);

        virtualinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache: void delete()>();

     label8:
        virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

        r5 = new com.bumptech.glide.disklrucache.DiskLruCache;

        specialinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache: void <init>(java.io.File,int,int,long)>($r0, $i0, $i1, $l2);

        specialinvoke r5.<com.bumptech.glide.disklrucache.DiskLruCache: void rebuildJournal()>();

        return r5;

        catch java.io.IOException from label4 to label5 with label7;
    }
    private void processJournal() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        long $l0, $l3;
        java.io.File $r1;
        java.util.LinkedHashMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r6;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r7;
        int i1, $i2;
        long[] $r8;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileTmp>;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

        $r2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r5;

        $r7 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r6);

        if $r7 != null goto label3;

        i1 = 0;

     label2:
        $i2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label1;

        $l3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size>;

        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long[] access$1000(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r6);

        $l0 = $r8[i1];

        $l0 = $l3 + $l0;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size> = $l0;

        i1 = i1 + 1;

        goto label2;

     label3:
        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$702(com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$Editor)>(r6, null);

        i1 = 0;

     label4:
        $i2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label5;

        $r1 = virtualinvoke r6.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i1);

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

        $r1 = virtualinvoke r6.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File getDirtyFile(int)>(i1);

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

        i1 = i1 + 1;

        goto label4;

     label5:
        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        goto label1;

     label6:
        return;
    }
    private void readJournal() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.EOFException r1;
        com.bumptech.glide.disklrucache.StrictLineReader r2;
        java.io.FileInputStream $r3;
        java.io.File $r4;
        java.nio.charset.Charset $r5;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        int $i0, $i1;
        java.io.IOException $r12;
        java.lang.StringBuilder $r13;
        java.lang.Throwable $r14;
        java.util.LinkedHashMap $r15;
        java.io.BufferedWriter $r16;
        java.io.OutputStreamWriter $r17;
        java.io.FileOutputStream $r18;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        r2 = new com.bumptech.glide.disklrucache.StrictLineReader;

        $r3 = new java.io.FileInputStream;

        $r4 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        $r5 = <com.bumptech.glide.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r3, $r5);

     label01:
        $r6 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r7 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r8 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r9 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>();

        $r10 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>();

     label02:
        $r11 = "libcore.io.DiskLruCache";

     label03:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r6);

     label04:
        if $z0 == 0 goto label13;

        $r11 = "1";

     label05:
        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

     label06:
        if $z0 == 0 goto label13;

     label07:
        $i0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int appVersion>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r8);

     label08:
        if $z0 == 0 goto label13;

     label09:
        $i0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

     label10:
        if $z0 == 0 goto label13;

        $r8 = "";

     label11:
        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

     label12:
        if $z0 != 0 goto label15;

     label13:
        $r12 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal header: [");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r12;

     label14:
        $r14 := @caughtexception;

        staticinvoke <com.bumptech.glide.disklrucache.Util: void closeQuietly(java.io.Closeable)>(r2);

        throw $r14;

     label15:
        $i0 = 0;

     label16:
        $r6 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: java.lang.String readLine()>();

        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void readJournalLine(java.lang.String)>($r6);

     label17:
        $i0 = $i0 + 1;

        goto label16;

     label18:
        r1 := @caughtexception;

     label19:
        $r15 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $i1 = virtualinvoke $r15.<java.util.LinkedHashMap: int size()>();

     label20:
        $i0 = $i0 - $i1;

     label21:
        r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount> = $i0;

        $z0 = virtualinvoke r2.<com.bumptech.glide.disklrucache.StrictLineReader: boolean hasUnterminatedLine()>();

     label22:
        if $z0 == 0 goto label25;

     label23:
        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void rebuildJournal()>();

     label24:
        staticinvoke <com.bumptech.glide.disklrucache.Util: void closeQuietly(java.io.Closeable)>(r2);

        return;

     label25:
        $r16 = new java.io.BufferedWriter;

        $r17 = new java.io.OutputStreamWriter;

        $r18 = new java.io.FileOutputStream;

        $r4 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r4, 1);

        $r5 = <com.bumptech.glide.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r17.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r18, $r5);

        specialinvoke $r16.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r17);

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter> = $r16;

     label26:
        goto label24;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.io.EOFException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label19 to label20 with label14;
        catch java.lang.Throwable from label21 to label22 with label14;
        catch java.lang.Throwable from label23 to label24 with label14;
        catch java.lang.Throwable from label25 to label26 with label14;
    }
    private void readJournalLine(java.lang.String) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.String $r1, $r4, r5, $r6;
        int i0, $i1, $i2;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        boolean $z0;
        java.util.LinkedHashMap $r7;
        java.lang.Object $r8;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r9;
        java.lang.String[] $r10;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r11;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(32);

        if $i1 != -1 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        i0 = $i1 + 1;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(32, i0);

        if $i2 != -1 goto label2;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i0);

        r5 = $r4;

        $r6 = "REMOVE";

        i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != i0 goto label3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("REMOVE");

        if $z0 == 0 goto label3;

        $r7 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;

     label2:
        r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i2);

     label3:
        $r7 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r8 = virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r5);

        r9 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r8;

        if r9 != null goto label4;

        r9 = new com.bumptech.glide.disklrucache.DiskLruCache$Entry;

        specialinvoke r9.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: void <init>(com.bumptech.glide.disklrucache.DiskLruCache,java.lang.String,com.bumptech.glide.disklrucache.DiskLruCache$1)>(r0, r5, null);

        $r7 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r9);

     label4:
        if $i2 == -1 goto label5;

        $r4 = "CLEAN";

        i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != i0 goto label5;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("CLEAN");

        if $z0 == 0 goto label5;

        $i1 = $i2 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r10 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: boolean access$602(com.bumptech.glide.disklrucache.DiskLruCache$Entry,boolean)>(r9, 1);

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$702(com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$Editor)>(r9, null);

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: void access$800(com.bumptech.glide.disklrucache.DiskLruCache$Entry,java.lang.String[])>(r9, $r10);

        return;

     label5:
        if $i2 != -1 goto label6;

        $r4 = "DIRTY";

        i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != i0 goto label6;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("DIRTY");

        if $z0 == 0 goto label6;

        $r11 = new com.bumptech.glide.disklrucache.DiskLruCache$Editor;

        specialinvoke $r11.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void <init>(com.bumptech.glide.disklrucache.DiskLruCache,com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$1)>(r0, r9, null);

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$702(com.bumptech.glide.disklrucache.DiskLruCache$Entry,com.bumptech.glide.disklrucache.DiskLruCache$Editor)>(r9, $r11);

        return;

     label6:
        if $i2 != -1 goto label7;

        $r4 = "READ";

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != $i2 goto label7;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("READ");

        if $z0 != 0 goto label8;

     label7:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected journal line: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label8:
        return;
    }
    private void rebuildJournal() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.BufferedWriter r1;
        java.io.Writer $r2;
        java.io.OutputStreamWriter $r3;
        java.io.FileOutputStream $r4;
        java.io.File $r5, $r17;
        java.nio.charset.Charset $r6;
        int $i0;
        java.lang.String $r7;
        java.util.LinkedHashMap $r8;
        java.util.Collection $r9;
        java.util.Iterator $r10;
        boolean $z0;
        java.lang.Object $r11;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r12;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r13;
        java.lang.StringBuilder $r14;
        java.lang.Throwable $r15, $r16;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        entermonitor r0;

     label01:
        $r2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        if $r2 == null goto label02;

        $r2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r2.<java.io.Writer: void close()>();

     label02:
        r1 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileTmp>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        $r6 = <com.bumptech.glide.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r6);

        specialinvoke r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

     label03:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("libcore.io.DiskLruCache");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("1");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        $i0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int appVersion>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        $i0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\n");

        $r8 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r11;

        $r13 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r12);

        if $r13 == null goto label09;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DIRTY ");

        $r7 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r12);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

     label05:
        goto label04;

     label06:
        $r15 := @caughtexception;

     label07:
        virtualinvoke r1.<java.io.Writer: void close()>();

        throw $r15;

     label08:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

     label09:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CLEAN ");

        $r7 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String access$1100(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r12);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke r12.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.lang.String getLengths()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7);

     label10:
        goto label04;

     label11:
        virtualinvoke r1.<java.io.Writer: void close()>();

        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label12;

        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        $r17 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileBackup>;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r5, $r17, 1);

     label12:
        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileTmp>;

        $r17 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void renameTo(java.io.File,java.io.File,boolean)>($r5, $r17, 0);

        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFileBackup>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

        r1 = new java.io.BufferedWriter;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = new java.io.FileOutputStream;

        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File journalFile>;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r5, 1);

        $r6 = <com.bumptech.glide.disklrucache.Util: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r4, $r6);

        specialinvoke r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3);

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter> = r1;

     label13:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label13 with label08;
    }
    private static void renameTo(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0;
        java.io.IOException $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $z0 == 0 goto label1;

        staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache: void deleteIfExists(java.io.File)>($r1);

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        throw $r2;

     label2:
        return;
    }
    private void trimToSize() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        long $l0, $l1;
        byte $b2;
        java.util.LinkedHashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.util.Map$Entry r5;
        java.lang.String $r6;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

     label1:
        $l0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size>;

        $l1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long maxSize>;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label2;

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r4;

        virtualinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: boolean remove(java.lang.String)>($r6);

        goto label1;

     label2:
        return;
    }
    public void close() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.Writer $r1;
        java.util.ArrayList $r2;
        java.util.LinkedHashMap $r3;
        java.util.Collection $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r7;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

     label2:
        if $r1 != null goto label4;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 = new java.util.ArrayList;

        $r3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.util.Collection values()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r6;

        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r7);

        if $r8 == null goto label5;

        $r8 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r7);

        virtualinvoke $r8.<com.bumptech.glide.disklrucache.DiskLruCache$Editor: void abort()>();

     label6:
        goto label5;

     label7:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label8:
        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void trimToSize()>();

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter> = null;

     label9:
        goto label3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
    public void delete() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.File $r1;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        virtualinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void close()>();

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File directory>;

        staticinvoke <com.bumptech.glide.disklrucache.Util: void deleteContents(java.io.File)>($r1);

        return;
    }
    public com.bumptech.glide.disklrucache.DiskLruCache$Editor edit(java.lang.String) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.String $r1;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r2;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: com.bumptech.glide.disklrucache.DiskLruCache$Editor edit(java.lang.String,long)>($r1, -1L);

        return $r2;
    }
    public void flush() throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.Writer $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void checkNotClosed()>();

        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void trimToSize()>();

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public com.bumptech.glide.disklrucache.DiskLruCache$Value get(java.lang.String) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.String $r1;
        java.io.File[] r2;
        java.io.File r3;
        int i0, i1;
        com.bumptech.glide.disklrucache.DiskLruCache$Value $r4;
        java.util.LinkedHashMap $r5;
        java.lang.Object $r6;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r7;
        boolean $z0;
        java.io.Writer $r8;
        java.util.concurrent.ThreadPoolExecutor $r9;
        java.util.concurrent.Callable $r10;
        long $l2;
        long[] $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        $r4 = null;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void checkNotClosed()>();

        $r5 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r6;

     label2:
        if r7 != null goto label4;

     label3:
        exitmonitor r0;

        return $r4;

     label4:
        $z0 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: boolean access$600(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r7);

        if $z0 == 0 goto label3;

        r2 = r7.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File[] cleanFiles>;

        i0 = lengthof r2;

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label3;

        i1 = i1 + 1;

        goto label5;

     label6:
        i0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount>;

        i0 = i0 + 1;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount> = i0;

        $r8 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r8.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("READ");

        $r8 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r8.<java.io.Writer: java.io.Writer append(char)>(32);

        $r8 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r8.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r1);

        $r8 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r8.<java.io.Writer: java.io.Writer append(char)>(10);

        $z0 = specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label7;

        $r9 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r10 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r9.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r10);

     label7:
        $r4 = new com.bumptech.glide.disklrucache.DiskLruCache$Value;

        $l2 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long access$1200(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r7);

        r2 = r7.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File[] cleanFiles>;

        $r11 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long[] access$1000(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r7);

        specialinvoke $r4.<com.bumptech.glide.disklrucache.DiskLruCache$Value: void <init>(com.bumptech.glide.disklrucache.DiskLruCache,java.lang.String,long,java.io.File[],long[],com.bumptech.glide.disklrucache.DiskLruCache$1)>(r0, $r1, $l2, r2, $r11, null);

     label8:
        goto label3;

     label9:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label4 to label8 with label9;
    }
    public java.io.File getDirectory()
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.File r1;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.File directory>;

        return r1;
    }
    public long getMaxSize()
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.Throwable $r1;
        long l0;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        l0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long maxSize>;

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public boolean isClosed()
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.io.Writer $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

     label2:
        if $r1 != null goto label4;

        $z0 = 1;

     label3:
        exitmonitor r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
    }
    public boolean remove(java.lang.String) throws java.io.IOException
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.String $r1;
        long $l0, $l3;
        java.util.LinkedHashMap $r2;
        java.lang.Object $r3;
        com.bumptech.glide.disklrucache.DiskLruCache$Entry r4;
        com.bumptech.glide.disklrucache.DiskLruCache$Editor $r5;
        boolean $z0;
        int i1, $i2;
        java.io.File $r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r9;
        long[] $r10;
        java.io.Writer $r11;
        java.util.concurrent.ThreadPoolExecutor $r12;
        java.util.concurrent.Callable $r13;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label01:
        specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: void checkNotClosed()>();

        $r2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.bumptech.glide.disklrucache.DiskLruCache$Entry) $r3;

        if r4 == null goto label03;

        $r5 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: com.bumptech.glide.disklrucache.DiskLruCache$Editor access$700(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r4);

     label02:
        if $r5 == null goto label05;

     label03:
        $z0 = 0;

     label04:
        exitmonitor r0;

        return $z0;

     label05:
        i1 = 0;

     label06:
        $i2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int valueCount>;

        if i1 >= $i2 goto label09;

        $r6 = virtualinvoke r4.<com.bumptech.glide.disklrucache.DiskLruCache$Entry: java.io.File getCleanFile(int)>(i1);

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke $r6.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label08;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label07:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

     label08:
        $l3 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size>;

        $r10 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long[] access$1000(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r4);

        $l0 = $r10[i1];

        $l0 = $l3 - $l0;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size> = $l0;

        $r10 = staticinvoke <com.bumptech.glide.disklrucache.DiskLruCache$Entry: long[] access$1000(com.bumptech.glide.disklrucache.DiskLruCache$Entry)>(r4);

        $r10[i1] = 0L;

        i1 = i1 + 1;

        goto label06;

     label09:
        i1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount>;

        i1 = i1 + 1;

        r0.<com.bumptech.glide.disklrucache.DiskLruCache: int redundantOpCount> = i1;

        $r11 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r11.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("REMOVE");

        $r11 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r11.<java.io.Writer: java.io.Writer append(char)>(32);

        $r11 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r11.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r1);

        $r11 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.io.Writer journalWriter>;

        virtualinvoke $r11.<java.io.Writer: java.io.Writer append(char)>(10);

        $r2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.LinkedHashMap lruEntries>;

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $z0 = specialinvoke r0.<com.bumptech.glide.disklrucache.DiskLruCache: boolean journalRebuildRequired()>();

        if $z0 == 0 goto label10;

        $r12 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r13 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r12.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r13);

     label10:
        $z0 = 1;

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label10 with label07;
    }
    public void setMaxSize(long)
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        long $l0;
        java.util.concurrent.Callable $r1;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        r0.<com.bumptech.glide.disklrucache.DiskLruCache: long maxSize> = $l0;

        $r2 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.ThreadPoolExecutor executorService>;

        $r1 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: java.util.concurrent.Callable cleanupCallable>;

        virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public long size()
    {
        com.bumptech.glide.disklrucache.DiskLruCache r0;
        java.lang.Throwable $r1;
        long l0;

        r0 := @this: com.bumptech.glide.disklrucache.DiskLruCache;

        entermonitor r0;

     label1:
        l0 = r0.<com.bumptech.glide.disklrucache.DiskLruCache: long size>;

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
