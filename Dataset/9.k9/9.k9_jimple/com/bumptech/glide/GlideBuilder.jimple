com.bumptech.glide.GlideBuilder extends java.lang.Object
private com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool
private final android.content.Context context
private com.bumptech.glide.load.DecodeFormat decodeFormat
private com.bumptech.glide.load.engine.cache.DiskCache$Factory diskCacheFactory
private java.util.concurrent.ExecutorService diskCacheService
private com.bumptech.glide.load.engine.Engine engine
private com.bumptech.glide.load.engine.cache.MemoryCache memoryCache
private java.util.concurrent.ExecutorService sourceService
    public void <init>(android.content.Context)
    {
        com.bumptech.glide.GlideBuilder r0;
        android.content.Context $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<com.bumptech.glide.GlideBuilder: android.content.Context context> = $r1;

        return;
    }
    com.bumptech.glide.Glide createGlide()
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.DecodeFormat $r1;
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r2;
        java.util.concurrent.ExecutorService $r3, $r14;
        java.lang.Runtime $r4;
        int $i0;
        com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor $r5;
        android.content.Context $r6;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r7;
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool $r8;
        com.bumptech.glide.load.engine.cache.MemoryCache $r9;
        com.bumptech.glide.load.engine.cache.LruResourceCache $r10;
        com.bumptech.glide.load.engine.cache.DiskCache$Factory $r11;
        com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory $r12;
        com.bumptech.glide.load.engine.Engine $r13;
        com.bumptech.glide.Glide $r15;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter $r16;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r3 = r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService sourceService>;

        if $r3 != null goto label1;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r4.<java.lang.Runtime: int availableProcessors()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        $r5 = new com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        specialinvoke $r5.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: void <init>(int)>($i0);

        r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService sourceService> = $r5;

     label1:
        $r3 = r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService diskCacheService>;

        if $r3 != null goto label2;

        $r5 = new com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor;

        specialinvoke $r5.<com.bumptech.glide.load.engine.executor.FifoPriorityThreadPoolExecutor: void <init>(int)>(1);

        r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService diskCacheService> = $r5;

     label2:
        r2 = new com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        $r6 = r0.<com.bumptech.glide.GlideBuilder: android.content.Context context>;

        specialinvoke r2.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: void <init>(android.content.Context)>($r6);

        $r7 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        if $r7 != null goto label3;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label8;

        $i0 = virtualinvoke r2.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getBitmapPoolSize()>();

        $r8 = new com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        specialinvoke $r8.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void <init>(int)>($i0);

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = $r8;

     label3:
        $r9 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        if $r9 != null goto label4;

        $r10 = new com.bumptech.glide.load.engine.cache.LruResourceCache;

        $i0 = virtualinvoke r2.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getMemoryCacheSize()>();

        specialinvoke $r10.<com.bumptech.glide.load.engine.cache.LruResourceCache: void <init>(int)>($i0);

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache> = $r10;

     label4:
        $r11 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.DiskCache$Factory diskCacheFactory>;

        if $r11 != null goto label5;

        $r12 = new com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory;

        $r6 = r0.<com.bumptech.glide.GlideBuilder: android.content.Context context>;

        specialinvoke $r12.<com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory: void <init>(android.content.Context)>($r6);

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.DiskCache$Factory diskCacheFactory> = $r12;

     label5:
        $r13 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.Engine engine>;

        if $r13 != null goto label6;

        $r13 = new com.bumptech.glide.load.engine.Engine;

        $r9 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $r11 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.DiskCache$Factory diskCacheFactory>;

        $r3 = r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService diskCacheService>;

        $r14 = r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService sourceService>;

        specialinvoke $r13.<com.bumptech.glide.load.engine.Engine: void <init>(com.bumptech.glide.load.engine.cache.MemoryCache,com.bumptech.glide.load.engine.cache.DiskCache$Factory,java.util.concurrent.ExecutorService,java.util.concurrent.ExecutorService)>($r9, $r11, $r3, $r14);

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.Engine engine> = $r13;

     label6:
        $r1 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat>;

        if $r1 != null goto label7;

        $r1 = <com.bumptech.glide.load.DecodeFormat: com.bumptech.glide.load.DecodeFormat DEFAULT>;

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat> = $r1;

     label7:
        $r15 = new com.bumptech.glide.Glide;

        $r13 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.Engine engine>;

        $r9 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache>;

        $r7 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool>;

        $r6 = r0.<com.bumptech.glide.GlideBuilder: android.content.Context context>;

        $r1 = r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat>;

        specialinvoke $r15.<com.bumptech.glide.Glide: void <init>(com.bumptech.glide.load.engine.Engine,com.bumptech.glide.load.engine.cache.MemoryCache,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,android.content.Context,com.bumptech.glide.load.DecodeFormat)>($r13, $r9, $r7, $r6, $r1);

        return $r15;

     label8:
        $r16 = new com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter;

        specialinvoke $r16.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPoolAdapter: void <init>()>();

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = $r16;

        goto label3;
    }
    public com.bumptech.glide.GlideBuilder setBitmapPool(com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool)
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool bitmapPool> = $r1;

        return r0;
    }
    public com.bumptech.glide.GlideBuilder setDecodeFormat(com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.DecodeFormat $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.DecodeFormat;

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.DecodeFormat decodeFormat> = $r1;

        return r0;
    }
    public com.bumptech.glide.GlideBuilder setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache$Factory)
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.engine.cache.DiskCache$Factory $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.DiskCache$Factory;

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.DiskCache$Factory diskCacheFactory> = $r1;

        return r0;
    }
    public com.bumptech.glide.GlideBuilder setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache)
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.engine.cache.DiskCache $r1;
        com.bumptech.glide.GlideBuilder$1 $r2;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.DiskCache;

        $r2 = new com.bumptech.glide.GlideBuilder$1;

        specialinvoke $r2.<com.bumptech.glide.GlideBuilder$1: void <init>(com.bumptech.glide.GlideBuilder,com.bumptech.glide.load.engine.cache.DiskCache)>(r0, $r1);

        r0 = virtualinvoke r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.GlideBuilder setDiskCache(com.bumptech.glide.load.engine.cache.DiskCache$Factory)>($r2);

        return r0;
    }
    public com.bumptech.glide.GlideBuilder setDiskCacheService(java.util.concurrent.ExecutorService)
    {
        com.bumptech.glide.GlideBuilder r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService diskCacheService> = $r1;

        return r0;
    }
    com.bumptech.glide.GlideBuilder setEngine(com.bumptech.glide.load.engine.Engine)
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.engine.Engine $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.Engine;

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.Engine engine> = $r1;

        return r0;
    }
    public com.bumptech.glide.GlideBuilder setMemoryCache(com.bumptech.glide.load.engine.cache.MemoryCache)
    {
        com.bumptech.glide.GlideBuilder r0;
        com.bumptech.glide.load.engine.cache.MemoryCache $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: com.bumptech.glide.load.engine.cache.MemoryCache;

        r0.<com.bumptech.glide.GlideBuilder: com.bumptech.glide.load.engine.cache.MemoryCache memoryCache> = $r1;

        return r0;
    }
    public com.bumptech.glide.GlideBuilder setResizeService(java.util.concurrent.ExecutorService)
    {
        com.bumptech.glide.GlideBuilder r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: com.bumptech.glide.GlideBuilder;

        $r1 := @parameter0: java.util.concurrent.ExecutorService;

        r0.<com.bumptech.glide.GlideBuilder: java.util.concurrent.ExecutorService sourceService> = $r1;

        return r0;
    }
