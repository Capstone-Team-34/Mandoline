com.bumptech.glide.util.Util extends java.lang.Object
private static final char[] HEX_CHAR_ARRAY
private static final char[] SHA_1_CHARS
private static final char[] SHA_256_CHARS
    static void <clinit>()
    {
        char[] $r0;
        java.lang.String $r1;

        $r1 = "0123456789abcdef";

        $r0 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <com.bumptech.glide.util.Util: char[] HEX_CHAR_ARRAY> = $r0;

        $r0 = newarray (char)[64];

        <com.bumptech.glide.util.Util: char[] SHA_256_CHARS> = $r0;

        $r0 = newarray (char)[40];

        <com.bumptech.glide.util.Util: char[] SHA_1_CHARS> = $r0;

        return;
    }
    private void <init>()
    {
        com.bumptech.glide.util.Util r0;

        r0 := @this: com.bumptech.glide.util.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static void assertBackgroundThread()
    {
        boolean $z0;
        java.lang.IllegalArgumentException $r0;

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isOnBackgroundThread()>();

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("YOu must call this method on a background thread");

        throw $r0;

     label1:
        return;
    }
    public static void assertMainThread()
    {
        boolean $z0;
        java.lang.IllegalArgumentException $r0;

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isOnMainThread()>();

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must call this method on the main thread");

        throw $r0;

     label1:
        return;
    }
    private static java.lang.String bytesToHex(byte[], char[])
    {
        byte[] $r0;
        char[] $r1, $r2;
        int i0, i1, $i3, $i4;
        byte $b2;
        char $c5;
        java.lang.String $r3;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: char[];

        i1 = 0;

     label1:
        i0 = lengthof $r0;

        if i1 >= i0 goto label2;

        $b2 = $r0[i1];

        i0 = $b2 & 255;

        $i3 = i1 * 2;

        $r2 = <com.bumptech.glide.util.Util: char[] HEX_CHAR_ARRAY>;

        $i4 = i0 >>> 4;

        $c5 = $r2[$i4];

        $r1[$i3] = $c5;

        $i3 = i1 * 2;

        $i3 = $i3 + 1;

        $r2 = <com.bumptech.glide.util.Util: char[] HEX_CHAR_ARRAY>;

        i0 = i0 & 15;

        $c5 = $r2[i0];

        $r1[$i3] = $c5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r1);

        return $r3;
    }
    public static java.util.Queue createQueue(int)
    {
        int $i0;
        java.util.ArrayDeque $r0;

        $i0 := @parameter0: int;

        $r0 = new java.util.ArrayDeque;

        specialinvoke $r0.<java.util.ArrayDeque: void <init>(int)>($i0);

        return $r0;
    }
    public static int getBitmapByteSize(int, int, android.graphics.Bitmap$Config)
    {
        int $i0, $i1;
        android.graphics.Bitmap$Config $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: android.graphics.Bitmap$Config;

        $i1 = $i0 * $i1;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBytesPerPixel(android.graphics.Bitmap$Config)>($r0);

        $i0 = $i1 * $i0;

        return $i0;
    }
    public static int getBitmapByteSize(android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1;
        java.lang.NullPointerException $r1;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label4;

     label1:
        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getAllocationByteCount()>();

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

     label4:
        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getRowBytes()>();

        $i0 = $i0 * $i1;

        return $i0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }
    private static int getBytesPerPixel(android.graphics.Bitmap$Config)
    {
        int $i0;
        android.graphics.Bitmap$Config $r0;
        int[] $r1;

        $r0 := @parameter0: android.graphics.Bitmap$Config;

        if $r0 != null goto label1;

        $r0 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label1:
        $r1 = <com.bumptech.glide.util.Util$1: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap$Config: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label4;
            default: goto label2;
        };

     label2:
        return 4;

     label3:
        return 1;

     label4:
        return 2;
    }
    public static int getSize(android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r0;
        int $i0;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r0);

        return $i0;
    }
    public static java.util.List getSnapshot(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.ArrayList r1;
        int $i0;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.Collection;

        r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label1;

     label2:
        return r1;
    }
    public static boolean isOnBackgroundThread()
    {
        boolean $z0;

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isOnMainThread()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isOnMainThread()
    {
        android.os.Looper $r0, $r1;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static boolean isValidDimension(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        if $i0 != -2147483648 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public static boolean isValidDimensions(int, int)
    {
        int $i0, $i1;
        boolean $z0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isValidDimension(int)>($i0);

        if $z0 == 0 goto label1;

        $z0 = staticinvoke <com.bumptech.glide.util.Util: boolean isValidDimension(int)>($i1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static java.lang.String sha1BytesToHex(byte[])
    {
        byte[] $r0;
        char[] $r1, $r3;
        java.lang.String $r2;
        java.lang.Throwable $r4;

        $r0 := @parameter0: byte[];

        $r1 = <com.bumptech.glide.util.Util: char[] SHA_1_CHARS>;

        entermonitor $r1;

     label1:
        $r3 = <com.bumptech.glide.util.Util: char[] SHA_1_CHARS>;

        $r2 = staticinvoke <com.bumptech.glide.util.Util: java.lang.String bytesToHex(byte[],char[])>($r0, $r3);

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static java.lang.String sha256BytesToHex(byte[])
    {
        byte[] $r0;
        char[] $r1, $r3;
        java.lang.String $r2;
        java.lang.Throwable $r4;

        $r0 := @parameter0: byte[];

        $r1 = <com.bumptech.glide.util.Util: char[] SHA_256_CHARS>;

        entermonitor $r1;

     label1:
        $r3 = <com.bumptech.glide.util.Util: char[] SHA_256_CHARS>;

        $r2 = staticinvoke <com.bumptech.glide.util.Util: java.lang.String bytesToHex(byte[],char[])>($r0, $r3);

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
