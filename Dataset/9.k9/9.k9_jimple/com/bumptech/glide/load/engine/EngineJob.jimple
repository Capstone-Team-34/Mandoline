com.bumptech.glide.load.engine.EngineJob extends java.lang.Object implements com.bumptech.glide.load.engine.EngineRunnable$EngineRunnableManager
private static final com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory DEFAULT_FACTORY
private static final android.os.Handler MAIN_THREAD_HANDLER
private static final int MSG_COMPLETE
private static final int MSG_EXCEPTION
private final java.util.List cbs
private final java.util.concurrent.ExecutorService diskCacheService
private com.bumptech.glide.load.engine.EngineResource engineResource
private final com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory engineResourceFactory
private com.bumptech.glide.load.engine.EngineRunnable engineRunnable
private java.lang.Exception exception
private volatile java.util.concurrent.Future future
private boolean hasException
private boolean hasResource
private java.util.Set ignoredCallbacks
private final boolean isCacheable
private boolean isCancelled
private final com.bumptech.glide.load.Key key
private final com.bumptech.glide.load.engine.EngineJobListener listener
private com.bumptech.glide.load.engine.Resource resource
private final java.util.concurrent.ExecutorService sourceService
    static void <clinit>()
    {
        com.bumptech.glide.load.engine.EngineJob$MainThreadCallback $r0;
        android.os.Looper $r1;
        com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory $r2;
        android.os.Handler $r3;

        $r2 = new com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory;

        specialinvoke $r2.<com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory: void <init>()>();

        <com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory DEFAULT_FACTORY> = $r2;

        $r3 = new android.os.Handler;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r0 = new com.bumptech.glide.load.engine.EngineJob$MainThreadCallback;

        specialinvoke $r0.<com.bumptech.glide.load.engine.EngineJob$MainThreadCallback: void <init>(com.bumptech.glide.load.engine.EngineJob$1)>(null);

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r1, $r0);

        <com.bumptech.glide.load.engine.EngineJob: android.os.Handler MAIN_THREAD_HANDLER> = $r3;

        return;
    }
    public void <init>(com.bumptech.glide.load.Key, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, boolean, com.bumptech.glide.load.engine.EngineJobListener)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.load.Key $r1;
        java.util.concurrent.ExecutorService $r2, $r3;
        boolean $z0;
        com.bumptech.glide.load.engine.EngineJobListener $r4;
        com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory $r5;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r2 := @parameter1: java.util.concurrent.ExecutorService;

        $r3 := @parameter2: java.util.concurrent.ExecutorService;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: com.bumptech.glide.load.engine.EngineJobListener;

        $r5 = <com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory DEFAULT_FACTORY>;

        specialinvoke r0.<com.bumptech.glide.load.engine.EngineJob: void <init>(com.bumptech.glide.load.Key,java.util.concurrent.ExecutorService,java.util.concurrent.ExecutorService,boolean,com.bumptech.glide.load.engine.EngineJobListener,com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory)>($r1, $r2, $r3, $z0, $r4, $r5);

        return;
    }
    public void <init>(com.bumptech.glide.load.Key, java.util.concurrent.ExecutorService, java.util.concurrent.ExecutorService, boolean, com.bumptech.glide.load.engine.EngineJobListener, com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.load.Key $r1;
        java.util.concurrent.ExecutorService $r2, $r3;
        boolean $z0;
        com.bumptech.glide.load.engine.EngineJobListener $r4;
        com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory $r5;
        java.util.ArrayList $r6;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r2 := @parameter1: java.util.concurrent.ExecutorService;

        $r3 := @parameter2: java.util.concurrent.ExecutorService;

        $z0 := @parameter3: boolean;

        $r4 := @parameter4: com.bumptech.glide.load.engine.EngineJobListener;

        $r5 := @parameter5: com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs> = $r6;

        r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.Key key> = $r1;

        r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.ExecutorService diskCacheService> = $r2;

        r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.ExecutorService sourceService> = $r3;

        r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCacheable> = $z0;

        r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJobListener listener> = $r4;

        r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory engineResourceFactory> = $r5;

        return;
    }
    static void access$100(com.bumptech.glide.load.engine.EngineJob)
    {
        com.bumptech.glide.load.engine.EngineJob $r0;

        $r0 := @parameter0: com.bumptech.glide.load.engine.EngineJob;

        specialinvoke $r0.<com.bumptech.glide.load.engine.EngineJob: void handleResultOnMainThread()>();

        return;
    }
    static void access$200(com.bumptech.glide.load.engine.EngineJob)
    {
        com.bumptech.glide.load.engine.EngineJob $r0;

        $r0 := @parameter0: com.bumptech.glide.load.engine.EngineJob;

        specialinvoke $r0.<com.bumptech.glide.load.engine.EngineJob: void handleExceptionOnMainThread()>();

        return;
    }
    private void addIgnoredCallback(com.bumptech.glide.request.ResourceCallback)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.request.ResourceCallback $r1;
        java.util.Set $r2;
        java.util.HashSet $r3;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.request.ResourceCallback;

        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.Set ignoredCallbacks>;

        if $r2 != null goto label1;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.bumptech.glide.load.engine.EngineJob: java.util.Set ignoredCallbacks> = $r3;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.Set ignoredCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        return;
    }
    private void handleExceptionOnMainThread()
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        boolean $z0;
        java.util.List $r1;
        java.lang.IllegalStateException $r2;
        com.bumptech.glide.load.engine.EngineJobListener $r3;
        com.bumptech.glide.load.Key $r4;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        com.bumptech.glide.request.ResourceCallback r7;
        java.lang.Exception $r8;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCancelled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Received an exception without any callbacks to notify");

        throw $r2;

     label2:
        r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasException> = 1;

        $r3 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJobListener listener>;

        $r4 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.Key key>;

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.EngineJobListener: void onEngineJobComplete(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.EngineResource)>($r4, null);

        $r1 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.bumptech.glide.request.ResourceCallback) $r6;

        $z0 = specialinvoke r0.<com.bumptech.glide.load.engine.EngineJob: boolean isInIgnoredCallbacks(com.bumptech.glide.request.ResourceCallback)>(r7);

        if $z0 != 0 goto label3;

        $r8 = r0.<com.bumptech.glide.load.engine.EngineJob: java.lang.Exception exception>;

        interfaceinvoke r7.<com.bumptech.glide.request.ResourceCallback: void onException(java.lang.Exception)>($r8);

        goto label3;

     label4:
        return;
    }
    private void handleResultOnMainThread()
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        boolean $z0;
        com.bumptech.glide.load.engine.Resource $r1;
        java.util.List $r2;
        java.lang.IllegalStateException $r3;
        com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory $r4;
        com.bumptech.glide.load.engine.EngineResource $r5;
        com.bumptech.glide.load.engine.EngineJobListener $r6;
        com.bumptech.glide.load.Key $r7;
        java.util.Iterator $r8;
        java.lang.Object $r9;
        com.bumptech.glide.request.ResourceCallback r10;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCancelled>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.Resource resource>;

        interfaceinvoke $r1.<com.bumptech.glide.load.engine.Resource: void recycle()>();

        return;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Received a resource without any callbacks to notify");

        throw $r3;

     label2:
        $r4 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory engineResourceFactory>;

        $r1 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.Resource resource>;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCacheable>;

        $r5 = virtualinvoke $r4.<com.bumptech.glide.load.engine.EngineJob$EngineResourceFactory: com.bumptech.glide.load.engine.EngineResource build(com.bumptech.glide.load.engine.Resource,boolean)>($r1, $z0);

        r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource> = $r5;

        r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasResource> = 1;

        $r5 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.EngineResource: void acquire()>();

        $r6 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJobListener listener>;

        $r7 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.Key key>;

        $r5 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource>;

        interfaceinvoke $r6.<com.bumptech.glide.load.engine.EngineJobListener: void onEngineJobComplete(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.EngineResource)>($r7, $r5);

        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        $r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.bumptech.glide.request.ResourceCallback) $r9;

        $z0 = specialinvoke r0.<com.bumptech.glide.load.engine.EngineJob: boolean isInIgnoredCallbacks(com.bumptech.glide.request.ResourceCallback)>(r10);

        if $z0 != 0 goto label3;

        $r5 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.EngineResource: void acquire()>();

        $r5 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource>;

        interfaceinvoke r10.<com.bumptech.glide.request.ResourceCallback: void onResourceReady(com.bumptech.glide.load.engine.Resource)>($r5);

        goto label3;

     label4:
        $r5 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.EngineResource: void release()>();

        return;
    }
    private boolean isInIgnoredCallbacks(com.bumptech.glide.request.ResourceCallback)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.request.ResourceCallback $r1;
        boolean $z0;
        java.util.Set $r2;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.request.ResourceCallback;

        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.Set ignoredCallbacks>;

        if $r2 == null goto label1;

        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.Set ignoredCallbacks>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public void addCallback(com.bumptech.glide.request.ResourceCallback)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.request.ResourceCallback $r1;
        boolean $z0;
        com.bumptech.glide.load.engine.EngineResource $r2;
        java.lang.Exception $r3;
        java.util.List $r4;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.request.ResourceCallback;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasResource>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineResource engineResource>;

        interfaceinvoke $r1.<com.bumptech.glide.request.ResourceCallback: void onResourceReady(com.bumptech.glide.load.engine.Resource)>($r2);

        return;

     label1:
        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasException>;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.bumptech.glide.load.engine.EngineJob: java.lang.Exception exception>;

        interfaceinvoke $r1.<com.bumptech.glide.request.ResourceCallback: void onException(java.lang.Exception)>($r3);

        return;

     label2:
        $r4 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }
    void cancel()
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        java.util.concurrent.Future r1;
        boolean $z0;
        com.bumptech.glide.load.engine.EngineRunnable $r2;
        com.bumptech.glide.load.engine.EngineJobListener $r3;
        com.bumptech.glide.load.Key $r4;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasException>;

        if $z0 != 0 goto label3;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasResource>;

        if $z0 != 0 goto label3;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCancelled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineRunnable engineRunnable>;

        virtualinvoke $r2.<com.bumptech.glide.load.engine.EngineRunnable: void cancel()>();

        r1 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.Future future>;

        if r1 == null goto label2;

        interfaceinvoke r1.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

     label2:
        r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCancelled> = 1;

        $r3 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineJobListener listener>;

        $r4 = r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.Key key>;

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.EngineJobListener: void onEngineJobCancelled(com.bumptech.glide.load.engine.EngineJob,com.bumptech.glide.load.Key)>(r0, $r4);

     label3:
        return;
    }
    boolean isCancelled()
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        boolean z0;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean isCancelled>;

        return z0;
    }
    public void onException(java.lang.Exception)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        java.lang.Exception $r1;
        android.os.Message $r2;
        android.os.Handler $r3;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: java.lang.Exception;

        r0.<com.bumptech.glide.load.engine.EngineJob: java.lang.Exception exception> = $r1;

        $r3 = <com.bumptech.glide.load.engine.EngineJob: android.os.Handler MAIN_THREAD_HANDLER>;

        $r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }
    public void onResourceReady(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.load.engine.Resource r1;
        android.os.Message $r2;
        android.os.Handler $r3;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.Resource resource> = r1;

        $r3 = <com.bumptech.glide.load.engine.EngineJob: android.os.Handler MAIN_THREAD_HANDLER>;

        $r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }
    public void removeCallback(com.bumptech.glide.request.ResourceCallback)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.request.ResourceCallback $r1;
        boolean $z0;
        java.util.List $r2;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.request.ResourceCallback;

        staticinvoke <com.bumptech.glide.util.Util: void assertMainThread()>();

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasResource>;

        if $z0 != 0 goto label1;

        $z0 = r0.<com.bumptech.glide.load.engine.EngineJob: boolean hasException>;

        if $z0 == 0 goto label2;

     label1:
        specialinvoke r0.<com.bumptech.glide.load.engine.EngineJob: void addIgnoredCallback(com.bumptech.glide.request.ResourceCallback)>($r1);

        return;

     label2:
        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        $r2 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.List cbs>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.bumptech.glide.load.engine.EngineJob: void cancel()>();

     label3:
        return;
    }
    public void start(com.bumptech.glide.load.engine.EngineRunnable)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.load.engine.EngineRunnable $r1;
        java.util.concurrent.Future $r2;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.load.engine.EngineRunnable;

        r0.<com.bumptech.glide.load.engine.EngineJob: com.bumptech.glide.load.engine.EngineRunnable engineRunnable> = $r1;

        $r3 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.ExecutorService diskCacheService>;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

        r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.Future future> = $r2;

        return;
    }
    public void submitForSource(com.bumptech.glide.load.engine.EngineRunnable)
    {
        com.bumptech.glide.load.engine.EngineJob r0;
        com.bumptech.glide.load.engine.EngineRunnable $r1;
        java.util.concurrent.Future $r2;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.bumptech.glide.load.engine.EngineJob;

        $r1 := @parameter0: com.bumptech.glide.load.engine.EngineRunnable;

        $r3 = r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.ExecutorService sourceService>;

        $r2 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

        r0.<com.bumptech.glide.load.engine.EngineJob: java.util.concurrent.Future future> = $r2;

        return;
    }
