com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy
private static final android.graphics.Bitmap$Config[] ALPHA_8_IN_CONFIGS
private static final android.graphics.Bitmap$Config[] ARGB_4444_IN_CONFIGS
private static final android.graphics.Bitmap$Config[] ARGB_8888_IN_CONFIGS
private static final int MAX_SIZE_MULTIPLE
private static final android.graphics.Bitmap$Config[] RGB_565_IN_CONFIGS
private final com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap
private final com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool keyPool
private final java.util.Map sortedSizes
    static void <clinit>()
    {
        android.graphics.Bitmap$Config[] $r0;
        android.graphics.Bitmap$Config $r1;

        $r0 = newarray (android.graphics.Bitmap$Config)[2];

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r0[0] = $r1;

        $r0[1] = null;

        <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] ARGB_8888_IN_CONFIGS> = $r0;

        $r0 = newarray (android.graphics.Bitmap$Config)[1];

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        $r0[0] = $r1;

        <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] RGB_565_IN_CONFIGS> = $r0;

        $r0 = newarray (android.graphics.Bitmap$Config)[1];

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_4444>;

        $r0[0] = $r1;

        <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] ARGB_4444_IN_CONFIGS> = $r0;

        $r0 = newarray (android.graphics.Bitmap$Config)[1];

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        $r0[0] = $r1;

        <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] ALPHA_8_IN_CONFIGS> = $r0;

        return;
    }
    public void <init>()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r2;
        java.util.HashMap $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool;

        specialinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool keyPool> = $r1;

        $r2 = new com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap;

        specialinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.Map sortedSizes> = $r3;

        return;
    }
    static java.lang.String access$100(int, android.graphics.Bitmap$Config)
    {
        int $i0;
        android.graphics.Bitmap$Config $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: android.graphics.Bitmap$Config;

        $r1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.lang.String getBitmapString(int,android.graphics.Bitmap$Config)>($i0, $r0);

        return $r1;
    }
    private void decrementBitmapOfSize(java.lang.Integer, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        java.lang.Integer $r1, r5;
        android.graphics.Bitmap$Config $r2;
        java.util.NavigableMap $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 := @parameter0: java.lang.Integer;

        $r2 := @parameter1: android.graphics.Bitmap$Config;

        $r3 = specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.NavigableMap getSizesForConfig(android.graphics.Bitmap$Config)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        if $i0 != 1 goto label1;

        interfaceinvoke $r3.<java.util.NavigableMap: java.lang.Object remove(java.lang.Object)>($r1);

        return;

     label1:
        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + -1;

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

        return;
    }
    private com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key findBestKey(com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key $r1;
        int $i0, i1, i2, $i3, $i4;
        android.graphics.Bitmap$Config $r2, r3;
        android.graphics.Bitmap$Config[] $r4;
        java.util.NavigableMap $r5;
        java.lang.Integer $r6;
        java.lang.Object $r7;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool $r8;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 := @parameter0: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.graphics.Bitmap$Config;

        $r4 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] getInConfigs(android.graphics.Bitmap$Config)>($r2);

        i1 = lengthof $r4;

        i2 = 0;

     label1:
        if i2 >= i1 goto label5;

        r3 = $r4[i2];

        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.NavigableMap getSizesForConfig(android.graphics.Bitmap$Config)>(r3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r7 = interfaceinvoke $r5.<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>($r6);

        $r6 = (java.lang.Integer) $r7;

        if $r6 == null goto label4;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i4 = $i0 * 8;

        if $i3 > $i4 goto label4;

        i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if i1 != $i0 goto label2;

        if r3 != null goto label3;

        if $r2 == null goto label5;

     label2:
        $r8 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool keyPool>;

        virtualinvoke $r8.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool: void offer(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>($r1);

        $r8 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool keyPool>;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r1 = virtualinvoke $r8.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key get(int,android.graphics.Bitmap$Config)>($i0, r3);

        return $r1;

     label3:
        $z0 = virtualinvoke r3.<android.graphics.Bitmap$Config: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label5;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return $r1;
    }
    private static java.lang.String getBitmapString(int, android.graphics.Bitmap$Config)
    {
        int $i0;
        android.graphics.Bitmap$Config $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: android.graphics.Bitmap$Config;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("](");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    private static android.graphics.Bitmap$Config[] getInConfigs(android.graphics.Bitmap$Config)
    {
        android.graphics.Bitmap$Config $r0;
        int $i0;
        int[] $r1;
        android.graphics.Bitmap$Config[] $r2;

        $r0 := @parameter0: android.graphics.Bitmap$Config;

        $r1 = <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$1: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap$Config: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        $r2 = newarray (android.graphics.Bitmap$Config)[1];

        $r2[0] = $r0;

        return $r2;

     label2:
        $r2 = <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] ARGB_8888_IN_CONFIGS>;

        return $r2;

     label3:
        $r2 = <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] RGB_565_IN_CONFIGS>;

        return $r2;

     label4:
        $r2 = <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] ARGB_4444_IN_CONFIGS>;

        return $r2;

     label5:
        $r2 = <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: android.graphics.Bitmap$Config[] ALPHA_8_IN_CONFIGS>;

        return $r2;
    }
    private java.util.NavigableMap getSizesForConfig(android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        android.graphics.Bitmap$Config $r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        java.util.NavigableMap r4;
        java.util.TreeMap r5;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 := @parameter0: android.graphics.Bitmap$Config;

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.Map sortedSizes>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (java.util.NavigableMap) $r2;

        if r4 != null goto label1;

        r5 = new java.util.TreeMap;

        specialinvoke r5.<java.util.TreeMap: void <init>()>();

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.Map sortedSizes>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r5);

        return r5;

     label1:
        return r4;
    }
    public android.graphics.Bitmap get(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        int $i0, $i1, $i2;
        android.graphics.Bitmap$Config $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool $r2;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key $r3;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r4;
        java.lang.Object $r5;
        android.graphics.Bitmap r6;
        java.lang.Integer $r7;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Bitmap$Config;

        $i2 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool keyPool>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key get(int,android.graphics.Bitmap$Config)>($i2, $r1);

        $r3 = specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key findBestKey(com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key,int,android.graphics.Bitmap$Config)>($r3, $i2, $r1);

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r5 = virtualinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object get(com.bumptech.glide.load.engine.bitmap_recycle.Poolable)>($r3);

        r6 = (android.graphics.Bitmap) $r5;

        if r6 == null goto label3;

        $i2 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>(r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1 = virtualinvoke r6.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: void decrementBitmapOfSize(java.lang.Integer,android.graphics.Bitmap$Config)>($r7, $r1);

        $r1 = virtualinvoke r6.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r1 == null goto label2;

        $r1 = virtualinvoke r6.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

     label1:
        virtualinvoke r6.<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        return r6;

     label2:
        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label1;

     label3:
        return r6;
    }
    public int getSize(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        android.graphics.Bitmap $r1;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r1);

        return $i0;
    }
    public java.lang.String logBitmap(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r1;
        java.lang.String $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Bitmap$Config;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.lang.String getBitmapString(int,android.graphics.Bitmap$Config)>($i0, $r1);

        return $r2;
    }
    public java.lang.String logBitmap(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        android.graphics.Bitmap $r1;
        int $i0;
        android.graphics.Bitmap$Config $r2;
        java.lang.String $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r1);

        $r2 = virtualinvoke $r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r3 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.lang.String getBitmapString(int,android.graphics.Bitmap$Config)>($i0, $r2);

        return $r3;
    }
    public void put(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        android.graphics.Bitmap $r1;
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool $r2;
        android.graphics.Bitmap$Config $r3;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key $r4;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r5;
        java.util.NavigableMap $r6;
        java.lang.Integer $r7, r9;
        java.lang.Object $r8;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 := @parameter0: android.graphics.Bitmap;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>($r1);

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool keyPool>;

        $r3 = virtualinvoke $r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r4 = virtualinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$KeyPool: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key get(int,android.graphics.Bitmap$Config)>($i0, $r3);

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        virtualinvoke $r5.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: void put(com.bumptech.glide.load.engine.bitmap_recycle.Poolable,java.lang.Object)>($r4, $r1);

        $r3 = virtualinvoke $r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r6 = specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.NavigableMap getSizesForConfig(android.graphics.Bitmap$Config)>($r3);

        $i0 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key: int access$000(com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key)>($r4);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = interfaceinvoke $r6.<java.util.NavigableMap: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (java.lang.Integer) $r8;

        $i0 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key: int access$000(com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy$Key)>($r4);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        if r9 != null goto label2;

        $i0 = 1;

     label1:
        r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r6.<java.util.NavigableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r9);

        return;

     label2:
        $i0 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        goto label1;
    }
    public android.graphics.Bitmap removeLast()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r1;
        java.lang.Object $r2;
        android.graphics.Bitmap r3;
        int $i0;
        java.lang.Integer $r4;
        android.graphics.Bitmap$Config $r5;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r2 = virtualinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap: java.lang.Object removeLast()>();

        r3 = (android.graphics.Bitmap) $r2;

        if r3 == null goto label1;

        $i0 = staticinvoke <com.bumptech.glide.util.Util: int getBitmapByteSize(android.graphics.Bitmap)>(r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = virtualinvoke r3.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: void decrementBitmapOfSize(java.lang.Integer,android.graphics.Bitmap$Config)>($r4, $r5);

     label1:
        return r3;
    }
    public java.lang.String toString()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        java.lang.StringBuilder $r1, $r8;
        com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap $r2;
        java.util.Map $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.util.Map$Entry r7;
        int $i0, $i1;
        java.lang.String $r9;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SizeConfigStrategy{groupedMap=");

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: com.bumptech.glide.load.engine.bitmap_recycle.GroupedLinkedMap groupedMap>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sortedSizes=(");

        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.Map sortedSizes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r6 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], ");

        goto label1;

     label2:
        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: java.util.Map sortedSizes>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i0 = $i0 + -2;

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i0, $i1, "");

     label3:
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")}");

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
