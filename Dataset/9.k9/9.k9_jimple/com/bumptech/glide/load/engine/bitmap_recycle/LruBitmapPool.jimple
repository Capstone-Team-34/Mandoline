com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool extends java.lang.Object implements com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool
private static final android.graphics.Bitmap$Config DEFAULT_CONFIG
private static final java.lang.String TAG
private final java.util.Set allowedConfigs
private int currentSize
private int evictions
private int hits
private final int initialMaxSize
private int maxSize
private int misses
private int puts
private final com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy
private final com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker tracker
    static void <clinit>()
    {
        android.graphics.Bitmap$Config $r0;

        $r0 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        <com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: android.graphics.Bitmap$Config DEFAULT_CONFIG> = $r0;

        return;
    }
    public void <init>(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r1;
        java.util.Set $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy getDefaultStrategy()>();

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: java.util.Set getDefaultAllowedConfigs()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void <init>(int,com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy,java.util.Set)>($i0, $r1, $r2);

        return;
    }
    void <init>(int, com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy, java.util.Set)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r1;
        java.util.Set r2;
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$NullBitmapTracker $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy;

        r2 := @parameter2: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int initialMaxSize> = $i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize> = $i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy> = $r1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: java.util.Set allowedConfigs> = r2;

        $r3 = new com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$NullBitmapTracker;

        specialinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$NullBitmapTracker: void <init>(com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$1)>(null);

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker tracker> = $r3;

        return;
    }
    public void <init>(int, java.util.Set)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0;
        java.util.Set r1;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        r1 := @parameter1: java.util.Set;

        $r2 = staticinvoke <com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy getDefaultStrategy()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void <init>(int,com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy,java.util.Set)>($i0, $r2, r1);

        return;
    }
    private void dump()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dumpUnchecked()>();

     label1:
        return;
    }
    private void dumpUnchecked()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        java.lang.StringBuilder $r1;
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r2;
        java.lang.String $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hits=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int hits>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", misses=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int misses>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", puts=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int puts>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", evictions=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int evictions>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentSize=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxSize=");

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nStrategy=");

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LruBitmapPool", $r3);

        return;
    }
    private void evict()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)>($i0);

        return;
    }
    private static java.util.Set getDefaultAllowedConfigs()
    {
        java.util.HashSet r0;
        android.graphics.Bitmap$Config[] $r1;
        java.util.List $r2;
        int $i0;
        java.util.Set $r3;

        r0 = new java.util.HashSet;

        specialinvoke r0.<java.util.HashSet: void <init>()>();

        $r1 = staticinvoke <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>();

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        interfaceinvoke r0.<java.util.Set: boolean addAll(java.util.Collection)>($r2);

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(null);

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r0);

        return $r3;
    }
    private static com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy getDefaultStrategy()
    {
        int $i0;
        com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy r0;
        com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy r1;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        r0 = new com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.SizeConfigStrategy: void <init>()>();

        return r0;

     label1:
        r1 = new com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy;

        specialinvoke r1.<com.bumptech.glide.load.engine.bitmap_recycle.AttributeStrategy: void <init>()>();

        return r1;
    }
    private void trimToSize(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0, $i1, $i2;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r1;
        android.graphics.Bitmap $r2;
        boolean $z0;
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        if $i1 <= $i0 goto label3;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r2 = interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: android.graphics.Bitmap removeLast()>();

        if $r2 != null goto label4;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 5);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LruBitmapPool", "Size mismatch, resetting");

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dumpUnchecked()>();

     label2:
        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = 0;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r3 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker tracker>;

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker: void remove(android.graphics.Bitmap)>($r2);

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i2 = interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>($r2);

        $i1 = $i1 - $i2;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = $i1;

        virtualinvoke $r2.<android.graphics.Bitmap: void recycle()>();

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int evictions>;

        $i1 = $i1 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int evictions> = $i1;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z0 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Evicting bitmap=");

        $r1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r5 = interfaceinvoke $r1.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(android.graphics.Bitmap)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r5);

     label5:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dump()>();

     label6:
        goto label1;

     label7:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
    }
    public void clearMemory()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", "clearMemory");

     label1:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)>(0);

        return;
    }
    public android.graphics.Bitmap get(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r1;
        android.graphics.Bitmap $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Bitmap$Config;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: android.graphics.Bitmap getDirty(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        if $r2 == null goto label2;

        virtualinvoke $r2.<android.graphics.Bitmap: void eraseColor(int)>(0);

     label2:
        exitmonitor r0;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public android.graphics.Bitmap getDirty(int, int, android.graphics.Bitmap$Config)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap$Config $r1, $r3;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r2;
        android.graphics.Bitmap $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Bitmap$Config;

        entermonitor r0;

     label01:
        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        if $r1 == null goto label07;

        $r3 = $r1;

     label02:
        $r4 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: android.graphics.Bitmap get(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r3);

        if $r4 != null goto label08;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z0 == 0 goto label03;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing bitmap=");

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r6 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r6);

     label03:
        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int misses>;

        $i2 = $i2 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int misses> = $i2;

     label04:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 2);

        if $z0 == 0 goto label05;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Get bitmap=");

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r6 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LruBitmapPool", $r6);

     label05:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dump()>();

     label06:
        exitmonitor r0;

        return $r4;

     label07:
        $r3 = <com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: android.graphics.Bitmap$Config DEFAULT_CONFIG>;

        goto label02;

     label08:
        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int hits>;

        $i2 = $i2 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int hits> = $i2;

        $i2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $r2 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i3 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>($r4);

        $i2 = $i2 - $i3;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = $i2;

        $r7 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker tracker>;

        interfaceinvoke $r7.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker: void remove(android.graphics.Bitmap)>($r4);

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 12 goto label04;

        virtualinvoke $r4.<android.graphics.Bitmap: void setHasAlpha(boolean)>(1);

     label09:
        goto label04;

     label10:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label01 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
    }
    public int getMaxSize()
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int i0;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        return i0;
    }
    public boolean put(android.graphics.Bitmap)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        android.graphics.Bitmap $r1;
        java.lang.NullPointerException $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy $r4;
        int $i0, $i1;
        java.util.Set $r5;
        android.graphics.Bitmap$Config $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker $r9;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $r1 := @parameter0: android.graphics.Bitmap;

        entermonitor r0;

        if $r1 != null goto label3;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Bitmap must not be null");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label3:
        $z0 = virtualinvoke $r1.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 == 0 goto label4;

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i0 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>($r1);

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        if $i0 > $i1 goto label4;

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: java.util.Set allowedConfigs>;

        $r6 = virtualinvoke $r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z0 != 0 goto label7;

     label4:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 2);

        if $z0 == 0 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reject bitmap from pool, bitmap: ");

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r8 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(android.graphics.Bitmap)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", is mutable: ");

        $z0 = virtualinvoke $r1.<android.graphics.Bitmap: boolean isMutable()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", is allowed config: ");

        $r5 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: java.util.Set allowedConfigs>;

        $r6 = virtualinvoke $r1.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LruBitmapPool", $r8);

     label5:
        $z0 = 0;

     label6:
        exitmonitor r0;

        return $z0;

     label7:
        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $i0 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: int getSize(android.graphics.Bitmap)>($r1);

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: void put(android.graphics.Bitmap)>($r1);

        $r9 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker tracker>;

        interfaceinvoke $r9.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool$BitmapTracker: void add(android.graphics.Bitmap)>($r1);

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int puts>;

        $i1 = $i1 + 1;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int puts> = $i1;

        $i1 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize>;

        $i0 = $i1 + $i0;

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int currentSize> = $i0;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 2);

        if $z0 == 0 goto label8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Put bitmap in pool=");

        $r4 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy strategy>;

        $r8 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.LruPoolStrategy: java.lang.String logBitmap(android.graphics.Bitmap)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LruBitmapPool", $r8);

     label8:
        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void dump()>();

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void evict()>();

     label9:
        $z0 = 1;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
        catch java.lang.Throwable from label7 to label9 with label2;
    }
    public void setSizeMultiplier(float)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        float $f0, $f1;
        int $i0;
        java.lang.Throwable $r1;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $f0 := @parameter0: float;

        entermonitor r0;

     label1:
        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int initialMaxSize>;

        $f1 = (float) $i0;

        $f0 = $f1 * $f0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize> = $i0;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void evict()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void trimMemory(int)
    {
        com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool r0;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @this: com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LruBitmapPool", 3);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trimMemory, level=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LruBitmapPool", $r2);

     label1:
        if $i0 < 60 goto label2;

        virtualinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void clearMemory()>();

        return;

     label2:
        if $i0 < 40 goto label3;

        $i0 = r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: int maxSize>;

        $i0 = $i0 / 2;

        specialinvoke r0.<com.bumptech.glide.load.engine.bitmap_recycle.LruBitmapPool: void trimToSize(int)>($i0);

     label3:
        return;
    }
