com.bumptech.glide.load.engine.DecodeJob extends java.lang.Object
private static final com.bumptech.glide.load.engine.DecodeJob$FileOpener DEFAULT_FILE_OPENER
private static final java.lang.String TAG
private final com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider
private final com.bumptech.glide.load.engine.DiskCacheStrategy diskCacheStrategy
private final com.bumptech.glide.load.data.DataFetcher fetcher
private final com.bumptech.glide.load.engine.DecodeJob$FileOpener fileOpener
private final int height
private volatile boolean isCancelled
private final com.bumptech.glide.provider.DataLoadProvider loadProvider
private final com.bumptech.glide.Priority priority
private final com.bumptech.glide.load.engine.EngineKey resultKey
private final com.bumptech.glide.load.resource.transcode.ResourceTranscoder transcoder
private final com.bumptech.glide.load.Transformation transformation
private final int width
    static void <clinit>()
    {
        com.bumptech.glide.load.engine.DecodeJob$FileOpener $r0;

        $r0 = new com.bumptech.glide.load.engine.DecodeJob$FileOpener;

        specialinvoke $r0.<com.bumptech.glide.load.engine.DecodeJob$FileOpener: void <init>()>();

        <com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$FileOpener DEFAULT_FILE_OPENER> = $r0;

        return;
    }
    public void <init>(com.bumptech.glide.load.engine.EngineKey, int, int, com.bumptech.glide.load.data.DataFetcher, com.bumptech.glide.provider.DataLoadProvider, com.bumptech.glide.load.Transformation, com.bumptech.glide.load.resource.transcode.ResourceTranscoder, com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider, com.bumptech.glide.load.engine.DiskCacheStrategy, com.bumptech.glide.Priority)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.EngineKey $r1;
        int $i0, $i1;
        com.bumptech.glide.load.data.DataFetcher r2;
        com.bumptech.glide.provider.DataLoadProvider r3;
        com.bumptech.glide.load.Transformation r4;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r5;
        com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider $r6;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r7;
        com.bumptech.glide.Priority $r8;
        com.bumptech.glide.load.engine.DecodeJob$FileOpener $r9;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 := @parameter0: com.bumptech.glide.load.engine.EngineKey;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 := @parameter3: com.bumptech.glide.load.data.DataFetcher;

        r3 := @parameter4: com.bumptech.glide.provider.DataLoadProvider;

        r4 := @parameter5: com.bumptech.glide.load.Transformation;

        r5 := @parameter6: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        $r6 := @parameter7: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider;

        $r7 := @parameter8: com.bumptech.glide.load.engine.DiskCacheStrategy;

        $r8 := @parameter9: com.bumptech.glide.Priority;

        $r9 = <com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$FileOpener DEFAULT_FILE_OPENER>;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void <init>(com.bumptech.glide.load.engine.EngineKey,int,int,com.bumptech.glide.load.data.DataFetcher,com.bumptech.glide.provider.DataLoadProvider,com.bumptech.glide.load.Transformation,com.bumptech.glide.load.resource.transcode.ResourceTranscoder,com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider,com.bumptech.glide.load.engine.DiskCacheStrategy,com.bumptech.glide.Priority,com.bumptech.glide.load.engine.DecodeJob$FileOpener)>($r1, $i0, $i1, r2, r3, r4, r5, $r6, $r7, $r8, $r9);

        return;
    }
    void <init>(com.bumptech.glide.load.engine.EngineKey, int, int, com.bumptech.glide.load.data.DataFetcher, com.bumptech.glide.provider.DataLoadProvider, com.bumptech.glide.load.Transformation, com.bumptech.glide.load.resource.transcode.ResourceTranscoder, com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider, com.bumptech.glide.load.engine.DiskCacheStrategy, com.bumptech.glide.Priority, com.bumptech.glide.load.engine.DecodeJob$FileOpener)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.EngineKey $r1;
        int $i0, $i1;
        com.bumptech.glide.load.data.DataFetcher r2;
        com.bumptech.glide.provider.DataLoadProvider r3;
        com.bumptech.glide.load.Transformation r4;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder r5;
        com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider $r6;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r7;
        com.bumptech.glide.Priority $r8;
        com.bumptech.glide.load.engine.DecodeJob$FileOpener $r9;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 := @parameter0: com.bumptech.glide.load.engine.EngineKey;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r2 := @parameter3: com.bumptech.glide.load.data.DataFetcher;

        r3 := @parameter4: com.bumptech.glide.provider.DataLoadProvider;

        r4 := @parameter5: com.bumptech.glide.load.Transformation;

        r5 := @parameter6: com.bumptech.glide.load.resource.transcode.ResourceTranscoder;

        $r6 := @parameter7: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider;

        $r7 := @parameter8: com.bumptech.glide.load.engine.DiskCacheStrategy;

        $r8 := @parameter9: com.bumptech.glide.Priority;

        $r9 := @parameter10: com.bumptech.glide.load.engine.DecodeJob$FileOpener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey> = $r1;

        r0.<com.bumptech.glide.load.engine.DecodeJob: int width> = $i0;

        r0.<com.bumptech.glide.load.engine.DecodeJob: int height> = $i1;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.data.DataFetcher fetcher> = r2;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.provider.DataLoadProvider loadProvider> = r3;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.Transformation transformation> = r4;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.resource.transcode.ResourceTranscoder transcoder> = r5;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider> = $r6;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DiskCacheStrategy diskCacheStrategy> = $r7;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.Priority priority> = $r8;

        r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$FileOpener fileOpener> = $r9;

        return;
    }
    static com.bumptech.glide.load.engine.DecodeJob$FileOpener access$000(com.bumptech.glide.load.engine.DecodeJob)
    {
        com.bumptech.glide.load.engine.DecodeJob $r0;
        com.bumptech.glide.load.engine.DecodeJob$FileOpener r1;

        $r0 := @parameter0: com.bumptech.glide.load.engine.DecodeJob;

        r1 = $r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$FileOpener fileOpener>;

        return r1;
    }
    private com.bumptech.glide.load.engine.Resource cacheAndDecodeSourceData(java.lang.Object) throws java.io.IOException
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        java.lang.Object r1;
        com.bumptech.glide.load.engine.DecodeJob$SourceWriter r2;
        long $l0;
        com.bumptech.glide.provider.DataLoadProvider $r3;
        com.bumptech.glide.load.Encoder $r4;
        com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider $r5;
        com.bumptech.glide.load.engine.cache.DiskCache $r6;
        com.bumptech.glide.load.engine.EngineKey $r7;
        com.bumptech.glide.load.Key $r8;
        boolean $z0;
        com.bumptech.glide.load.engine.Resource $r9;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r1 := @parameter0: java.lang.Object;

        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        r2 = new com.bumptech.glide.load.engine.DecodeJob$SourceWriter;

        $r3 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.provider.DataLoadProvider loadProvider>;

        $r4 = interfaceinvoke $r3.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.Encoder getSourceEncoder()>();

        specialinvoke r2.<com.bumptech.glide.load.engine.DecodeJob$SourceWriter: void <init>(com.bumptech.glide.load.engine.DecodeJob,com.bumptech.glide.load.Encoder,java.lang.Object)>(r0, $r4, r1);

        $r5 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider>;

        $r6 = interfaceinvoke $r5.<com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider: com.bumptech.glide.load.engine.cache.DiskCache getDiskCache()>();

        $r7 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey>;

        $r8 = virtualinvoke $r7.<com.bumptech.glide.load.engine.EngineKey: com.bumptech.glide.load.Key getOriginalKey()>();

        interfaceinvoke $r6.<com.bumptech.glide.load.engine.cache.DiskCache: void put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.cache.DiskCache$Writer)>($r8, r2);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Wrote source to cache", $l0);

     label1:
        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r7 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey>;

        $r8 = virtualinvoke $r7.<com.bumptech.glide.load.engine.EngineKey: com.bumptech.glide.load.Key getOriginalKey()>();

        $r9 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource loadFromCache(com.bumptech.glide.load.Key)>($r8);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label2;

        if $r9 == null goto label2;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Decoded source from cache", $l0);

     label2:
        return $r9;
    }
    private com.bumptech.glide.load.engine.Resource decodeFromSourceData(java.lang.Object) throws java.io.IOException
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        java.lang.Object r1;
        int $i0, $i2;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r2;
        boolean $z0;
        com.bumptech.glide.load.engine.Resource $r3;
        long $l1;
        com.bumptech.glide.provider.DataLoadProvider $r4;
        com.bumptech.glide.load.ResourceDecoder $r5;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DiskCacheStrategy diskCacheStrategy>;

        $z0 = virtualinvoke $r2.<com.bumptech.glide.load.engine.DiskCacheStrategy: boolean cacheSource()>();

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource cacheAndDecodeSourceData(java.lang.Object)>(r1);

        return $r3;

     label1:
        $l1 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r4 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.provider.DataLoadProvider loadProvider>;

        $r5 = interfaceinvoke $r4.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.ResourceDecoder getSourceDecoder()>();

        $i2 = r0.<com.bumptech.glide.load.engine.DecodeJob: int width>;

        $i0 = r0.<com.bumptech.glide.load.engine.DecodeJob: int height>;

        $r3 = interfaceinvoke $r5.<com.bumptech.glide.load.ResourceDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int)>(r1, $i2, $i0);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Decoded from source", $l1);

     label2:
        return $r3;
    }
    private com.bumptech.glide.load.engine.Resource decodeSource() throws java.lang.Exception
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        long $l0;
        com.bumptech.glide.load.data.DataFetcher $r1;
        com.bumptech.glide.Priority $r2;
        java.lang.Object $r3;
        boolean $z0;
        com.bumptech.glide.load.engine.Resource $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

     label1:
        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.data.DataFetcher fetcher>;

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.Priority priority>;

        $r3 = interfaceinvoke $r1.<com.bumptech.glide.load.data.DataFetcher: java.lang.Object loadData(com.bumptech.glide.Priority)>($r2);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

     label2:
        if $z0 == 0 goto label4;

     label3:
        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Fetched data", $l0);

     label4:
        $z0 = r0.<com.bumptech.glide.load.engine.DecodeJob: boolean isCancelled>;

     label5:
        if $z0 == 0 goto label6;

        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.data.DataFetcher fetcher>;

        interfaceinvoke $r1.<com.bumptech.glide.load.data.DataFetcher: void cleanup()>();

        return null;

     label6:
        $r4 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource decodeFromSourceData(java.lang.Object)>($r3);

     label7:
        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.data.DataFetcher fetcher>;

        interfaceinvoke $r1.<com.bumptech.glide.load.data.DataFetcher: void cleanup()>();

        return $r4;

     label8:
        $r5 := @caughtexception;

        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.data.DataFetcher fetcher>;

        interfaceinvoke $r1.<com.bumptech.glide.load.data.DataFetcher: void cleanup()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }
    private com.bumptech.glide.load.engine.Resource loadFromCache(com.bumptech.glide.load.Key) throws java.io.IOException
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.Key $r1;
        int $i0, $i1;
        com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider $r2;
        com.bumptech.glide.load.engine.cache.DiskCache $r3;
        java.io.File $r4;
        com.bumptech.glide.provider.DataLoadProvider $r5;
        com.bumptech.glide.load.ResourceDecoder $r6;
        com.bumptech.glide.load.engine.Resource $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 := @parameter0: com.bumptech.glide.load.Key;

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider>;

        $r3 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider: com.bumptech.glide.load.engine.cache.DiskCache getDiskCache()>();

        $r4 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.cache.DiskCache: java.io.File get(com.bumptech.glide.load.Key)>($r1);

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.provider.DataLoadProvider loadProvider>;

        $r6 = interfaceinvoke $r5.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.ResourceDecoder getCacheDecoder()>();

        $i1 = r0.<com.bumptech.glide.load.engine.DecodeJob: int width>;

        $i0 = r0.<com.bumptech.glide.load.engine.DecodeJob: int height>;

        $r7 = interfaceinvoke $r6.<com.bumptech.glide.load.ResourceDecoder: com.bumptech.glide.load.engine.Resource decode(java.lang.Object,int,int)>($r4, $i1, $i0);

     label2:
        if $r7 != null goto label4;

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider>;

        $r3 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider: com.bumptech.glide.load.engine.cache.DiskCache getDiskCache()>();

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.cache.DiskCache: void delete(com.bumptech.glide.load.Key)>($r1);

        return $r7;

     label3:
        $r8 := @caughtexception;

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider>;

        $r3 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider: com.bumptech.glide.load.engine.cache.DiskCache getDiskCache()>();

        interfaceinvoke $r3.<com.bumptech.glide.load.engine.cache.DiskCache: void delete(com.bumptech.glide.load.Key)>($r1);

        throw $r8;

     label4:
        return $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    private void logWithTimeAndKey(java.lang.String, long)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        java.lang.String $r1;
        long $l0;
        java.lang.StringBuilder $r2;
        double $d0;
        com.bumptech.glide.load.engine.EngineKey $r3;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $d0 = staticinvoke <com.bumptech.glide.util.LogTime: double getElapsedMillis(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", key: ");

        $r3 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("DecodeJob", $r1);

        return;
    }
    private com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.Resource r1;
        com.bumptech.glide.load.resource.transcode.ResourceTranscoder $r2;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.resource.transcode.ResourceTranscoder transcoder>;

        r1 = interfaceinvoke $r2.<com.bumptech.glide.load.resource.transcode.ResourceTranscoder: com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)>(r1);

        return r1;
    }
    private com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.Resource r1, $r3;
        int $i0, $i1;
        com.bumptech.glide.load.Transformation $r2;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.Transformation transformation>;

        $i0 = r0.<com.bumptech.glide.load.engine.DecodeJob: int width>;

        $i1 = r0.<com.bumptech.glide.load.engine.DecodeJob: int height>;

        $r3 = interfaceinvoke $r2.<com.bumptech.glide.load.Transformation: com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource,int,int)>(r1, $i0, $i1);

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        interfaceinvoke r1.<com.bumptech.glide.load.engine.Resource: void recycle()>();

     label2:
        return $r3;
    }
    private com.bumptech.glide.load.engine.Resource transformEncodeAndTranscode(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.Resource r1;
        long $l0;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        r1 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource transform(com.bumptech.glide.load.engine.Resource)>(r1);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Transformed resource from source", $l0);

     label1:
        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void writeTransformedToCache(com.bumptech.glide.load.engine.Resource)>(r1);

        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        r1 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)>(r1);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Transcoded transformed from source", $l0);

     label2:
        return r1;
    }
    private void writeTransformedToCache(com.bumptech.glide.load.engine.Resource)
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.Resource r1;
        com.bumptech.glide.load.engine.DecodeJob$SourceWriter r2;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r3;
        boolean $z0;
        long $l0;
        com.bumptech.glide.provider.DataLoadProvider $r4;
        com.bumptech.glide.load.ResourceEncoder $r5;
        com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider $r6;
        com.bumptech.glide.load.engine.cache.DiskCache $r7;
        com.bumptech.glide.load.engine.EngineKey $r8;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r1 := @parameter0: com.bumptech.glide.load.engine.Resource;

        if r1 == null goto label2;

        $r3 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DiskCacheStrategy diskCacheStrategy>;

        $z0 = virtualinvoke $r3.<com.bumptech.glide.load.engine.DiskCacheStrategy: boolean cacheResult()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        r2 = new com.bumptech.glide.load.engine.DecodeJob$SourceWriter;

        $r4 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.provider.DataLoadProvider loadProvider>;

        $r5 = interfaceinvoke $r4.<com.bumptech.glide.provider.DataLoadProvider: com.bumptech.glide.load.ResourceEncoder getEncoder()>();

        specialinvoke r2.<com.bumptech.glide.load.engine.DecodeJob$SourceWriter: void <init>(com.bumptech.glide.load.engine.DecodeJob,com.bumptech.glide.load.Encoder,java.lang.Object)>(r0, $r5, r1);

        $r6 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider diskCacheProvider>;

        $r7 = interfaceinvoke $r6.<com.bumptech.glide.load.engine.DecodeJob$DiskCacheProvider: com.bumptech.glide.load.engine.cache.DiskCache getDiskCache()>();

        $r8 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey>;

        interfaceinvoke $r7.<com.bumptech.glide.load.engine.cache.DiskCache: void put(com.bumptech.glide.load.Key,com.bumptech.glide.load.engine.cache.DiskCache$Writer)>($r8, r2);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Wrote transformed from source to cache", $l0);

     label2:
        return;
    }
    public void cancel()
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.data.DataFetcher $r1;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        r0.<com.bumptech.glide.load.engine.DecodeJob: boolean isCancelled> = 1;

        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.data.DataFetcher fetcher>;

        interfaceinvoke $r1.<com.bumptech.glide.load.data.DataFetcher: void cancel()>();

        return;
    }
    public com.bumptech.glide.load.engine.Resource decodeFromSource() throws java.lang.Exception
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.Resource $r1;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource decodeSource()>();

        $r1 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource transformEncodeAndTranscode(com.bumptech.glide.load.engine.Resource)>($r1);

        return $r1;
    }
    public com.bumptech.glide.load.engine.Resource decodeResultFromCache() throws java.lang.Exception
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r1;
        boolean $z0;
        long $l0;
        com.bumptech.glide.load.engine.EngineKey $r2;
        com.bumptech.glide.load.engine.Resource $r3;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DiskCacheStrategy diskCacheStrategy>;

        $z0 = virtualinvoke $r1.<com.bumptech.glide.load.engine.DiskCacheStrategy: boolean cacheResult()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey>;

        $r3 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource loadFromCache(com.bumptech.glide.load.Key)>($r2);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Decoded transformed from cache", $l0);

     label2:
        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r3 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource transcode(com.bumptech.glide.load.engine.Resource)>($r3);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Transcoded transformed from cache", $l0);

     label3:
        return $r3;
    }
    public com.bumptech.glide.load.engine.Resource decodeSourceFromCache() throws java.lang.Exception
    {
        com.bumptech.glide.load.engine.DecodeJob r0;
        com.bumptech.glide.load.engine.DiskCacheStrategy $r1;
        boolean $z0;
        long $l0;
        com.bumptech.glide.load.engine.EngineKey $r2;
        com.bumptech.glide.load.Key $r3;
        com.bumptech.glide.load.engine.Resource $r4;

        r0 := @this: com.bumptech.glide.load.engine.DecodeJob;

        $r1 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.DiskCacheStrategy diskCacheStrategy>;

        $z0 = virtualinvoke $r1.<com.bumptech.glide.load.engine.DiskCacheStrategy: boolean cacheSource()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $l0 = staticinvoke <com.bumptech.glide.util.LogTime: long getLogTime()>();

        $r2 = r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.EngineKey resultKey>;

        $r3 = virtualinvoke $r2.<com.bumptech.glide.load.engine.EngineKey: com.bumptech.glide.load.Key getOriginalKey()>();

        $r4 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource loadFromCache(com.bumptech.glide.load.Key)>($r3);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DecodeJob", 2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: void logWithTimeAndKey(java.lang.String,long)>("Decoded source from cache", $l0);

     label2:
        $r4 = specialinvoke r0.<com.bumptech.glide.load.engine.DecodeJob: com.bumptech.glide.load.engine.Resource transformEncodeAndTranscode(com.bumptech.glide.load.engine.Resource)>($r4);

        return $r4;
    }
