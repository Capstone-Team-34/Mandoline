com.bumptech.glide.load.engine.cache.MemorySizeCalculator extends java.lang.Object
static final int BITMAP_POOL_TARGET_SCREENS
static final int BYTES_PER_ARGB_8888_PIXEL
static final float LOW_MEMORY_MAX_SIZE_MULTIPLIER
static final float MAX_SIZE_MULTIPLIER
static final int MEMORY_CACHE_TARGET_SCREENS
private static final java.lang.String TAG
private final int bitmapPoolSize
private final android.content.Context context
private final int memoryCacheSize
    public void <init>(android.content.Context)
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        android.content.Context $r1;
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions $r2;
        java.lang.Object $r3;
        android.app.ActivityManager $r4;
        android.content.res.Resources $r5;
        android.util.DisplayMetrics $r6;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        $r1 := @parameter0: android.content.Context;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r4 = (android.app.ActivityManager) $r3;

        $r2 = new com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions;

        $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        specialinvoke $r2.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$DisplayMetricsScreenDimensions: void <init>(android.util.DisplayMetrics)>($r6);

        specialinvoke r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: void <init>(android.content.Context,android.app.ActivityManager,com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions)>($r1, $r4, $r2);

        return;
    }
    void <init>(android.content.Context, android.app.ActivityManager, com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions)
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        android.content.Context $r1;
        android.app.ActivityManager $r2;
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions $r3;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        float $f0;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.app.ActivityManager;

        $r3 := @parameter2: com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: android.content.Context context> = $r1;

        $i2 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int getMaxSize(android.app.ActivityManager)>($r2);

        i1 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions: int getWidthPixels()>();

        i0 = interfaceinvoke $r3.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator$ScreenDimensions: int getHeightPixels()>();

        i1 = i1 * i0;

        i0 = i1 * 4;

        i1 = i0 * 4;

        i0 = i0 * 2;

        $i3 = i0 + i1;

        if $i3 > $i2 goto label3;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize> = i0;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize> = i1;

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MemorySizeCalculator", 3);

        if $z0 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calculated memory cache size: ");

        $i3 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize>;

        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: java.lang.String toMb(int)>($i3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pool size: ");

        $i3 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize>;

        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: java.lang.String toMb(int)>($i3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memory class limited? ");

        i1 = i0 + i1;

        if i1 <= $i2 goto label4;

        $z0 = 1;

     label2:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" max size: ");

        $r5 = specialinvoke r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: java.lang.String toMb(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" memoryClass: ");

        $i2 = virtualinvoke $r2.<android.app.ActivityManager: int getMemoryClass()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isLowMemoryDevice: ");

        $z0 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: boolean isLowMemoryDevice(android.app.ActivityManager)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MemorySizeCalculator", $r5);

        return;

     label3:
        $f0 = (float) $i2;

        $f0 = $f0 / 6.0F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i4 = $i3 * 2;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize> = $i4;

        $i3 = $i3 * 4;

        r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize> = $i3;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        return;
    }
    private static int getMaxSize(android.app.ActivityManager)
    {
        android.app.ActivityManager $r0;
        int i0;
        float $f0, $f1;
        boolean $z0;

        $r0 := @parameter0: android.app.ActivityManager;

        i0 = virtualinvoke $r0.<android.app.ActivityManager: int getMemoryClass()>();

        i0 = i0 * 1024;

        i0 = i0 * 1024;

        $z0 = staticinvoke <com.bumptech.glide.load.engine.cache.MemorySizeCalculator: boolean isLowMemoryDevice(android.app.ActivityManager)>($r0);

        $f0 = (float) i0;

        if $z0 == 0 goto label2;

        $f1 = 0.33F;

     label1:
        $f0 = $f1 * $f0;

        i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return i0;

     label2:
        $f1 = 0.4F;

        goto label1;
    }
    private static boolean isLowMemoryDevice(android.app.ActivityManager)
    {
        android.app.ActivityManager $r0;
        int i0;
        boolean $z0;

        $r0 := @parameter0: android.app.ActivityManager;

        i0 = <android.os.Build$VERSION: int SDK_INT>;

        if i0 < 11 goto label1;

        if i0 < 19 goto label2;

        $z0 = virtualinvoke $r0.<android.app.ActivityManager: boolean isLowRamDevice()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private java.lang.String toMb(int)
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        int $i0;
        long $l1;
        java.lang.String $r1;
        android.content.Context $r2;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        $i0 := @parameter0: int;

        $r2 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: android.content.Context context>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>($r2, $l1);

        return $r1;
    }
    public int getBitmapPoolSize()
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        int i0;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        i0 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int bitmapPoolSize>;

        return i0;
    }
    public int getMemoryCacheSize()
    {
        com.bumptech.glide.load.engine.cache.MemorySizeCalculator r0;
        int i0;

        r0 := @this: com.bumptech.glide.load.engine.cache.MemorySizeCalculator;

        i0 = r0.<com.bumptech.glide.load.engine.cache.MemorySizeCalculator: int memoryCacheSize>;

        return i0;
    }
