com.bumptech.glide.load.resource.bitmap.Downsampler extends java.lang.Object implements com.bumptech.glide.load.resource.bitmap.BitmapDecoder
public static final com.bumptech.glide.load.resource.bitmap.Downsampler AT_LEAST
public static final com.bumptech.glide.load.resource.bitmap.Downsampler AT_MOST
private static final int MARK_POSITION
public static final com.bumptech.glide.load.resource.bitmap.Downsampler NONE
private static final java.util.Queue OPTIONS_QUEUE
private static final java.lang.String TAG
private static final java.util.Set TYPES_THAT_USE_POOL
    static void <clinit>()
    {
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType $r0, $r1, $r2;
        java.util.EnumSet $r3;
        java.util.Queue $r4;
        com.bumptech.glide.load.resource.bitmap.Downsampler$1 $r5;
        com.bumptech.glide.load.resource.bitmap.Downsampler$2 $r6;
        com.bumptech.glide.load.resource.bitmap.Downsampler$3 $r7;

        $r2 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType JPEG>;

        $r0 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG_A>;

        $r1 = <com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType PNG>;

        $r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>($r2, $r0, $r1);

        <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Set TYPES_THAT_USE_POOL> = $r3;

        $r4 = staticinvoke <com.bumptech.glide.util.Util: java.util.Queue createQueue(int)>(0);

        <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE> = $r4;

        $r5 = new com.bumptech.glide.load.resource.bitmap.Downsampler$1;

        specialinvoke $r5.<com.bumptech.glide.load.resource.bitmap.Downsampler$1: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_LEAST> = $r5;

        $r6 = new com.bumptech.glide.load.resource.bitmap.Downsampler$2;

        specialinvoke $r6.<com.bumptech.glide.load.resource.bitmap.Downsampler$2: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler AT_MOST> = $r6;

        $r7 = new com.bumptech.glide.load.resource.bitmap.Downsampler$3;

        specialinvoke $r7.<com.bumptech.glide.load.resource.bitmap.Downsampler$3: void <init>()>();

        <com.bumptech.glide.load.resource.bitmap.Downsampler: com.bumptech.glide.load.resource.bitmap.Downsampler NONE> = $r7;

        return;
    }
    public void <init>()
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static android.graphics.Bitmap decodeStream(com.bumptech.glide.util.MarkEnforcingInputStream, com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, android.graphics.BitmapFactory$Options)
    {
        com.bumptech.glide.util.MarkEnforcingInputStream $r0;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream $r1;
        android.graphics.BitmapFactory$Options $r2;
        java.io.IOException r3;
        boolean $z0;
        android.graphics.Bitmap $r4;
        java.lang.StringBuilder $r5;
        int $i0;
        java.lang.String $r6;

        $r0 := @parameter0: com.bumptech.glide.util.MarkEnforcingInputStream;

        $r1 := @parameter1: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        $r2 := @parameter2: android.graphics.BitmapFactory$Options;

        $z0 = $r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        if $z0 == 0 goto label4;

        virtualinvoke $r0.<com.bumptech.glide.util.MarkEnforcingInputStream: void mark(int)>(5242880);

     label1:
        $r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r0, null, $r2);

        $z0 = $r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        if $z0 == 0 goto label6;

     label2:
        virtualinvoke $r0.<com.bumptech.glide.util.MarkEnforcingInputStream: void reset()>();

     label3:
        return $r4;

     label4:
        virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void fixMarkLimit()>();

        goto label1;

     label5:
        r3 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 6);

        if $z0 == 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception loading inDecodeBounds=");

        $z0 = $r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sample=");

        $i0 = $r2.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", $r6, r3);

     label6:
        return $r4;

        catch java.io.IOException from label2 to label3 with label5;
    }
    private android.graphics.Bitmap downsampleWithSize(com.bumptech.glide.util.MarkEnforcingInputStream, com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, android.graphics.BitmapFactory$Options, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int, int, com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.util.MarkEnforcingInputStream $r1;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream $r2;
        android.graphics.BitmapFactory$Options $r3;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r4;
        int $i0, $i1, $i2, $i3;
        com.bumptech.glide.load.DecodeFormat $r5;
        android.graphics.Bitmap$Config $r6;
        boolean $z0;
        double $d0, $d1;
        android.graphics.Bitmap $r7;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        $r1 := @parameter0: com.bumptech.glide.util.MarkEnforcingInputStream;

        $r2 := @parameter1: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        $r3 := @parameter2: android.graphics.BitmapFactory$Options;

        $r4 := @parameter3: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $i2 := @parameter6: int;

        $r5 := @parameter7: com.bumptech.glide.load.DecodeFormat;

        $r6 = staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap$Config getConfig(java.io.InputStream,com.bumptech.glide.load.DecodeFormat)>($r1, $r5);

        $r3.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i2;

        $r3.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = $r6;

        $i3 = $r3.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        if $i3 == 1 goto label1;

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        if 19 > $i3 goto label2;

     label1:
        $z0 = staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: boolean shouldUsePool(java.io.InputStream)>($r1);

        if $z0 == 0 goto label2;

        $d0 = (double) $i0;

        $d1 = (double) $i2;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i0 = (int) $d0;

        $d0 = (double) $i1;

        $d1 = (double) $i2;

        $d0 = $d0 / $d1;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d0;

        $r7 = interfaceinvoke $r4.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: android.graphics.Bitmap getDirty(int,int,android.graphics.Bitmap$Config)>($i0, $i1, $r6);

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void setInBitmap(android.graphics.BitmapFactory$Options,android.graphics.Bitmap)>($r3, $r7);

     label2:
        $r7 = staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decodeStream(com.bumptech.glide.util.MarkEnforcingInputStream,com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)>($r1, $r2, $r3);

        return $r7;
    }
    private static android.graphics.Bitmap$Config getConfig(java.io.InputStream, com.bumptech.glide.load.DecodeFormat)
    {
        java.io.InputStream $r0;
        com.bumptech.glide.load.DecodeFormat $r1, $r2;
        int $i0;
        boolean z0, $z1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser $r3;
        java.io.IOException r4, r5, r8, r10;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.Throwable $r9;
        android.graphics.Bitmap$Config r11;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: com.bumptech.glide.load.DecodeFormat;

        $r2 = <com.bumptech.glide.load.DecodeFormat: com.bumptech.glide.load.DecodeFormat ALWAYS_ARGB_8888>;

        if $r1 == $r2 goto label01;

        $r2 = <com.bumptech.glide.load.DecodeFormat: com.bumptech.glide.load.DecodeFormat PREFER_ARGB_8888>;

        if $r1 == $r2 goto label01;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 != 16 goto label02;

     label01:
        r11 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        return r11;

     label02:
        z0 = 0;

        virtualinvoke $r0.<java.io.InputStream: void mark(int)>(1024);

     label03:
        $r3 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

     label04:
        specialinvoke $r3.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: void <init>(java.io.InputStream)>($r0);

        $z1 = virtualinvoke $r3.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: boolean hasAlpha()>();

     label05:
        z0 = $z1;

     label06:
        virtualinvoke $r0.<java.io.InputStream: void reset()>();

     label07:
        if z0 == 0 goto label20;

        r11 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        return r11;

     label08:
        r4 := @caughtexception;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

        if $z1 == 0 goto label07;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r4);

        goto label07;

     label09:
        r5 := @caughtexception;

     label10:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

     label11:
        if $z1 == 0 goto label13;

     label12:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot determine whether the image has alpha or not from header for format ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", $r7, r5);

     label13:
        virtualinvoke $r0.<java.io.InputStream: void reset()>();

     label14:
        goto label07;

     label15:
        r8 := @caughtexception;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

        if $z1 == 0 goto label07;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r8);

        goto label07;

     label16:
        $r9 := @caughtexception;

     label17:
        virtualinvoke $r0.<java.io.InputStream: void reset()>();

     label18:
        throw $r9;

     label19:
        r10 := @caughtexception;

        z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

        if z0 == 0 goto label18;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r10);

        goto label18;

     label20:
        r11 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        return r11;

        catch java.io.IOException from label04 to label05 with label09;
        catch java.lang.Throwable from label03 to label05 with label16;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label17 to label18 with label19;
    }
    private static android.graphics.BitmapFactory$Options getDefaultOptions()
    {
        java.util.Queue $r0, $r2;
        java.lang.Object $r1;
        android.graphics.BitmapFactory$Options r3;
        java.lang.Throwable $r4, $r5;

        entermonitor class "Lcom/bumptech/glide/load/resource/bitmap/Downsampler;";

     label1:
        $r0 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE>;

        entermonitor $r0;

     label2:
        $r2 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE>;

        $r1 = interfaceinvoke $r2.<java.util.Queue: java.lang.Object poll()>();

        r3 = (android.graphics.BitmapFactory$Options) $r1;

        exitmonitor $r0;

     label3:
        if r3 != null goto label5;

     label4:
        r3 = new android.graphics.BitmapFactory$Options;

        specialinvoke r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void resetOptions(android.graphics.BitmapFactory$Options)>(r3);

     label5:
        exitmonitor class "Lcom/bumptech/glide/load/resource/bitmap/Downsampler;";

        return r3;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor $r0;

     label8:
        throw $r4;

     label9:
        $r5 := @caughtexception;

        exitmonitor class "Lcom/bumptech/glide/load/resource/bitmap/Downsampler;";

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }
    private int getRoundedSampleSize(int, int, int, int, int)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        if $i4 != -2147483648 goto label6;

        $i4 = $i2;

     label1:
        if $i3 != -2147483648 goto label7;

        $i3 = $i1;

     label2:
        if $i0 == 90 goto label3;

        if $i0 != 270 goto label8;

     label3:
        $i0 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int getSampleSize(int,int,int,int)>($i2, $i1, $i3, $i4);

     label4:
        if $i0 != 0 goto label9;

        $i0 = 0;

     label5:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0);

        return $i0;

     label6:
        goto label1;

     label7:
        goto label2;

     label8:
        $i0 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int getSampleSize(int,int,int,int)>($i1, $i2, $i3, $i4);

        goto label4;

     label9:
        $i0 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        goto label5;
    }
    private static void releaseOptions(android.graphics.BitmapFactory$Options)
    {
        android.graphics.BitmapFactory$Options $r0;
        java.util.Queue $r1, $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void resetOptions(android.graphics.BitmapFactory$Options)>($r0);

        $r1 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE>;

        entermonitor $r1;

     label1:
        $r2 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Queue OPTIONS_QUEUE>;

        interfaceinvoke $r2.<java.util.Queue: boolean offer(java.lang.Object)>($r0);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    private static void resetOptions(android.graphics.BitmapFactory$Options)
    {
        android.graphics.BitmapFactory$Options $r0;
        int $i0;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        $r0.<android.graphics.BitmapFactory$Options: byte[] inTempStorage> = null;

        $r0.<android.graphics.BitmapFactory$Options: boolean inDither> = 0;

        $r0.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        $r0.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

        $r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap$Config inPreferredConfig> = null;

        $r0.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r0.<android.graphics.BitmapFactory$Options: int outWidth> = 0;

        $r0.<android.graphics.BitmapFactory$Options: int outHeight> = 0;

        $r0.<android.graphics.BitmapFactory$Options: java.lang.String outMimeType> = null;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if 11 > $i0 goto label1;

        $r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = null;

        $r0.<android.graphics.BitmapFactory$Options: boolean inMutable> = 1;

     label1:
        return;
    }
    private static void setInBitmap(android.graphics.BitmapFactory$Options, android.graphics.Bitmap)
    {
        android.graphics.BitmapFactory$Options $r0;
        android.graphics.Bitmap $r1;
        int $i0;

        $r0 := @parameter0: android.graphics.BitmapFactory$Options;

        $r1 := @parameter1: android.graphics.Bitmap;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if 11 > $i0 goto label1;

        $r0.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = $r1;

     label1:
        return;
    }
    private static boolean shouldUsePool(java.io.InputStream)
    {
        java.io.InputStream $r0;
        int $i0;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser $r1;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType $r2;
        java.util.Set $r3;
        boolean $z0, $z1;
        java.io.IOException r4, r5, r6, r8;
        java.lang.Throwable $r7;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if 19 > $i0 goto label01;

        return 1;

     label01:
        virtualinvoke $r0.<java.io.InputStream: void mark(int)>(1024);

     label02:
        $r1 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

     label03:
        specialinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: void <init>(java.io.InputStream)>($r0);

        $r2 = virtualinvoke $r1.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$ImageType getType()>();

     label04:
        $r3 = <com.bumptech.glide.load.resource.bitmap.Downsampler: java.util.Set TYPES_THAT_USE_POOL>;

     label05:
        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2);

     label06:
        virtualinvoke $r0.<java.io.InputStream: void reset()>();

     label07:
        return $z0;

     label08:
        r4 := @caughtexception;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

        if $z1 == 0 goto label20;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r4);

        return $z0;

     label09:
        r5 := @caughtexception;

     label10:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

     label11:
        if $z0 == 0 goto label13;

     label12:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot determine the image type from header", r5);

     label13:
        virtualinvoke $r0.<java.io.InputStream: void reset()>();

     label14:
        return 0;

     label15:
        r6 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

        if $z0 == 0 goto label14;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r6);

        goto label14;

     label16:
        $r7 := @caughtexception;

     label17:
        virtualinvoke $r0.<java.io.InputStream: void reset()>();

     label18:
        throw $r7;

     label19:
        r8 := @caughtexception;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

        if $z0 == 0 goto label18;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r8);

        goto label18;

     label20:
        return $z0;

        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.lang.Throwable from label02 to label06 with label16;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label17 to label18 with label19;
    }
    public android.graphics.Bitmap decode(java.io.InputStream, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int, com.bumptech.glide.load.DecodeFormat)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        java.io.InputStream $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r2;
        int $i0, $i1, i2, i3, i4, $i5;
        com.bumptech.glide.load.DecodeFormat $r3;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream r4;
        com.bumptech.glide.util.MarkEnforcingInputStream r5;
        com.bumptech.glide.util.ByteArrayPool $r6;
        byte[] $r7, $r8;
        android.graphics.BitmapFactory$Options $r9;
        com.bumptech.glide.util.ExceptionCatchingInputStream $r10;
        com.bumptech.glide.load.resource.bitmap.ImageHeaderParser $r11;
        int[] $r12;
        android.graphics.Bitmap $r13, r21, $r22;
        java.io.IOException $r14, r17, r18, r20;
        java.lang.RuntimeException $r15;
        java.lang.Throwable $r16, $r19;
        boolean $z0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: com.bumptech.glide.load.DecodeFormat;

        $r6 = staticinvoke <com.bumptech.glide.util.ByteArrayPool: com.bumptech.glide.util.ByteArrayPool get()>();

        $r7 = virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()>();

        $r8 = virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: byte[] getBytes()>();

        $r9 = staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.BitmapFactory$Options getDefaultOptions()>();

        r4 = new com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        specialinvoke r4.<com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream: void <init>(java.io.InputStream,byte[])>($r1, $r8);

        $r10 = staticinvoke <com.bumptech.glide.util.ExceptionCatchingInputStream: com.bumptech.glide.util.ExceptionCatchingInputStream obtain(java.io.InputStream)>(r4);

        r5 = new com.bumptech.glide.util.MarkEnforcingInputStream;

        specialinvoke r5.<com.bumptech.glide.util.MarkEnforcingInputStream: void <init>(java.io.InputStream)>($r10);

     label01:
        virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: void mark(int)>(5242880);

     label02:
        i4 = 0;

     label03:
        $r11 = new com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;

     label04:
        specialinvoke $r11.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: void <init>(java.io.InputStream)>($r10);

        i2 = virtualinvoke $r11.<com.bumptech.glide.load.resource.bitmap.ImageHeaderParser: int getOrientation()>();

     label05:
        i4 = i2;

     label06:
        virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: void reset()>();

     label07:
        $r9.<android.graphics.BitmapFactory$Options: byte[] inTempStorage> = $r7;

        $r12 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int[] getDimensions(com.bumptech.glide.util.MarkEnforcingInputStream,com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)>(r5, r4, $r9);

        i2 = $r12[0];

        i3 = $r12[1];

        $i5 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: int getExifOrientationDegrees(int)>(i4);

        $i0 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: int getRoundedSampleSize(int,int,int,int,int)>($i5, i2, i3, $i0, $i1);

        $r13 = specialinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap downsampleWithSize(com.bumptech.glide.util.MarkEnforcingInputStream,com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int,int,com.bumptech.glide.load.DecodeFormat)>(r5, r4, $r9, $r2, i2, i3, $i0, $r3);

        $r14 = virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: java.io.IOException getException()>();

     label08:
        if $r14 == null goto label35;

     label09:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label10:
        $r16 := @caughtexception;

        virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>($r7);

        virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>($r8);

        virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: void release()>();

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void releaseOptions(android.graphics.BitmapFactory$Options)>($r9);

        throw $r16;

     label11:
        $r14 := @caughtexception;

     label12:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

     label13:
        if $z0 == 0 goto label07;

     label14:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", $r14);

     label15:
        goto label07;

     label16:
        r17 := @caughtexception;

     label17:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

     label18:
        if $z0 == 0 goto label20;

     label19:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot determine the image orientation from header", r17);

     label20:
        virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: void reset()>();

     label21:
        goto label07;

     label22:
        r18 := @caughtexception;

     label23:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

     label24:
        if $z0 == 0 goto label07;

     label25:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r18);

     label26:
        goto label07;

     label27:
        $r19 := @caughtexception;

     label28:
        virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: void reset()>();

     label29:
        throw $r19;

     label30:
        r20 := @caughtexception;

     label31:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Downsampler", 5);

     label32:
        if $z0 == 0 goto label29;

     label33:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Downsampler", "Cannot reset the input stream", r20);

     label34:
        goto label29;

     label35:
        r21 = null;

        if $r13 == null goto label43;

     label36:
        $r22 = staticinvoke <com.bumptech.glide.load.resource.bitmap.TransformationUtils: android.graphics.Bitmap rotateImageExif(android.graphics.Bitmap,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int)>($r13, $r2, i4);

     label37:
        r21 = $r22;

     label38:
        $z0 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r22);

     label39:
        if $z0 != 0 goto label43;

     label40:
        $z0 = interfaceinvoke $r2.<com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool: boolean put(android.graphics.Bitmap)>($r13);

     label41:
        if $z0 != 0 goto label43;

     label42:
        virtualinvoke $r13.<android.graphics.Bitmap: void recycle()>();

     label43:
        virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>($r7);

        virtualinvoke $r6.<com.bumptech.glide.util.ByteArrayPool: boolean releaseBytes(byte[])>($r8);

        virtualinvoke $r10.<com.bumptech.glide.util.ExceptionCatchingInputStream: void release()>();

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: void releaseOptions(android.graphics.BitmapFactory$Options)>($r9);

        return r21;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.io.IOException from label04 to label05 with label16;
        catch java.lang.Throwable from label03 to label05 with label27;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
        catch java.lang.Throwable from label14 to label15 with label10;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label10;
        catch java.lang.Throwable from label23 to label24 with label10;
        catch java.lang.Throwable from label25 to label26 with label10;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.lang.Throwable from label28 to label29 with label10;
        catch java.lang.Throwable from label29 to label30 with label10;
        catch java.lang.Throwable from label31 to label32 with label10;
        catch java.lang.Throwable from label33 to label34 with label10;
        catch java.lang.Throwable from label36 to label37 with label10;
        catch java.lang.Throwable from label38 to label39 with label10;
        catch java.lang.Throwable from label40 to label41 with label10;
        catch java.lang.Throwable from label42 to label43 with label10;
    }
    public volatile android.graphics.Bitmap decode(java.lang.Object, com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool, int, int, com.bumptech.glide.load.DecodeFormat) throws java.lang.Exception
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        java.lang.Object $r1;
        com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool $r2;
        int $i0, $i1;
        com.bumptech.glide.load.DecodeFormat $r3;
        android.graphics.Bitmap $r4;
        java.io.InputStream $r5;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: com.bumptech.glide.load.DecodeFormat;

        $r5 = (java.io.InputStream) $r1;

        $r4 = virtualinvoke r0.<com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decode(java.io.InputStream,com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool,int,int,com.bumptech.glide.load.DecodeFormat)>($r5, $r2, $i0, $i1, $r3);

        return $r4;
    }
    public int[] getDimensions(com.bumptech.glide.util.MarkEnforcingInputStream, com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream, android.graphics.BitmapFactory$Options)
    {
        com.bumptech.glide.load.resource.bitmap.Downsampler r0;
        com.bumptech.glide.util.MarkEnforcingInputStream $r1;
        com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream $r2;
        android.graphics.BitmapFactory$Options $r3;
        int[] $r4;
        int $i0;

        r0 := @this: com.bumptech.glide.load.resource.bitmap.Downsampler;

        $r1 := @parameter0: com.bumptech.glide.util.MarkEnforcingInputStream;

        $r2 := @parameter1: com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream;

        $r3 := @parameter2: android.graphics.BitmapFactory$Options;

        $r3.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <com.bumptech.glide.load.resource.bitmap.Downsampler: android.graphics.Bitmap decodeStream(com.bumptech.glide.util.MarkEnforcingInputStream,com.bumptech.glide.load.resource.bitmap.RecyclableBufferedInputStream,android.graphics.BitmapFactory$Options)>($r1, $r2, $r3);

        $r3.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r4 = newarray (int)[2];

        $i0 = $r3.<android.graphics.BitmapFactory$Options: int outWidth>;

        $r4[0] = $i0;

        $i0 = $r3.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r4[1] = $i0;

        return $r4;
    }
protected abstract int getSampleSize(int, int, int, int) { 
// no body
} 
