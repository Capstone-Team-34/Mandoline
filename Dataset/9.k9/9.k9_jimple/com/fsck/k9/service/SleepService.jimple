com.fsck.k9.service.SleepService extends com.fsck.k9.service.CoreService
private static java.lang.String ALARM_FIRED
private static java.lang.String LATCH_ID
private static java.util.concurrent.atomic.AtomicInteger latchId
private static java.util.concurrent.ConcurrentHashMap sleepData
    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        <com.fsck.k9.service.SleepService: java.lang.String ALARM_FIRED> = "com.fsck.k9.service.SleepService.ALARM_FIRED";

        <com.fsck.k9.service.SleepService: java.lang.String LATCH_ID> = "com.fsck.k9.service.SleepService.LATCH_ID_EXTRA";

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <com.fsck.k9.service.SleepService: java.util.concurrent.ConcurrentHashMap sleepData> = $r0;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <com.fsck.k9.service.SleepService: java.util.concurrent.atomic.AtomicInteger latchId> = $r1;

        return;
    }
    public void <init>()
    {
        com.fsck.k9.service.SleepService r0;

        r0 := @this: com.fsck.k9.service.SleepService;

        specialinvoke r0.<com.fsck.k9.service.CoreService: void <init>()>();

        return;
    }
    private static void endSleep(java.lang.Integer)
    {
        java.lang.Integer $r0;
        java.util.concurrent.CountDownLatch r1;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        com.fsck.k9.service.SleepService$SleepDatum r4;
        java.lang.Object[] $r5;

        $r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

        if $i0 == -1 goto label4;

        $r2 = <com.fsck.k9.service.SleepService: java.util.concurrent.ConcurrentHashMap sleepData>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r0);

        r4 = (com.fsck.k9.service.SleepService$SleepDatum) $r3;

        if r4 == null goto label3;

        r1 = r4.<com.fsck.k9.service.SleepService$SleepDatum: java.util.concurrent.CountDownLatch latch>;

        if r1 != null goto label2;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r0;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("SleepService No CountDownLatch available with id = %s", $r5);

     label1:
        staticinvoke <com.fsck.k9.service.SleepService: void reacquireWakeLock(com.fsck.k9.service.SleepService$SleepDatum)>(r4);

        r1 = r4.<com.fsck.k9.service.SleepService$SleepDatum: java.util.concurrent.CountDownLatch reacquireLatch>;

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r0;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService Counting down CountDownLatch with id = %d", $r5);

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        goto label1;

     label3:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r0;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService Sleep for id %d already finished", $r5);

     label4:
        return;
    }
    private static void reacquireWakeLock(com.fsck.k9.service.SleepService$SleepDatum)
    {
        com.fsck.k9.service.SleepService$SleepDatum $r0;
        long l0;
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r1;
        java.lang.Long $r2;
        java.lang.Object[] $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: com.fsck.k9.service.SleepService$SleepDatum;

        r1 = $r0.<com.fsck.k9.service.SleepService$SleepDatum: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock wakeLock>;

        if r1 == null goto label5;

        entermonitor r1;

     label1:
        l0 = $r0.<com.fsck.k9.service.SleepService$SleepDatum: long timeout>;

        $r3 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3[0] = $r2;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService Acquiring wakeLock for %d ms", $r3);

        virtualinvoke r1.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: void acquire(long)>(l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static void sleep(android.content.Context, long, com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock, long)
    {
        android.content.Context $r0;
        long $l0, $l1, l2, $l4;
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock $r1;
        android.content.Intent r2;
        java.util.concurrent.CountDownLatch r3, $r10;
        com.fsck.k9.service.SleepService$SleepDatum r4, r15;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i3;
        java.lang.Integer $r6;
        java.lang.Object[] $r7;
        java.lang.Thread $r8;
        java.lang.String $r9;
        java.util.concurrent.ConcurrentHashMap $r11;
        java.lang.StringBuilder $r12;
        java.util.concurrent.TimeUnit $r13;
        boolean $z0;
        java.lang.Object $r14;
        byte $b5;
        java.lang.Long $r16;
        java.lang.InterruptedException r17, r18;

        $r0 := @parameter0: android.content.Context;

        $l0 := @parameter1: long;

        $r1 := @parameter2: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $l1 := @parameter3: long;

        $r5 = <com.fsck.k9.service.SleepService: java.util.concurrent.atomic.AtomicInteger latchId>;

        $i3 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r6;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

        $r7[1] = $r9;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService Preparing CountDownLatch with id = %d, thread %s", $r7);

        r4 = new com.fsck.k9.service.SleepService$SleepDatum;

        specialinvoke r4.<com.fsck.k9.service.SleepService$SleepDatum: void <init>(com.fsck.k9.service.SleepService$1)>(null);

        r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r4.<com.fsck.k9.service.SleepService$SleepDatum: java.util.concurrent.CountDownLatch latch> = r3;

        $r10 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r10.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r4.<com.fsck.k9.service.SleepService$SleepDatum: java.util.concurrent.CountDownLatch reacquireLatch> = $r10;

        $r11 = <com.fsck.k9.service.SleepService: java.util.concurrent.ConcurrentHashMap sleepData>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r4);

        r2 = new android.content.Intent;

        specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Lcom/fsck/k9/service/SleepService;");

        $r9 = <com.fsck.k9.service.SleepService: java.lang.String LATCH_ID>;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>($r9, $r6);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r9 = <com.fsck.k9.service.SleepService: java.lang.String ALARM_FIRED>;

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>($r9);

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = $l4 + $l0;

        staticinvoke <com.fsck.k9.service.BootReceiver: void scheduleIntent(android.content.Context,long,android.content.Intent)>($r0, l2, r2);

        if $r1 == null goto label01;

        r4.<com.fsck.k9.service.SleepService$SleepDatum: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock wakeLock> = $r1;

        r4.<com.fsck.k9.service.SleepService$SleepDatum: long timeout> = $l1;

        virtualinvoke $r1.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: void release()>();

     label01:
        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label02:
        $z0 = virtualinvoke r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>($l0, $r13);

     label03:
        if $z0 != 0 goto label07;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r6;

     label04:
        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

     label05:
        $r7[1] = $r9;

     label06:
        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService latch timed out for id = %d, thread %s", $r7);

     label07:
        $r11 = <com.fsck.k9.service.SleepService: java.util.concurrent.ConcurrentHashMap sleepData>;

        $r14 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r6);

        r15 = (com.fsck.k9.service.SleepService$SleepDatum) $r14;

        if r15 != null goto label25;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r6;

     label08:
        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

     label09:
        $r7[1] = $r9;

     label10:
        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService waiting for reacquireLatch for id = %d, thread %s", $r7);

     label11:
        r3 = r4.<com.fsck.k9.service.SleepService$SleepDatum: java.util.concurrent.CountDownLatch reacquireLatch>;

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label12:
        $z0 = virtualinvoke r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5000L, $r13);

     label13:
        if $z0 != 0 goto label19;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r6;

     label14:
        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

     label15:
        $r7[1] = $r9;

     label16:
        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("SleepService reacquireLatch timed out for id = %d, thread %s", $r7);

     label17:
        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = $l1 - $l4;

        $b5 = $l1 cmp $l0;

        if $b5 >= 0 goto label26;

        $r7 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r7[0] = $r16;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r7[1] = $r16;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("SleepService sleep time too short: requested was %d, actual was %d", $r7);

        return;

     label18:
        r17 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r17, "SleepService Interrupted while awaiting latch", $r7);

        goto label07;

     label19:
        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r6;

     label20:
        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

     label21:
        $r7[1] = $r9;

     label22:
        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService reacquireLatch finished for id = %d, thread %s", $r7);

     label23:
        goto label17;

     label24:
        r18 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r18, "SleepService Interrupted while awaiting reacquireLatch", $r7);

        goto label17;

     label25:
        staticinvoke <com.fsck.k9.service.SleepService: void reacquireWakeLock(com.fsck.k9.service.SleepService$SleepDatum)>(r15);

        goto label17;

     label26:
        $r7 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r7[0] = $r16;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r7[1] = $r16;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("SleepService requested sleep time was %d, actual was %d", $r7);

        return;

        catch java.lang.InterruptedException from label02 to label03 with label18;
        catch java.lang.InterruptedException from label04 to label05 with label18;
        catch java.lang.InterruptedException from label06 to label07 with label18;
        catch java.lang.InterruptedException from label08 to label09 with label24;
        catch java.lang.InterruptedException from label10 to label11 with label24;
        catch java.lang.InterruptedException from label12 to label13 with label24;
        catch java.lang.InterruptedException from label14 to label15 with label24;
        catch java.lang.InterruptedException from label16 to label17 with label24;
        catch java.lang.InterruptedException from label20 to label21 with label24;
        catch java.lang.InterruptedException from label22 to label23 with label24;
    }
    public int startService(android.content.Intent, int)
    {
        com.fsck.k9.service.SleepService r0;
        android.content.Intent $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.lang.Integer $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.fsck.k9.service.SleepService;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

     label1:
        $r2 = virtualinvoke $r1.<android.content.Intent: java.lang.String getAction()>();

        $r3 = <com.fsck.k9.service.SleepService: java.lang.String ALARM_FIRED>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

     label2:
        if $z0 == 0 goto label4;

     label3:
        $r2 = <com.fsck.k9.service.SleepService: java.lang.String LATCH_ID>;

        $i1 = virtualinvoke $r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>($r2, -1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        staticinvoke <com.fsck.k9.service.SleepService: void endSleep(java.lang.Integer)>($r4);

     label4:
        virtualinvoke r0.<com.fsck.k9.service.SleepService: void stopSelf(int)>($i0);

        return 2;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.service.SleepService: void stopSelf(int)>($i0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
