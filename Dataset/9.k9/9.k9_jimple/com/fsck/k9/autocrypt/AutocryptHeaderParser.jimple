com.fsck.k9.autocrypt.AutocryptHeaderParser extends java.lang.Object
private static final com.fsck.k9.autocrypt.AutocryptHeaderParser INSTANCE
    static void <clinit>()
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser $r0;

        $r0 = new com.fsck.k9.autocrypt.AutocryptHeaderParser;

        specialinvoke $r0.<com.fsck.k9.autocrypt.AutocryptHeaderParser: void <init>()>();

        <com.fsck.k9.autocrypt.AutocryptHeaderParser: com.fsck.k9.autocrypt.AutocryptHeaderParser INSTANCE> = $r0;

        return;
    }
    private void <init>()
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser r0;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeaderParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static com.fsck.k9.autocrypt.AutocryptHeaderParser getInstance()
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser r0;

        r0 = <com.fsck.k9.autocrypt.AutocryptHeaderParser: com.fsck.k9.autocrypt.AutocryptHeaderParser INSTANCE>;

        return r0;
    }
    private boolean hasCriticalParameters(java.util.Map)
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser r0;
        java.util.Map r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String r5;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeaderParser;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        if r5 == null goto label1;

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("_");

        if $z0 != 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    private java.util.ArrayList parseAllAutocryptHeaders(java.lang.String[])
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser r0;
        java.lang.String[] $r1;
        java.util.ArrayList r2;
        java.lang.String r3;
        int $i0, $i1;
        com.fsck.k9.autocrypt.AutocryptHeader $r4;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeaderParser;

        $r1 := @parameter0: java.lang.String[];

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r3 = $r1[$i1];

        $r4 = virtualinvoke r0.<com.fsck.k9.autocrypt.AutocryptHeaderParser: com.fsck.k9.autocrypt.AutocryptHeader parseAutocryptHeader(java.lang.String)>(r3);

        if $r4 == null goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return r2;
    }
    com.fsck.k9.autocrypt.AutocryptHeader getValidAutocryptHeader(com.fsck.k9.mail.Message)
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser r0;
        com.fsck.k9.mail.Message $r1;
        boolean z0;
        java.lang.String[] $r2;
        java.util.ArrayList $r3;
        int $i0;
        java.lang.Object $r4;
        com.fsck.k9.autocrypt.AutocryptHeader $r5;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeaderParser;

        $r1 := @parameter0: com.fsck.k9.mail.Message;

        z0 = 1;

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.Message: java.lang.String[] getHeader(java.lang.String)>("Autocrypt");

        $r3 = specialinvoke r0.<com.fsck.k9.autocrypt.AutocryptHeaderParser: java.util.ArrayList parseAllAutocryptHeaders(java.lang.String[])>($r2);

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label2;

     label1:
        if z0 == 0 goto label3;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (com.fsck.k9.autocrypt.AutocryptHeader) $r4;

        return $r5;

     label2:
        z0 = 0;

        goto label1;

     label3:
        return null;
    }
    com.fsck.k9.autocrypt.AutocryptHeader parseAutocryptHeader(java.lang.String)
    {
        com.fsck.k9.autocrypt.AutocryptHeaderParser r0;
        java.lang.String $r1, r6, $r7;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.lang.Object[] $r4;
        okio.ByteString $r5;
        com.fsck.k9.autocrypt.AutocryptHeader $r8;
        byte[] $r9;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeaderParser;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.fsck.k9.mail.internet.MimeUtility: java.util.Map getAllHeaderParameters(java.lang.String)>($r1);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("type");

        $r1 = (java.lang.String) $r3;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 != 0 goto label1;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("autocrypt: unsupported type parameter %s", $r4);

        return null;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("keydata");

        $r1 = (java.lang.String) $r3;

        if $r1 != null goto label2;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("autocrypt: missing key parameter", $r4);

        return null;

     label2:
        $r5 = staticinvoke <okio.ByteString: okio.ByteString decodeBase64(java.lang.String)>($r1);

        if $r5 != null goto label3;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("autocrypt: error parsing base64 data", $r4);

        return null;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("addr");

        $r1 = (java.lang.String) $r3;

        if $r1 != null goto label4;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("autocrypt: no to header!", $r4);

        return null;

     label4:
        $z0 = 0;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("prefer-encrypt");

        r6 = (java.lang.String) $r3;

        $r7 = "mutual";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z1 == 0 goto label5;

        $z0 = 1;

     label5:
        $z1 = specialinvoke r0.<com.fsck.k9.autocrypt.AutocryptHeaderParser: boolean hasCriticalParameters(java.util.Map)>($r2);

        if $z1 != 0 goto label6;

        $r8 = new com.fsck.k9.autocrypt.AutocryptHeader;

        $r9 = virtualinvoke $r5.<okio.ByteString: byte[] toByteArray()>();

        specialinvoke $r8.<com.fsck.k9.autocrypt.AutocryptHeader: void <init>(java.util.Map,java.lang.String,byte[],boolean)>($r2, $r1, $r9, $z0);

        return $r8;

     label6:
        return null;
    }
