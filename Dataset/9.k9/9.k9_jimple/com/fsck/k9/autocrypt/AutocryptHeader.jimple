com.fsck.k9.autocrypt.AutocryptHeader extends java.lang.Object
static final java.lang.String AUTOCRYPT_HEADER
static final java.lang.String AUTOCRYPT_PARAM_ADDR
static final java.lang.String AUTOCRYPT_PARAM_KEY_DATA
static final java.lang.String AUTOCRYPT_PARAM_PREFER_ENCRYPT
static final java.lang.String AUTOCRYPT_PARAM_TYPE
static final java.lang.String AUTOCRYPT_PREFER_ENCRYPT_MUTUAL
static final java.lang.String AUTOCRYPT_TYPE_1
private static final int HEADER_LINE_LENGTH
final java.lang.String addr
final boolean isPreferEncryptMutual
final byte[] keyData
final java.util.Map parameters
    void <init>(java.util.Map, java.lang.String, byte[], boolean)
    {
        com.fsck.k9.autocrypt.AutocryptHeader r0;
        java.util.Map r1;
        java.lang.String $r2;
        byte[] $r3;
        boolean $z0;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeader;

        r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: byte[];

        $z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.util.Map parameters> = r1;

        r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.lang.String addr> = $r2;

        r0.<com.fsck.k9.autocrypt.AutocryptHeader: byte[] keyData> = $r3;

        r0.<com.fsck.k9.autocrypt.AutocryptHeader: boolean isPreferEncryptMutual> = $z0;

        return;
    }
    private void appendBase64KeyData(java.lang.StringBuilder)
    {
        com.fsck.k9.autocrypt.AutocryptHeader r0;
        java.lang.StringBuilder $r1, $r5;
        byte[] $r2;
        okio.ByteString $r3;
        java.lang.String $r4;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeader;

        $r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: byte[] keyData>;

        $r3 = staticinvoke <okio.ByteString: okio.ByteString of(byte[])>($r2);

        $r4 = virtualinvoke $r3.<okio.ByteString: java.lang.String base64()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i1 = 76 - $i1;

        if $i1 <= 0 goto label2;

        if $i0 >= $i1 goto label2;

        z0 = 1;

     label1:
        if z0 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r4, 0, $i0);

        return;

     label2:
        z0 = 0;

        goto label1;

     label3:
        if $i1 <= 0 goto label6;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r4, 0, $i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n ");

     label4:
        if $i1 >= $i0 goto label8;

        $i2 = $i1 + 76;

        if $i2 > $i0 goto label7;

        $i2 = $i1 + 76;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r4, $i1, $i2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n ");

     label5:
        $i1 = $i1 + 76;

        goto label4;

     label6:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n ");

        $i1 = 0;

        goto label4;

     label7:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r4, $i1, $i0);

        goto label5;

     label8:
        return;
    }
    public boolean equals(java.lang.Object)
    {
        com.fsck.k9.autocrypt.AutocryptHeader r0, r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;
        byte[] $r5, $r6;
        java.lang.String $r7, $r8;
        java.util.Map $r9, $r10;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeader;

        $r1 := @parameter0: java.lang.Object;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

     label2:
        return 0;

     label3:
        r4 = (com.fsck.k9.autocrypt.AutocryptHeader) $r1;

        $z0 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: boolean isPreferEncryptMutual>;

        $z1 = r4.<com.fsck.k9.autocrypt.AutocryptHeader: boolean isPreferEncryptMutual>;

        if $z0 == $z1 goto label4;

        return 0;

     label4:
        $r5 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: byte[] keyData>;

        $r6 = r4.<com.fsck.k9.autocrypt.AutocryptHeader: byte[] keyData>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r7 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.lang.String addr>;

        $r8 = r4.<com.fsck.k9.autocrypt.AutocryptHeader: java.lang.String addr>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        $r9 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.util.Map parameters>;

        $r10 = r4.<com.fsck.k9.autocrypt.AutocryptHeader: java.util.Map parameters>;

        $z0 = interfaceinvoke $r9.<java.util.Map: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }
    public int hashCode()
    {
        com.fsck.k9.autocrypt.AutocryptHeader r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.String $r2;
        java.util.Map $r3;
        boolean $z0;
        byte $b2;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeader;

        $r1 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: byte[] keyData>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        $i0 = $i0 * 31;

        $r2 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.lang.String addr>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r3 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.util.Map parameters>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int hashCode()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $z0 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: boolean isPreferEncryptMutual>;

        if $z0 == 0 goto label2;

        $b2 = 1;

     label1:
        $i0 = $i0 + $b2;

        return $i0;

     label2:
        $b2 = 0;

        goto label1;
    }
    java.lang.String toRawHeaderString()
    {
        com.fsck.k9.autocrypt.AutocryptHeader r0;
        java.lang.StringBuilder r1, $r4;
        java.util.Map $r2;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.String $r5;

        r0 := @this: com.fsck.k9.autocrypt.AutocryptHeader;

        $r2 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.util.Map parameters>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("arbitrary parameters not supported");

        throw $r3;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Autocrypt");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addr");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r5 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: java.lang.String addr>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $z0 = r0.<com.fsck.k9.autocrypt.AutocryptHeader: boolean isPreferEncryptMutual>;

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefer-encrypt");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mutual");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

     label2:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keydata");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        specialinvoke r0.<com.fsck.k9.autocrypt.AutocryptHeader: void appendBase64KeyData(java.lang.StringBuilder)>(r1);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
