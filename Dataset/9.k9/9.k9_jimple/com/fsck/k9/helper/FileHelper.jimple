com.fsck.k9.helper.FileHelper extends java.lang.Object
private static final java.lang.String INVALID_CHARACTERS
private static final java.lang.String REPLACEMENT_CHARACTER
    public void <init>()
    {
        com.fsck.k9.helper.FileHelper r0;

        r0 := @this: com.fsck.k9.helper.FileHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        byte[] r2;
        java.io.FileInputStream r3;
        java.io.FileOutputStream r4;
        int $i0;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        r3 = new java.io.FileInputStream;

        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        r4 = new java.io.FileOutputStream;

        specialinvoke r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label1:
        r2 = newarray (byte)[1024];

     label2:
        $i0 = virtualinvoke r3.<java.io.FileInputStream: int read(byte[])>(r2);

     label3:
        if $i0 <= 0 goto label7;

     label4:
        virtualinvoke r4.<java.io.FileOutputStream: void write(byte[],int,int)>(r2, 0, $i0);

     label5:
        goto label2;

     label6:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        throw $r5;

     label7:
        virtualinvoke r4.<java.io.FileOutputStream: void close()>();

     label8:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        return;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
    public static java.io.File createUniqueFile(java.io.File, java.lang.String)
    {
        java.io.File $r0, r2;
        java.lang.String $r1, $r3, $r7;
        boolean $z0;
        int $i0;
        java.util.Locale $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, $r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 == -1 goto label4;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

     label2:
        $i0 = 2;

     label3:
        if $i0 >= 2147483647 goto label6;

        r2 = new java.io.File;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = $r3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5[1] = $r6;

        $r5[2] = $r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "%s-%d%s", $r5);

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, $r7);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        return r2;

     label4:
        $r3 = $r1;

        $r1 = "";

        goto label2;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return null;
    }
    private static void deleteFileIfExists(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label3;

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label4;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete file: ");

        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label4:
        return;
    }
    public static boolean move(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1, $r5;
        java.lang.Exception r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3[0] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Unable to delete file: %s", $r3);

     label1:
        $r5 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        $r4 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3[0] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Unable to make directories: %s", $r3);

     label2:
        staticinvoke <com.fsck.k9.helper.FileHelper: void copyFile(java.io.File,java.io.File)>($r0, $r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

     label3:
        if $z0 != 0 goto label7;

        $z0 = 1;

     label4:
        if $z0 == 0 goto label9;

     label5:
        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Unable to delete source file after copying to destination!", $r3);

     label6:
        return 1;

     label7:
        $z0 = 0;

        goto label4;

     label8:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3[0] = $r4;

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3[1] = $r4;

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "cannot move %s to %s", $r3);

        return 0;

     label9:
        return 1;

        catch java.lang.Exception from label2 to label3 with label8;
        catch java.lang.Exception from label5 to label6 with label8;
    }
    public static void moveRecursive(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1, r2, r3;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.String $r5;
        java.io.File[] $r6;
        int $i0, $i1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label02;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label02;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("cannot delete already existing file/directory %s", $r4);

     label02:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label11;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[1] = $r5;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("cannot rename %s to %s - moving instead", $r4);

        staticinvoke <com.fsck.k9.helper.FileHelper: boolean move(java.io.File,java.io.File)>($r0, $r1);

        return;

     label03:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label04;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label06;

     label04:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label05;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label05;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Unable to delete file: %s", $r4);

     label05:
        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label06;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("cannot create directory %s", $r4);

     label06:
        $r6 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r6;

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label10;

        r2 = $r6[$i1];

        $z0 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label09;

        r3 = new java.io.File;

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <com.fsck.k9.helper.FileHelper: void moveRecursive(java.io.File,java.io.File)>(r2, r3);

        $z0 = virtualinvoke r2.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label08;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Unable to delete file: %s", $r4);

     label08:
        $i1 = $i1 + 1;

        goto label07;

     label09:
        r3 = new java.io.File;

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        $z0 = virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>(r3);

        if $z0 != 0 goto label08;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        $r5 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[1] = $r5;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("cannot rename %s to %s - moving instead", $r4);

        staticinvoke <com.fsck.k9.helper.FileHelper: boolean move(java.io.File,java.io.File)>(r2, r3);

        goto label08;

     label10:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label11;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("cannot delete %s", $r4);

     label11:
        return;
    }
    public static void renameOrMoveByCopying(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean z0, $z1;
        java.lang.Object[] $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        z0 = 1;

        staticinvoke <com.fsck.k9.helper.FileHelper: void deleteFileIfExists(java.io.File)>($r1);

        $z1 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z1 != 0 goto label3;

        $z1 = 1;

     label1:
        if $z1 == 0 goto label5;

        staticinvoke <com.fsck.k9.helper.FileHelper: void copyFile(java.io.File,java.io.File)>($r0, $r1);

        $z1 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label4;

     label2:
        if z0 == 0 goto label5;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Unable to delete source file after copying to destination!", $r2);

        return;

     label3:
        $z1 = 0;

        goto label1;

     label4:
        z0 = 0;

        goto label2;

     label5:
        return;
    }
    public static java.lang.String sanitizeFilename(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[^\\w !#$%&\'()\\-@\\^`{}~.,]", "_");

        return $r0;
    }
    public static void touchFile(java.io.File, java.lang.String)
    {
        java.io.File $r0, r3;
        java.lang.String $r1;
        java.lang.Exception r2;
        boolean $z0;
        java.lang.Object[] $r4;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r3 = new java.io.File;

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, $r1);

     label01:
        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

     label02:
        if $z0 != 0 goto label07;

     label03:
        $z0 = virtualinvoke r3.<java.io.File: boolean createNewFile()>();

     label04:
        if $z0 != 0 goto label12;

     label05:
        $r4 = newarray (java.lang.Object)[1];

        $r1 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Unable to create file: %s", $r4);

     label06:
        return;

     label07:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = virtualinvoke r3.<java.io.File: boolean setLastModified(long)>($l0);

     label08:
        if $z0 != 0 goto label12;

     label09:
        $r4 = newarray (java.lang.Object)[1];

        $r1 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Unable to change last modification date: %s", $r4);

     label10:
        return;

     label11:
        r2 := @caughtexception;

        $r4 = newarray (java.lang.Object)[1];

        $r1 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Unable to touch file: %s", $r4);

     label12:
        return;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
    }
