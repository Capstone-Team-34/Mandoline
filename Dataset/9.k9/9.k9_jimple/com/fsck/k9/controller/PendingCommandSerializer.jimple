com.fsck.k9.controller.PendingCommandSerializer extends java.lang.Object
private static final com.fsck.k9.controller.PendingCommandSerializer INSTANCE
private final java.util.Map adapters
    static void <clinit>()
    {
        com.fsck.k9.controller.PendingCommandSerializer $r0;

        $r0 = new com.fsck.k9.controller.PendingCommandSerializer;

        specialinvoke $r0.<com.fsck.k9.controller.PendingCommandSerializer: void <init>()>();

        <com.fsck.k9.controller.PendingCommandSerializer: com.fsck.k9.controller.PendingCommandSerializer INSTANCE> = $r0;

        return;
    }
    private void <init>()
    {
        com.fsck.k9.controller.PendingCommandSerializer r0;
        java.util.HashMap r1;
        com.squareup.moshi.Moshi$Builder $r2;
        com.squareup.moshi.Moshi $r3;
        com.squareup.moshi.JsonAdapter $r4;
        java.util.Map $r5;

        r0 := @this: com.fsck.k9.controller.PendingCommandSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.squareup.moshi.Moshi$Builder;

        specialinvoke $r2.<com.squareup.moshi.Moshi$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<com.squareup.moshi.Moshi$Builder: com.squareup.moshi.Moshi build()>();

        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.Class)>(class "Lcom/fsck/k9/controller/MessagingControllerCommands$PendingMoveOrCopy;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("move_or_copy", $r4);

        $r4 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.Class)>(class "Lcom/fsck/k9/controller/MessagingControllerCommands$PendingAppend;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("append", $r4);

        $r4 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.Class)>(class "Lcom/fsck/k9/controller/MessagingControllerCommands$PendingEmptyTrash;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("empty_trash", $r4);

        $r4 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.Class)>(class "Lcom/fsck/k9/controller/MessagingControllerCommands$PendingExpunge;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("expunge", $r4);

        $r4 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.Class)>(class "Lcom/fsck/k9/controller/MessagingControllerCommands$PendingMarkAllAsRead;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("mark_all_as_read", $r4);

        $r4 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.Class)>(class "Lcom/fsck/k9/controller/MessagingControllerCommands$PendingSetFlag;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("set_flag", $r4);

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r1);

        r0.<com.fsck.k9.controller.PendingCommandSerializer: java.util.Map adapters> = $r5;

        return;
    }
    public static com.fsck.k9.controller.PendingCommandSerializer getInstance()
    {
        com.fsck.k9.controller.PendingCommandSerializer r0;

        r0 = <com.fsck.k9.controller.PendingCommandSerializer: com.fsck.k9.controller.PendingCommandSerializer INSTANCE>;

        return r0;
    }
    public java.lang.String serialize(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)
    {
        com.fsck.k9.controller.PendingCommandSerializer r0;
        com.fsck.k9.controller.MessagingControllerCommands$PendingCommand r1;
        java.util.Map $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        com.squareup.moshi.JsonAdapter r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.fsck.k9.controller.PendingCommandSerializer;

        r1 := @parameter0: com.fsck.k9.controller.MessagingControllerCommands$PendingCommand;

        $r2 = r0.<com.fsck.k9.controller.PendingCommandSerializer: java.util.Map adapters>;

        $r3 = virtualinvoke r1.<com.fsck.k9.controller.MessagingControllerCommands$PendingCommand: java.lang.String getCommandName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (com.squareup.moshi.JsonAdapter) $r4;

        if r5 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported pending command type!");

        throw $r6;

     label1:
        $r3 = virtualinvoke r5.<com.squareup.moshi.JsonAdapter: java.lang.String toJson(java.lang.Object)>(r1);

        return $r3;
    }
    public com.fsck.k9.controller.MessagingControllerCommands$PendingCommand unserialize(long, java.lang.String, java.lang.String)
    {
        com.fsck.k9.controller.PendingCommandSerializer r0;
        long $l0;
        java.lang.String $r1, $r2;
        java.io.IOException r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        com.squareup.moshi.JsonAdapter r6;
        java.lang.IllegalArgumentException $r7;
        com.fsck.k9.controller.MessagingControllerCommands$PendingCommand r8;
        java.io.IOError $r9;

        r0 := @this: com.fsck.k9.controller.PendingCommandSerializer;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r4 = r0.<com.fsck.k9.controller.PendingCommandSerializer: java.util.Map adapters>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (com.squareup.moshi.JsonAdapter) $r5;

        if r6 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported pending command type!");

        throw $r7;

     label1:
        $r5 = virtualinvoke r6.<com.squareup.moshi.JsonAdapter: java.lang.Object fromJson(java.lang.String)>($r2);

     label2:
        r8 = (com.fsck.k9.controller.MessagingControllerCommands$PendingCommand) $r5;

        r8.<com.fsck.k9.controller.MessagingControllerCommands$PendingCommand: long databaseId> = $l0;

        return r8;

     label3:
        r3 := @caughtexception;

        $r9 = new java.io.IOError;

        specialinvoke $r9.<java.io.IOError: void <init>(java.lang.Throwable)>(r3);

        throw $r9;

        catch java.io.IOException from label1 to label2 with label3;
    }
