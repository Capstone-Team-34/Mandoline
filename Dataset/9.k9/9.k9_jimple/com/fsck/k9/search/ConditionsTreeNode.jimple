com.fsck.k9.search.ConditionsTreeNode extends java.lang.Object implements android.os.Parcelable
public static final android.os.Parcelable$Creator CREATOR
public com.fsck.k9.search.SearchSpecification$SearchCondition mCondition
public com.fsck.k9.search.ConditionsTreeNode mLeft
public int mLeftMPTTMarker
public com.fsck.k9.search.ConditionsTreeNode mParent
public com.fsck.k9.search.ConditionsTreeNode mRight
public int mRightMPTTMarker
public com.fsck.k9.search.ConditionsTreeNode$Operator mValue
    static void <clinit>()
    {
        com.fsck.k9.search.ConditionsTreeNode$1 $r0;

        $r0 = new com.fsck.k9.search.ConditionsTreeNode$1;

        specialinvoke $r0.<com.fsck.k9.search.ConditionsTreeNode$1: void <init>()>();

        <com.fsck.k9.search.ConditionsTreeNode: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }
    private void <init>(android.os.Parcel)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r8;
        android.os.Parcel $r1;
        com.fsck.k9.search.ConditionsTreeNode$Operator[] $r2;
        int $i0;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r3;
        java.lang.Class $r4;
        java.lang.ClassLoader $r5;
        android.os.Parcelable $r6;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r7;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.fsck.k9.search.ConditionsTreeNode$Operator: com.fsck.k9.search.ConditionsTreeNode$Operator[] values()>();

        $i0 = virtualinvoke $r1.<android.os.Parcel: int readInt()>();

        $r3 = $r2[$i0];

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode$Operator mValue> = $r3;

        $r4 = class "Lcom/fsck/k9/search/ConditionsTreeNode;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>($r5);

        $r7 = (com.fsck.k9.search.SearchSpecification$SearchCondition) $r6;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition> = $r7;

        $r4 = class "Lcom/fsck/k9/search/ConditionsTreeNode;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>($r5);

        $r8 = (com.fsck.k9.search.ConditionsTreeNode) $r6;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft> = $r8;

        $r4 = class "Lcom/fsck/k9/search/ConditionsTreeNode;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>($r5);

        $r8 = (com.fsck.k9.search.ConditionsTreeNode) $r6;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight> = $r8;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = null;

        $r8 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r8 == null goto label1;

        $r8 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        $r8.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = r0;

     label1:
        $r8 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r8 == null goto label2;

        $r8 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        $r8.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = r0;

     label2:
        return;
    }
    void <init>(android.os.Parcel, com.fsck.k9.search.ConditionsTreeNode$1)
    {
        com.fsck.k9.search.ConditionsTreeNode r0;
        android.os.Parcel $r1;
        com.fsck.k9.search.ConditionsTreeNode$1 $r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: android.os.Parcel;

        $r2 := @parameter1: com.fsck.k9.search.ConditionsTreeNode$1;

        specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: void <init>(android.os.Parcel)>($r1);

        return;
    }
    public void <init>(com.fsck.k9.search.ConditionsTreeNode, com.fsck.k9.search.ConditionsTreeNode$Operator)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.ConditionsTreeNode;

        $r2 := @parameter1: com.fsck.k9.search.ConditionsTreeNode$Operator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = $r1;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode$Operator mValue> = $r2;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition> = null;

        return;
    }
    public void <init>(com.fsck.k9.search.SearchSpecification$SearchCondition)
    {
        com.fsck.k9.search.ConditionsTreeNode r0;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r1;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.SearchSpecification$SearchCondition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = null;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition> = $r1;

        $r2 = <com.fsck.k9.search.ConditionsTreeNode$Operator: com.fsck.k9.search.ConditionsTreeNode$Operator CONDITION>;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode$Operator mValue> = $r2;

        return;
    }
    private com.fsck.k9.search.ConditionsTreeNode add(com.fsck.k9.search.ConditionsTreeNode, com.fsck.k9.search.ConditionsTreeNode$Operator) throws java.lang.Exception
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1, r3, $r5;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r2;
        java.lang.Exception $r4;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.ConditionsTreeNode;

        $r2 := @parameter1: com.fsck.k9.search.ConditionsTreeNode$Operator;

        r3 = $r1.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent>;

        if r3 == null goto label1;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("Can only add new expressions from root node down.");

        throw $r4;

     label1:
        r3 = new com.fsck.k9.search.ConditionsTreeNode;

        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent>;

        specialinvoke r3.<com.fsck.k9.search.ConditionsTreeNode: void <init>(com.fsck.k9.search.ConditionsTreeNode,com.fsck.k9.search.ConditionsTreeNode$Operator)>($r5, $r2);

        r3.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft> = r0;

        r3.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight> = $r1;

        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent>;

        if $r5 == null goto label2;

        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent>;

        specialinvoke $r5.<com.fsck.k9.search.ConditionsTreeNode: void updateChild(com.fsck.k9.search.ConditionsTreeNode,com.fsck.k9.search.ConditionsTreeNode)>(r0, r3);

     label2:
        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = r3;

        $r1.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent> = r3;

        return r3;
    }
    private int applyMPTTLabel(int)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1;
        int $i0;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $i0 := @parameter0: int;

        r0.<com.fsck.k9.search.ConditionsTreeNode: int mLeftMPTTMarker> = $i0;

        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r1 == null goto label1;

        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        $i0 = $i0 + 1;

        $i0 = specialinvoke $r1.<com.fsck.k9.search.ConditionsTreeNode: int applyMPTTLabel(int)>($i0);

     label1:
        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r1 == null goto label2;

        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        $i0 = $i0 + 1;

        $i0 = specialinvoke $r1.<com.fsck.k9.search.ConditionsTreeNode: int applyMPTTLabel(int)>($i0);

     label2:
        $i0 = $i0 + 1;

        r0.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker> = $i0;

        return $i0;
    }
    private static com.fsck.k9.search.ConditionsTreeNode buildNodeFromRow(android.database.Cursor)
    {
        android.database.Cursor $r0;
        com.fsck.k9.search.SearchSpecification$SearchCondition r1;
        java.lang.String $r2;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r3, $r4;
        com.fsck.k9.search.SearchSpecification$SearchField $r5;
        com.fsck.k9.search.SearchSpecification$Attribute $r6;
        com.fsck.k9.search.ConditionsTreeNode r7;
        int $i0;

        $r0 := @parameter0: android.database.Cursor;

        r1 = null;

        $r2 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>(5);

        $r3 = staticinvoke <com.fsck.k9.search.ConditionsTreeNode$Operator: com.fsck.k9.search.ConditionsTreeNode$Operator valueOf(java.lang.String)>($r2);

        $r4 = <com.fsck.k9.search.ConditionsTreeNode$Operator: com.fsck.k9.search.ConditionsTreeNode$Operator CONDITION>;

        if $r3 != $r4 goto label1;

        r1 = new com.fsck.k9.search.SearchSpecification$SearchCondition;

        $r2 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r5 = staticinvoke <com.fsck.k9.search.SearchSpecification$SearchField: com.fsck.k9.search.SearchSpecification$SearchField valueOf(java.lang.String)>($r2);

        $r2 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r6 = staticinvoke <com.fsck.k9.search.SearchSpecification$Attribute: com.fsck.k9.search.SearchSpecification$Attribute valueOf(java.lang.String)>($r2);

        $r2 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>(1);

        specialinvoke r1.<com.fsck.k9.search.SearchSpecification$SearchCondition: void <init>(com.fsck.k9.search.SearchSpecification$SearchField,com.fsck.k9.search.SearchSpecification$Attribute,java.lang.String)>($r5, $r6, $r2);

     label1:
        r7 = new com.fsck.k9.search.ConditionsTreeNode;

        specialinvoke r7.<com.fsck.k9.search.ConditionsTreeNode: void <init>(com.fsck.k9.search.SearchSpecification$SearchCondition)>(r1);

        r7.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode$Operator mValue> = $r3;

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getInt(int)>(3);

        r7.<com.fsck.k9.search.ConditionsTreeNode: int mLeftMPTTMarker> = $i0;

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getInt(int)>(4);

        r7.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker> = $i0;

        return r7;
    }
    public static com.fsck.k9.search.ConditionsTreeNode buildTreeFromDB(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.util.Stack r1;
        com.fsck.k9.search.ConditionsTreeNode r2, $r3, $r5;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r4;

        $r0 := @parameter0: android.database.Cursor;

        r1 = new java.util.Stack;

        specialinvoke r1.<java.util.Stack: void <init>()>();

        r2 = null;

        $z0 = interfaceinvoke $r0.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode buildNodeFromRow(android.database.Cursor)>($r0);

        r2 = $r3;

        virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3);

     label1:
        $z0 = interfaceinvoke $r0.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode buildNodeFromRow(android.database.Cursor)>($r0);

        r2 = $r3;

        $i0 = $r3.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker>;

        $r4 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (com.fsck.k9.search.ConditionsTreeNode) $r4;

        $i1 = $r5.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker>;

        if $i0 >= $i1 goto label2;

        $r4 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (com.fsck.k9.search.ConditionsTreeNode) $r4;

        $r5.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft> = $r3;

        virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3);

        goto label1;

     label2:
        $r4 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (com.fsck.k9.search.ConditionsTreeNode) $r4;

        $i0 = $r5.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker>;

        $i1 = $r3.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker>;

        if $i0 >= $i1 goto label3;

        virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>();

        goto label2;

     label3:
        $r4 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (com.fsck.k9.search.ConditionsTreeNode) $r4;

        $r5.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight> = $r3;

        goto label1;

     label4:
        return r2;
    }
    private com.fsck.k9.search.ConditionsTreeNode cloneNode(com.fsck.k9.search.ConditionsTreeNode)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1, r2, $r3;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r4;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r5;
        int $i0;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.ConditionsTreeNode;

        $r3 = null;

        r2 = new com.fsck.k9.search.ConditionsTreeNode;

        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode$Operator mValue>;

        specialinvoke r2.<com.fsck.k9.search.ConditionsTreeNode: void <init>(com.fsck.k9.search.ConditionsTreeNode,com.fsck.k9.search.ConditionsTreeNode$Operator)>($r1, $r4);

        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition>;

        $r5 = virtualinvoke $r5.<com.fsck.k9.search.SearchSpecification$SearchCondition: com.fsck.k9.search.SearchSpecification$SearchCondition clone()>();

        r2.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition> = $r5;

        $i0 = r0.<com.fsck.k9.search.ConditionsTreeNode: int mLeftMPTTMarker>;

        r2.<com.fsck.k9.search.ConditionsTreeNode: int mLeftMPTTMarker> = $i0;

        $i0 = r0.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker>;

        r2.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker> = $i0;

        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r1 != null goto label3;

        $r1 = null;

     label1:
        r2.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft> = $r1;

        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r1 != null goto label4;

     label2:
        r2.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight> = $r3;

        return r2;

     label3:
        $r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        $r1 = specialinvoke $r1.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode cloneNode(com.fsck.k9.search.ConditionsTreeNode)>(r2);

        goto label1;

     label4:
        r0 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        $r3 = specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode cloneNode(com.fsck.k9.search.ConditionsTreeNode)>(r2);

        goto label2;
    }
    private java.util.Set getLeafSet(java.util.Set)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r2;
        java.util.Set r1;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r2 != null goto label1;

        $r2 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r2 != null goto label1;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return r1;

     label1:
        $r2 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r2 == null goto label2;

        $r2 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        specialinvoke $r2.<com.fsck.k9.search.ConditionsTreeNode: java.util.Set getLeafSet(java.util.Set)>(r1);

     label2:
        $r2 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r2 == null goto label3;

        r0 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: java.util.Set getLeafSet(java.util.Set)>(r1);

     label3:
        return r1;
    }
    private void updateChild(com.fsck.k9.search.ConditionsTreeNode, com.fsck.k9.search.ConditionsTreeNode)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1, $r2, $r3;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.ConditionsTreeNode;

        $r2 := @parameter1: com.fsck.k9.search.ConditionsTreeNode;

        $r3 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r3 != $r1 goto label1;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft> = $r2;

        return;

     label1:
        $r3 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r3 != $r1 goto label2;

        r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight> = $r2;

     label2:
        return;
    }
    public com.fsck.k9.search.ConditionsTreeNode and(com.fsck.k9.search.ConditionsTreeNode) throws java.lang.Exception
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.ConditionsTreeNode;

        $r2 = <com.fsck.k9.search.ConditionsTreeNode$Operator: com.fsck.k9.search.ConditionsTreeNode$Operator AND>;

        r0 = specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode add(com.fsck.k9.search.ConditionsTreeNode,com.fsck.k9.search.ConditionsTreeNode$Operator)>($r1, $r2);

        return r0;
    }
    public com.fsck.k9.search.ConditionsTreeNode and(com.fsck.k9.search.SearchSpecification$SearchCondition)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, r3;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r1;
        java.lang.Exception r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.SearchSpecification$SearchCondition;

        r3 = new com.fsck.k9.search.ConditionsTreeNode;

     label1:
        specialinvoke r3.<com.fsck.k9.search.ConditionsTreeNode: void <init>(com.fsck.k9.search.SearchSpecification$SearchCondition)>($r1);

        r0 = virtualinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode and(com.fsck.k9.search.ConditionsTreeNode)>(r3);

     label2:
        return r0;

     label3:
        r2 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public void applyMPTTLabel()
    {
        com.fsck.k9.search.ConditionsTreeNode r0;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: int applyMPTTLabel(int)>(1);

        return;
    }
    com.fsck.k9.search.ConditionsTreeNode cloneTree()
    {
        com.fsck.k9.search.ConditionsTreeNode r0, r1, $r2, $r5;
        java.lang.IllegalStateException $r3;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r4;
        int $i0;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r2 = null;

        r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mParent>;

        if r1 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t call cloneTree() for a non-root node");

        throw $r3;

     label1:
        r1 = new com.fsck.k9.search.ConditionsTreeNode;

        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition>;

        $r4 = virtualinvoke $r4.<com.fsck.k9.search.SearchSpecification$SearchCondition: com.fsck.k9.search.SearchSpecification$SearchCondition clone()>();

        specialinvoke r1.<com.fsck.k9.search.ConditionsTreeNode: void <init>(com.fsck.k9.search.SearchSpecification$SearchCondition)>($r4);

        $i0 = r0.<com.fsck.k9.search.ConditionsTreeNode: int mLeftMPTTMarker>;

        r1.<com.fsck.k9.search.ConditionsTreeNode: int mLeftMPTTMarker> = $i0;

        $i0 = r0.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker>;

        r1.<com.fsck.k9.search.ConditionsTreeNode: int mRightMPTTMarker> = $i0;

        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r5 != null goto label4;

        $r5 = null;

     label2:
        r1.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft> = $r5;

        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r5 != null goto label5;

     label3:
        r1.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight> = $r2;

        return r1;

     label4:
        $r5 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        $r5 = specialinvoke $r5.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode cloneNode(com.fsck.k9.search.ConditionsTreeNode)>(r1);

        goto label2;

     label5:
        r0 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        $r2 = specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode cloneNode(com.fsck.k9.search.ConditionsTreeNode)>(r1);

        goto label3;
    }
    public int describeContents()
    {
        com.fsck.k9.search.ConditionsTreeNode r0;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        return 0;
    }
    public com.fsck.k9.search.SearchSpecification$SearchCondition getCondition()
    {
        com.fsck.k9.search.ConditionsTreeNode r0;
        com.fsck.k9.search.SearchSpecification$SearchCondition r1;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        r1 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition>;

        return r1;
    }
    public java.util.Set getLeafSet()
    {
        com.fsck.k9.search.ConditionsTreeNode r0;
        java.util.HashSet r1;
        java.util.Set $r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        r1 = new java.util.HashSet;

        specialinvoke r1.<java.util.HashSet: void <init>()>();

        $r2 = specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: java.util.Set getLeafSet(java.util.Set)>(r1);

        return $r2;
    }
    public com.fsck.k9.search.ConditionsTreeNode or(com.fsck.k9.search.ConditionsTreeNode) throws java.lang.Exception
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r1;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.ConditionsTreeNode;

        $r2 = <com.fsck.k9.search.ConditionsTreeNode$Operator: com.fsck.k9.search.ConditionsTreeNode$Operator OR>;

        r0 = specialinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode add(com.fsck.k9.search.ConditionsTreeNode,com.fsck.k9.search.ConditionsTreeNode$Operator)>($r1, $r2);

        return r0;
    }
    public com.fsck.k9.search.ConditionsTreeNode or(com.fsck.k9.search.SearchSpecification$SearchCondition)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, r3;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r1;
        java.lang.Exception r2;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: com.fsck.k9.search.SearchSpecification$SearchCondition;

        r3 = new com.fsck.k9.search.ConditionsTreeNode;

     label1:
        specialinvoke r3.<com.fsck.k9.search.ConditionsTreeNode: void <init>(com.fsck.k9.search.SearchSpecification$SearchCondition)>($r1);

        r0 = virtualinvoke r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode or(com.fsck.k9.search.ConditionsTreeNode)>(r3);

     label2:
        return r0;

     label3:
        r2 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
    public java.util.List preorder()
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r4;
        java.util.ArrayList r1;
        java.util.Stack r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r2 = new java.util.Stack;

        specialinvoke r2.<java.util.Stack: void <init>()>();

        virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r0);

     label1:
        $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r3 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>();

        r0 = (com.fsck.k9.search.ConditionsTreeNode) $r3;

        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        if $r4 == null goto label2;

        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

     label2:
        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        if $r4 == null goto label3;

        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

     label3:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label1;

     label4:
        return r1;
    }
    public void writeToParcel(android.os.Parcel, int)
    {
        com.fsck.k9.search.ConditionsTreeNode r0, $r4;
        android.os.Parcel $r1;
        int $i0, $i1;
        com.fsck.k9.search.ConditionsTreeNode$Operator $r2;
        com.fsck.k9.search.SearchSpecification$SearchCondition $r3;

        r0 := @this: com.fsck.k9.search.ConditionsTreeNode;

        $r1 := @parameter0: android.os.Parcel;

        $i0 := @parameter1: int;

        $r2 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode$Operator mValue>;

        $i1 = virtualinvoke $r2.<com.fsck.k9.search.ConditionsTreeNode$Operator: int ordinal()>();

        virtualinvoke $r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r3 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.SearchSpecification$SearchCondition mCondition>;

        virtualinvoke $r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r3, $i0);

        $r4 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mLeft>;

        virtualinvoke $r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r4, $i0);

        r0 = r0.<com.fsck.k9.search.ConditionsTreeNode: com.fsck.k9.search.ConditionsTreeNode mRight>;

        virtualinvoke $r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>(r0, $i0);

        return;
    }
