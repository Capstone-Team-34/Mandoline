com.fsck.k9.Throttle extends java.lang.Object
private static final int TIMEOUT_EXTEND_INTERVAL
private static java.util.Timer TIMER
private final java.lang.Runnable callback
private final com.fsck.k9.Clock clock
private int currentTimeout
private final android.os.Handler handler
private long lastEventTime
private final int maxTimeout
private final int minTimeout
private final java.lang.String name
private com.fsck.k9.Throttle$MyTimerTask runningTimerTask
private final java.util.Timer timer
    static void <clinit>()
    {
        java.util.Timer $r0;

        $r0 = new java.util.Timer;

        specialinvoke $r0.<java.util.Timer: void <init>()>();

        <com.fsck.k9.Throttle: java.util.Timer TIMER> = $r0;

        return;
    }
    public void <init>(java.lang.String, java.lang.Runnable, android.os.Handler, int, int)
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;
        int $i0, $i1;
        com.fsck.k9.Clock $r4;
        java.util.Timer $r5;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 := @parameter2: android.os.Handler;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 = <com.fsck.k9.Clock: com.fsck.k9.Clock INSTANCE>;

        $r5 = <com.fsck.k9.Throttle: java.util.Timer TIMER>;

        specialinvoke r0.<com.fsck.k9.Throttle: void <init>(java.lang.String,java.lang.Runnable,android.os.Handler,int,int,com.fsck.k9.Clock,java.util.Timer)>($r1, $r2, $r3, $i0, $i1, $r4, $r5);

        return;
    }
    private void <init>(java.lang.String, java.lang.Runnable, android.os.Handler, int, int, com.fsck.k9.Clock, java.util.Timer)
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1;
        java.lang.Runnable $r2;
        android.os.Handler $r3;
        int $i0, $i1;
        com.fsck.k9.Clock $r4;
        java.util.Timer $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Runnable;

        $r3 := @parameter2: android.os.Handler;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: com.fsck.k9.Clock;

        $r5 := @parameter6: java.util.Timer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $i1 >= $i0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        r0.<com.fsck.k9.Throttle: java.lang.String name> = $r1;

        r0.<com.fsck.k9.Throttle: java.lang.Runnable callback> = $r2;

        r0.<com.fsck.k9.Throttle: com.fsck.k9.Clock clock> = $r4;

        r0.<com.fsck.k9.Throttle: java.util.Timer timer> = $r5;

        r0.<com.fsck.k9.Throttle: android.os.Handler handler> = $r3;

        r0.<com.fsck.k9.Throttle: int minTimeout> = $i0;

        r0.<com.fsck.k9.Throttle: int maxTimeout> = $i1;

        $i0 = r0.<com.fsck.k9.Throttle: int minTimeout>;

        r0.<com.fsck.k9.Throttle: int currentTimeout> = $i0;

        return;
    }
    static android.os.Handler access$200(com.fsck.k9.Throttle)
    {
        com.fsck.k9.Throttle $r0;
        android.os.Handler r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        r1 = $r0.<com.fsck.k9.Throttle: android.os.Handler handler>;

        return r1;
    }
    static com.fsck.k9.Throttle$MyTimerTask access$302(com.fsck.k9.Throttle, com.fsck.k9.Throttle$MyTimerTask)
    {
        com.fsck.k9.Throttle $r0;
        com.fsck.k9.Throttle$MyTimerTask $r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        $r1 := @parameter1: com.fsck.k9.Throttle$MyTimerTask;

        $r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask> = $r1;

        return $r1;
    }
    static java.lang.String access$500(com.fsck.k9.Throttle)
    {
        com.fsck.k9.Throttle $r0;
        java.lang.String r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        r1 = $r0.<com.fsck.k9.Throttle: java.lang.String name>;

        return r1;
    }
    static java.lang.Runnable access$600(com.fsck.k9.Throttle)
    {
        com.fsck.k9.Throttle $r0;
        java.lang.Runnable r1;

        $r0 := @parameter0: com.fsck.k9.Throttle;

        r1 = $r0.<com.fsck.k9.Throttle: java.lang.Runnable callback>;

        return r1;
    }
    private boolean isCallbackScheduled()
    {
        com.fsck.k9.Throttle r0;
        com.fsck.k9.Throttle$MyTimerTask $r1;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    private void updateTimeout()
    {
        com.fsck.k9.Throttle r0;
        com.fsck.k9.Clock $r1;
        long $l0, $l1;
        byte $b2;
        int $i3, $i4;
        java.lang.Object[] $r2;
        java.lang.String $r3;
        java.lang.Integer $r4;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Clock clock>;

        $l0 = virtualinvoke $r1.<com.fsck.k9.Clock: long getTime()>();

        $l1 = r0.<com.fsck.k9.Throttle: long lastEventTime>;

        $l1 = $l0 - $l1;

        $b2 = $l1 cmp 500L;

        if $b2 > 0 goto label3;

        $i3 = r0.<com.fsck.k9.Throttle: int currentTimeout>;

        $i3 = $i3 * 2;

        r0.<com.fsck.k9.Throttle: int currentTimeout> = $i3;

        $i3 = r0.<com.fsck.k9.Throttle: int currentTimeout>;

        $i4 = r0.<com.fsck.k9.Throttle: int maxTimeout>;

        if $i3 < $i4 goto label1;

        $i3 = r0.<com.fsck.k9.Throttle: int maxTimeout>;

        r0.<com.fsck.k9.Throttle: int currentTimeout> = $i3;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<com.fsck.k9.Throttle: java.lang.String name>;

        $r2[0] = $r3;

        $i3 = r0.<com.fsck.k9.Throttle: int currentTimeout>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Throttle: [%s] Timeout extended %d", $r2);

     label2:
        r0.<com.fsck.k9.Throttle: long lastEventTime> = $l0;

        return;

     label3:
        $i3 = r0.<com.fsck.k9.Throttle: int minTimeout>;

        r0.<com.fsck.k9.Throttle: int currentTimeout> = $i3;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<com.fsck.k9.Throttle: java.lang.String name>;

        $r2[0] = $r3;

        $i3 = r0.<com.fsck.k9.Throttle: int currentTimeout>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[1] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Throttle: [%s] Timeout reset to %d", $r2);

        goto label2;
    }
    public void cancelScheduledCallback()
    {
        com.fsck.k9.Throttle r0;
        java.lang.String $r1;
        com.fsck.k9.Throttle$MyTimerTask $r2;
        java.lang.Object[] $r3;

        r0 := @this: com.fsck.k9.Throttle;

        $r2 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask>;

        if $r2 == null goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r1 = r0.<com.fsck.k9.Throttle: java.lang.String name>;

        $r3[0] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Throttle: [%s] Canceling scheduled callback", $r3);

        $r2 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask>;

        virtualinvoke $r2.<com.fsck.k9.Throttle$MyTimerTask: boolean cancel()>();

        r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask> = null;

     label1:
        return;
    }
    public void onEvent()
    {
        com.fsck.k9.Throttle r0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        com.fsck.k9.Throttle$MyTimerTask $r3;
        java.util.Timer $r4;
        int $i0;
        long $l1;

        r0 := @this: com.fsck.k9.Throttle;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.fsck.k9.Throttle: java.lang.String name>;

        $r1[0] = $r2;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Throttle: [%s] onEvent", $r1);

        specialinvoke r0.<com.fsck.k9.Throttle: void updateTimeout()>();

        $z0 = specialinvoke r0.<com.fsck.k9.Throttle: boolean isCallbackScheduled()>();

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.fsck.k9.Throttle: java.lang.String name>;

        $r1[0] = $r2;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Throttle: [%s]     callback already scheduled", $r1);

        return;

     label1:
        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.fsck.k9.Throttle: java.lang.String name>;

        $r1[0] = $r2;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Throttle: [%s]     scheduling callback", $r1);

        $r3 = new com.fsck.k9.Throttle$MyTimerTask;

        specialinvoke $r3.<com.fsck.k9.Throttle$MyTimerTask: void <init>(com.fsck.k9.Throttle,com.fsck.k9.Throttle$1)>(r0, null);

        r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask> = $r3;

        $r4 = r0.<com.fsck.k9.Throttle: java.util.Timer timer>;

        $r3 = r0.<com.fsck.k9.Throttle: com.fsck.k9.Throttle$MyTimerTask runningTimerTask>;

        $i0 = r0.<com.fsck.k9.Throttle: int currentTimeout>;

        $l1 = (long) $i0;

        virtualinvoke $r4.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r3, $l1);

        return;
    }
