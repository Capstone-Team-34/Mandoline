com.fsck.k9.mail.internet.TextBody extends java.lang.Object implements com.fsck.k9.mail.Body com.fsck.k9.mail.internet.SizeAware
private static final byte[] EMPTY_BYTE_ARRAY
private java.lang.String charset
private java.lang.Integer composedMessageLength
private java.lang.Integer composedMessageOffset
private java.lang.String encoding
private final java.lang.String text
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <com.fsck.k9.mail.internet.TextBody: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }
    public void <init>(java.lang.String)
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String charset> = "UTF-8";

        r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text> = $r1;

        return;
    }
    private long getLengthWhenQuotedPrintableEncoded(byte[]) throws java.io.IOException
    {
        com.fsck.k9.mail.internet.TextBody r0;
        byte[] $r1;
        com.fsck.k9.mail.filter.CountingOutputStream r2;
        long $l0;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: byte[];

        r2 = new com.fsck.k9.mail.filter.CountingOutputStream;

        specialinvoke r2.<com.fsck.k9.mail.filter.CountingOutputStream: void <init>()>();

        specialinvoke r0.<com.fsck.k9.mail.internet.TextBody: void writeSignSafeQuotedPrintable(java.io.OutputStream,byte[])>(r2, $r1);

        $l0 = virtualinvoke r2.<com.fsck.k9.mail.filter.CountingOutputStream: long getCount()>();

        return $l0;
    }
    private void writeSignSafeQuotedPrintable(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        com.fsck.k9.mail.filter.SignSafeOutputStream r3;
        org.apache.james.mime4j.codec.QuotedPrintableOutputStream r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: byte[];

        r3 = new com.fsck.k9.mail.filter.SignSafeOutputStream;

        specialinvoke r3.<com.fsck.k9.mail.filter.SignSafeOutputStream: void <init>(java.io.OutputStream)>($r1);

     label1:
        r4 = new org.apache.james.mime4j.codec.QuotedPrintableOutputStream;

        specialinvoke r4.<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void <init>(java.io.OutputStream,boolean)>(r3, 0);

     label2:
        virtualinvoke r4.<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void write(byte[])>($r2);

     label3:
        virtualinvoke r4.<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void close()>();

     label4:
        virtualinvoke r3.<com.fsck.k9.mail.filter.SignSafeOutputStream: void close()>();

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke r4.<org.apache.james.mime4j.codec.QuotedPrintableOutputStream: void close()>();

        throw $r5;

     label7:
        $r6 := @caughtexception;

        virtualinvoke r3.<com.fsck.k9.mail.filter.SignSafeOutputStream: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }
    public java.lang.Integer getComposedMessageLength()
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.Integer r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        r1 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.Integer composedMessageLength>;

        return r1;
    }
    public java.lang.Integer getComposedMessageOffset()
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.Integer r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        r1 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.Integer composedMessageOffset>;

        return r1;
    }
    public java.lang.String getEncoding()
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.String r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        r1 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String encoding>;

        return r1;
    }
    public java.io.InputStream getInputStream() throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.String $r2, $r4;
        byte[] $r3;
        java.io.ByteArrayInputStream $r5;
        java.lang.Object[] $r6;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r2 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text>;

        if $r2 == null goto label5;

        $r2 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text>;

        $r4 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String charset>;

     label1:
        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>($r4);

     label2:
        $r5 = new java.io.ByteArrayInputStream;

     label3:
        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

     label4:
        return $r5;

     label5:
        $r3 = <com.fsck.k9.mail.internet.TextBody: byte[] EMPTY_BYTE_ARRAY>;

        goto label2;

     label6:
        r1 := @caughtexception;

        $r6 = newarray (java.lang.Object)[1];

        $r2 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String charset>;

        $r6[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Unsupported charset: %s", $r6);

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label6;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label6;
    }
    public java.lang.String getRawText()
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.String r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        r1 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text>;

        return r1;
    }
    public long getSize()
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.io.IOException r1;
        java.lang.String $r2, $r3;
        byte[] $r4;
        boolean $z0;
        long $l0;
        int $i1;
        java.lang.IllegalStateException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r2 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text>;

        $r3 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String charset>;

     label01:
        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

     label02:
        $r2 = "quoted-printable";

        $r3 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String encoding>;

     label03:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

     label04:
        if $z0 == 0 goto label07;

     label05:
        $l0 = specialinvoke r0.<com.fsck.k9.mail.internet.TextBody: long getLengthWhenQuotedPrintableEncoded(byte[])>($r4);

     label06:
        return $l0;

     label07:
        $r2 = "8bit";

        $r3 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String encoding>;

     label08:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

     label09:
        if $z0 == 0 goto label10;

        $i1 = lengthof $r4;

        $l0 = (long) $i1;

        return $l0;

     label10:
        $r5 = new java.lang.IllegalStateException;

     label11:
        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot get size for encoding!");

     label12:
        throw $r5;

     label13:
        r1 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t get body size", r1);

        throw $r6;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label08 to label09 with label13;
        catch java.io.IOException from label11 to label12 with label13;
    }
    public void setCharset(java.lang.String)
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.lang.String;

        r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String charset> = $r1;

        return;
    }
    public void setComposedMessageLength(java.lang.Integer)
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.Integer $r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.lang.Integer;

        r0.<com.fsck.k9.mail.internet.TextBody: java.lang.Integer composedMessageLength> = $r1;

        return;
    }
    public void setComposedMessageOffset(java.lang.Integer)
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.Integer $r1;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.lang.Integer;

        r0.<com.fsck.k9.mail.internet.TextBody: java.lang.Integer composedMessageOffset> = $r1;

        return;
    }
    public void setEncoding(java.lang.String)
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.lang.String;

        $r2 = "quoted-printable";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = "8bit";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label3;

     label1:
        $z0 = 1;

     label2:
        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot encode to ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label3:
        $z0 = 0;

        goto label2;

     label4:
        r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String encoding> = $r1;

        return;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.internet.TextBody r0;
        java.io.OutputStream $r1;
        java.lang.String $r2, $r3;
        byte[] $r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.fsck.k9.mail.internet.TextBody;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text>;

        if $r2 == null goto label3;

        $r2 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String text>;

        $r3 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String charset>;

        $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

        $r2 = "quoted-printable";

        $r3 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String encoding>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.fsck.k9.mail.internet.TextBody: void writeSignSafeQuotedPrintable(java.io.OutputStream,byte[])>($r1, $r4);

        return;

     label1:
        $r2 = "8bit";

        $r3 = r0.<com.fsck.k9.mail.internet.TextBody: java.lang.String encoding>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r4);

        return;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot get size for encoding!");

        throw $r5;

     label3:
        return;
    }
