com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory extends java.lang.Object implements com.fsck.k9.mail.ssl.TrustedSocketFactory
protected static final java.lang.String[] BLACKLISTED_CIPHERS
protected static final java.lang.String[] BLACKLISTED_PROTOCOLS
protected static final java.lang.String[] ENABLED_CIPHERS
protected static final java.lang.String[] ENABLED_PROTOCOLS
protected static final java.lang.String[] ORDERED_KNOWN_CIPHERS
protected static final java.lang.String[] ORDERED_KNOWN_PROTOCOLS
private android.content.Context context
    static void <clinit>()
    {
        java.lang.Exception r0;
        java.lang.String[] $r1, $r2, r3, $r8, $r10;
        javax.net.ssl.SSLContext $r4;
        javax.net.ssl.SSLSocketFactory $r5;
        java.net.Socket $r6;
        javax.net.ssl.SSLSocket r7;
        boolean $z0;
        java.lang.Object[] $r9;

        $r1 = null;

        $r2 = newarray (java.lang.String)[24];

        $r2[0] = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";

        $r2[1] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";

        $r2[2] = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";

        $r2[3] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";

        $r2[4] = "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";

        $r2[5] = "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";

        $r2[6] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";

        $r2[7] = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";

        $r2[8] = "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";

        $r2[9] = "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";

        $r2[10] = "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA";

        $r2[11] = "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA";

        $r2[12] = "TLS_RSA_WITH_AES_256_CBC_SHA";

        $r2[13] = "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA";

        $r2[14] = "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA";

        $r2[15] = "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA";

        $r2[16] = "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA";

        $r2[17] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";

        $r2[18] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";

        $r2[19] = "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";

        $r2[20] = "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";

        $r2[21] = "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA";

        $r2[22] = "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA";

        $r2[23] = "TLS_RSA_WITH_AES_128_CBC_SHA";

        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ORDERED_KNOWN_CIPHERS> = $r2;

        $r2 = newarray (java.lang.String)[21];

        $r2[0] = "SSL_RSA_WITH_DES_CBC_SHA";

        $r2[1] = "SSL_DHE_RSA_WITH_DES_CBC_SHA";

        $r2[2] = "SSL_DHE_DSS_WITH_DES_CBC_SHA";

        $r2[3] = "SSL_RSA_EXPORT_WITH_RC4_40_MD5";

        $r2[4] = "SSL_RSA_EXPORT_WITH_DES40_CBC_SHA";

        $r2[5] = "SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA";

        $r2[6] = "SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA";

        $r2[7] = "SSL_RSA_WITH_3DES_EDE_CBC_SHA";

        $r2[8] = "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA";

        $r2[9] = "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA";

        $r2[10] = "TLS_ECDHE_RSA_WITH_RC4_128_SHA";

        $r2[11] = "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA";

        $r2[12] = "TLS_ECDH_RSA_WITH_RC4_128_SHA";

        $r2[13] = "TLS_ECDH_ECDSA_WITH_RC4_128_SHA";

        $r2[14] = "SSL_RSA_WITH_RC4_128_SHA";

        $r2[15] = "SSL_RSA_WITH_RC4_128_MD5";

        $r2[16] = "TLS_ECDH_RSA_WITH_NULL_SHA";

        $r2[17] = "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA";

        $r2[18] = "TLS_ECDH_anon_WITH_NULL_SHA";

        $r2[19] = "TLS_ECDH_anon_WITH_RC4_128_SHA";

        $r2[20] = "TLS_RSA_WITH_NULL_SHA256";

        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] BLACKLISTED_CIPHERS> = $r2;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "TLSv1.2";

        $r2[1] = "TLSv1.1";

        $r2[2] = "TLSv1";

        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ORDERED_KNOWN_PROTOCOLS> = $r2;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "SSLv3";

        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] BLACKLISTED_PROTOCOLS> = $r2;

        r3 = null;

        $r2 = null;

     label01:
        $r4 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        virtualinvoke $r4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, null, null);

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r6 = virtualinvoke $r5.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r7 = (javax.net.ssl.SSLSocket) $r6;

        $r8 = virtualinvoke r7.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

     label02:
        r3 = $r8;

     label03:
        $r8 = virtualinvoke r7.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>();

     label04:
        $r2 = $r8;

     label05:
        $z0 = staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: boolean hasWeakSslImplementation()>();

        if $z0 == 0 goto label11;

        if r3 != null goto label09;

        r3 = null;

     label06:
        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_CIPHERS> = r3;

        if $r2 != null goto label10;

     label07:
        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_PROTOCOLS> = $r1;

        return;

     label08:
        r0 := @caughtexception;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r0, "Error getting information about available SSL/TLS ciphers and protocols", $r9);

        goto label05;

     label09:
        $r8 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ORDERED_KNOWN_CIPHERS>;

        $r10 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] BLACKLISTED_CIPHERS>;

        r3 = staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] reorder(java.lang.String[],java.lang.String[],java.lang.String[])>(r3, $r8, $r10);

        goto label06;

     label10:
        $r1 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ORDERED_KNOWN_PROTOCOLS>;

        r3 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] BLACKLISTED_PROTOCOLS>;

        $r1 = staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] reorder(java.lang.String[],java.lang.String[],java.lang.String[])>($r2, $r1, r3);

        goto label07;

     label11:
        if r3 != null goto label14;

        r3 = null;

     label12:
        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_CIPHERS> = r3;

        if $r2 != null goto label15;

     label13:
        <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_PROTOCOLS> = $r1;

        return;

     label14:
        $r8 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] BLACKLISTED_CIPHERS>;

        r3 = staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] remove(java.lang.String[],java.lang.String[])>(r3, $r8);

        goto label12;

     label15:
        $r1 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] BLACKLISTED_PROTOCOLS>;

        $r1 = staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] remove(java.lang.String[],java.lang.String[])>($r2, $r1);

        goto label13;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Exception from label03 to label04 with label08;
    }
    public void <init>(android.content.Context)
    {
        com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory r0;
        android.content.Context $r1;

        r0 := @this: com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory;

        $r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: android.content.Context context> = $r1;

        return;
    }
    private static void hardenSocket(javax.net.ssl.SSLSocket)
    {
        javax.net.ssl.SSLSocket $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_CIPHERS>;

        if $r1 == null goto label1;

        $r1 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_CIPHERS>;

        virtualinvoke $r0.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>($r1);

     label1:
        $r1 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_PROTOCOLS>;

        if $r1 == null goto label2;

        $r1 = <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: java.lang.String[] ENABLED_PROTOCOLS>;

        virtualinvoke $r0.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r1);

     label2:
        return;
    }
    private static boolean hasWeakSslImplementation()
    {
        int $i0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 >= 21 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected static java.lang.String[] remove(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] $r0, $r1;
        java.lang.String r2;
        java.util.ArrayList r3;
        int $i0, $i1;
        java.lang.Object[] $r4;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String[];

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r3, $r0);

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        r2 = $r1[$i1];

        interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r0 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r0 = (java.lang.String[]) $r4;

        return $r0;
    }
    protected static java.lang.String[] reorder(java.lang.String[], java.lang.String[], java.lang.String[])
    {
        java.lang.String[] $r0, $r1, $r2;
        java.util.ArrayList r3, r4;
        int $i0, $i1, $i2;
        java.lang.String r5;
        boolean $z0;
        java.lang.Object[] $r6;

        $r0 := @parameter0: java.lang.String[];

        $r1 := @parameter1: java.lang.String[];

        $r2 := @parameter2: java.lang.String[];

        $i0 = 0;

        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r4, $r0);

        if $r2 == null goto label2;

        $i1 = lengthof $r2;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        r5 = $r2[$i2];

        interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>(r5);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $i1 = lengthof $r1;

     label3:
        if $i0 >= $i1 goto label5;

        r5 = $r1[$i0];

        $z0 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>(r5);

        if $z0 == 0 goto label4;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>(r4);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r0 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r0 = (java.lang.String[]) $r6;

        return $r0;
    }
    private static void setHostnameViaReflection(javax.net.ssl.SSLSocket, java.lang.String)
    {
        javax.net.ssl.SSLSocket $r0;
        java.lang.String $r1;
        java.lang.Throwable r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: javax.net.ssl.SSLSocket;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/lang/String;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setHostname", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r6);

     label2:
        return;

     label3:
        r2 := @caughtexception;

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Could not call SSLSocket#setHostname(String) method ", $r6);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static void setSniHost(javax.net.ssl.SSLSocketFactory, javax.net.ssl.SSLSocket, java.lang.String)
    {
        javax.net.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        android.net.SSLCertificateSocketFactory r3;

        $r0 := @parameter0: javax.net.ssl.SSLSocketFactory;

        $r1 := @parameter1: javax.net.ssl.SSLSocket;

        $r2 := @parameter2: java.lang.String;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label1;

        $z0 = $r0 instanceof android.net.SSLCertificateSocketFactory;

        if $z0 == 0 goto label1;

        r3 = (android.net.SSLCertificateSocketFactory) $r0;

        virtualinvoke r3.<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)>($r1, $r2);

        return;

     label1:
        staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: void setHostnameViaReflection(javax.net.ssl.SSLSocket,java.lang.String)>($r1, $r2);

        return;
    }
    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory r0;
        java.net.Socket $r1;
        java.lang.String $r2, $r3;
        int $i0;
        javax.net.ssl.TrustManager[] r4;
        android.content.Context $r5;
        javax.net.ssl.X509TrustManager $r6;
        javax.net.ssl.KeyManager[] r7;
        boolean $z0;
        com.fsck.k9.mail.ssl.KeyChainKeyManager $r8;
        javax.net.ssl.SSLContext $r9;
        javax.net.ssl.SSLSocketFactory $r10;
        javax.net.ssl.SSLSocket r11;

        r0 := @this: com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String;

        r4 = newarray (javax.net.ssl.TrustManager)[1];

        $r6 = staticinvoke <com.fsck.k9.mail.ssl.TrustManagerFactory: javax.net.ssl.X509TrustManager get(java.lang.String,int)>($r2, $i0);

        r4[0] = $r6;

        r7 = null;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label1;

        r7 = newarray (javax.net.ssl.KeyManager)[1];

        $r8 = new com.fsck.k9.mail.ssl.KeyChainKeyManager;

        $r5 = r0.<com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: android.content.Context context>;

        specialinvoke $r8.<com.fsck.k9.mail.ssl.KeyChainKeyManager: void <init>(android.content.Context,java.lang.String)>($r5, $r3);

        r7[0] = $r8;

     label1:
        $r9 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r7, r4, null);

        $r10 = virtualinvoke $r9.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        if $r1 != null goto label3;

        $r1 = virtualinvoke $r10.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

     label2:
        r11 = (javax.net.ssl.SSLSocket) $r1;

        staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: void hardenSocket(javax.net.ssl.SSLSocket)>(r11);

        staticinvoke <com.fsck.k9.mail.ssl.DefaultTrustedSocketFactory: void setSniHost(javax.net.ssl.SSLSocketFactory,javax.net.ssl.SSLSocket,java.lang.String)>($r10, r11, $r2);

        return $r1;

     label3:
        $r1 = virtualinvoke $r10.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, 1);

        goto label2;
    }
