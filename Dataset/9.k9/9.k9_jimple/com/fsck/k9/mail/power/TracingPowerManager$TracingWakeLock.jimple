com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock extends java.lang.Object
final int id
volatile java.lang.Long startTime
final java.lang.String tag
final com.fsck.k9.mail.power.TracingPowerManager this$0
volatile java.lang.Long timeout
volatile java.util.TimerTask timerTask
final android.os.PowerManager$WakeLock wakeLock
    public void <init>(com.fsck.k9.mail.power.TracingPowerManager, int, java.lang.String)
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        com.fsck.k9.mail.power.TracingPowerManager $r1;
        int $i0;
        java.lang.String $r2;
        android.os.PowerManager $r3;
        android.os.PowerManager$WakeLock $r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        boolean $z0;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $r1 := @parameter0: com.fsck.k9.mail.power.TracingPowerManager;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: com.fsck.k9.mail.power.TracingPowerManager this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime> = null;

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long timeout> = null;

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag> = $r2;

        $r3 = $r1.<com.fsck.k9.mail.power.TracingPowerManager: android.os.PowerManager pm>;

        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag>;

        $r4 = virtualinvoke $r3.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>($i0, $r2);

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock> = $r4;

        $r5 = <com.fsck.k9.mail.power.TracingPowerManager: java.util.concurrent.atomic.AtomicInteger wakeLockId>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: int id> = $i0;

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag>;

        $r6[0] = $r2;

        $i0 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: int id>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[1] = $r7;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("TracingWakeLock for tag %s / id %d: Create", $r6);

     label1:
        return;
    }
    private void cancelNotification()
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        com.fsck.k9.mail.power.TracingPowerManager $r1;
        java.util.Timer $r2;
        java.util.TimerTask $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: com.fsck.k9.mail.power.TracingPowerManager this$0>;

        $r2 = staticinvoke <com.fsck.k9.mail.power.TracingPowerManager: java.util.Timer access$000(com.fsck.k9.mail.power.TracingPowerManager)>($r1);

        if $r2 == null goto label6;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: com.fsck.k9.mail.power.TracingPowerManager this$0>;

        $r2 = staticinvoke <com.fsck.k9.mail.power.TracingPowerManager: java.util.Timer access$000(com.fsck.k9.mail.power.TracingPowerManager)>($r1);

        entermonitor $r2;

     label1:
        $r3 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask>;

        if $r3 == null goto label2;

        $r3 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask>;

        virtualinvoke $r3.<java.util.TimerTask: boolean cancel()>();

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    private void raiseNotification()
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        java.util.TimerTask $r1;
        com.fsck.k9.mail.power.TracingPowerManager $r2;
        java.util.Timer $r3, $r5;
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock$1 $r4;
        java.lang.Throwable $r6;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: com.fsck.k9.mail.power.TracingPowerManager this$0>;

        $r3 = staticinvoke <com.fsck.k9.mail.power.TracingPowerManager: java.util.Timer access$000(com.fsck.k9.mail.power.TracingPowerManager)>($r2);

        if $r3 == null goto label6;

        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: com.fsck.k9.mail.power.TracingPowerManager this$0>;

        $r3 = staticinvoke <com.fsck.k9.mail.power.TracingPowerManager: java.util.Timer access$000(com.fsck.k9.mail.power.TracingPowerManager)>($r2);

        entermonitor $r3;

     label1:
        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask>;

        if $r1 == null goto label2;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask>;

        virtualinvoke $r1.<java.util.TimerTask: boolean cancel()>();

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask> = null;

     label2:
        $r4 = new com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock$1;

        specialinvoke $r4.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock$1: void <init>(com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock)>(r0);

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask> = $r4;

        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: com.fsck.k9.mail.power.TracingPowerManager this$0>;

        $r5 = staticinvoke <com.fsck.k9.mail.power.TracingPowerManager: java.util.Timer access$000(com.fsck.k9.mail.power.TracingPowerManager)>($r2);

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.util.TimerTask timerTask>;

        virtualinvoke $r5.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r1, 1000L, 1000L);

        exitmonitor $r3;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
    public void acquire()
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        int $i0;
        java.lang.Integer $r5;
        java.lang.Long $r6;
        long $l1;
        java.lang.Throwable $r7;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

        exitmonitor $r1;

     label2:
        specialinvoke r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: void raiseNotification()>();

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label3;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag>;

        $r3[0] = $r4;

        $i0 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: int id>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r5;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("TracingWakeLock for tag %s / id %d: acquired with no timeout.  K-9 Mail should not do this", $r3);

     label3:
        $r6 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime>;

        if $r6 != null goto label4;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime> = $r6;

     label4:
        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long timeout> = null;

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor $r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
    public void acquire(long)
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        long $l0, $l2;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        int $i1;
        java.lang.Integer $r5;
        java.lang.Long $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $l0 := @parameter0: long;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire(long)>($l0);

        exitmonitor $r1;

     label2:
        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label3;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag>;

        $r3[0] = $r4;

        $i1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: int id>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r3[2] = $r6;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("TracingWakeLock for tag %s / id %d for %d ms: acquired", $r3);

     label3:
        specialinvoke r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: void raiseNotification()>();

        $r6 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime>;

        if $r6 != null goto label4;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime> = $r6;

     label4:
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long timeout> = $r6;

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor $r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
    public void release()
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        java.lang.Long $r1;
        long $l0, $l2;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.String $r3;
        int $i1;
        java.lang.Integer $r4;
        android.os.PowerManager$WakeLock $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime>;

        if $r1 == null goto label4;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[4];

        $r3 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag>;

        $r2[0] = $r3;

        $i1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: int id>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime>;

        $l2 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        $l0 = $l0 - $l2;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2[2] = $r1;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long timeout>;

        $r2[3] = $r1;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("TracingWakeLock for tag %s / id %d: releasing after %d ms, timeout = %d ms", $r2);

     label1:
        specialinvoke r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: void cancelNotification()>();

        $r5 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        entermonitor $r5;

     label2:
        $r6 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void release()>();

        exitmonitor $r5;

     label3:
        r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long startTime> = null;

        return;

     label4:
        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.String tag>;

        $r2[0] = $r3;

        $i1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: int id>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: java.lang.Long timeout>;

        $r2[2] = $r1;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("TracingWakeLock for tag %s / id %d, timeout = %d ms: releasing", $r2);

        goto label1;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor $r5;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
    public void setReferenceCounted(boolean)
    {
        com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock r0;
        boolean $z0;
        android.os.PowerManager$WakeLock $r1, $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock;

        $z0 := @parameter0: boolean;

        $r1 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<com.fsck.k9.mail.power.TracingPowerManager$TracingWakeLock: android.os.PowerManager$WakeLock wakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>($z0);

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
