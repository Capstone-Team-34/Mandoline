com.fsck.k9.mail.store.imap.ImapConnection extends java.lang.Object
private static final int BUFFER_SIZE
private java.util.Set capabilities
private final android.net.ConnectivityManager connectivityManager
private com.fsck.k9.mail.filter.PeekableInputStream inputStream
private int nextCommandTag
private final com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider
private boolean open
private java.io.OutputStream outputStream
private com.fsck.k9.mail.store.imap.ImapResponseParser responseParser
private boolean retryXoauth2WithNewToken
private com.fsck.k9.mail.store.imap.ImapSettings settings
private java.net.Socket socket
private final int socketConnectTimeout
private final com.fsck.k9.mail.ssl.TrustedSocketFactory socketFactory
private final int socketReadTimeout
private java.lang.Exception stacktraceForClose
    public void <init>(com.fsck.k9.mail.store.imap.ImapSettings, com.fsck.k9.mail.ssl.TrustedSocketFactory, android.net.ConnectivityManager, com.fsck.k9.mail.oauth.OAuth2TokenProvider)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapSettings $r1;
        com.fsck.k9.mail.ssl.TrustedSocketFactory $r2;
        android.net.ConnectivityManager $r3;
        com.fsck.k9.mail.oauth.OAuth2TokenProvider $r4;
        java.util.HashSet $r5;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapSettings;

        $r2 := @parameter1: com.fsck.k9.mail.ssl.TrustedSocketFactory;

        $r3 := @parameter2: android.net.ConnectivityManager;

        $r4 := @parameter3: com.fsck.k9.mail.oauth.OAuth2TokenProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities> = $r5;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean open> = 0;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean retryXoauth2WithNewToken> = 1;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings> = $r1;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.ssl.TrustedSocketFactory socketFactory> = $r2;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: android.net.ConnectivityManager connectivityManager> = $r3;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider> = $r4;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int socketConnectTimeout> = 30000;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int socketReadTimeout> = 60000;

        return;
    }
    void <init>(com.fsck.k9.mail.store.imap.ImapSettings, com.fsck.k9.mail.ssl.TrustedSocketFactory, android.net.ConnectivityManager, com.fsck.k9.mail.oauth.OAuth2TokenProvider, int, int)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapSettings $r1;
        com.fsck.k9.mail.ssl.TrustedSocketFactory $r2;
        android.net.ConnectivityManager $r3;
        com.fsck.k9.mail.oauth.OAuth2TokenProvider $r4;
        int $i0, $i1;
        java.util.HashSet $r5;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapSettings;

        $r2 := @parameter1: com.fsck.k9.mail.ssl.TrustedSocketFactory;

        $r3 := @parameter2: android.net.ConnectivityManager;

        $r4 := @parameter3: com.fsck.k9.mail.oauth.OAuth2TokenProvider;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities> = $r5;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean open> = 0;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean retryXoauth2WithNewToken> = 1;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings> = $r1;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.ssl.TrustedSocketFactory socketFactory> = $r2;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: android.net.ConnectivityManager connectivityManager> = $r3;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider> = $r4;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int socketConnectTimeout> = $i0;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int socketReadTimeout> = $i1;

        return;
    }
    static void access$000(com.fsck.k9.mail.store.imap.ImapConnection, com.fsck.k9.mail.store.imap.ImapResponse) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection $r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;

        $r0 := @parameter0: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter1: com.fsck.k9.mail.store.imap.ImapResponse;

        specialinvoke $r0.<com.fsck.k9.mail.store.imap.ImapConnection: void handleXOAuthUntaggedResponse(com.fsck.k9.mail.store.imap.ImapResponse)>($r1);

        return;
    }
    private void adjustDNSCacheTTL()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.Exception r1, r4;
        java.lang.Object[] $r2;
        java.lang.String $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

     label1:
        staticinvoke <java.security.Security: void setProperty(java.lang.String,java.lang.String)>("networkaddress.cache.ttl", "0");

     label2:
        staticinvoke <java.security.Security: void setProperty(java.lang.String,java.lang.String)>("networkaddress.cache.negative.ttl", "0");

     label3:
        return;

     label4:
        r1 := @caughtexception;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r2[0] = $r3;

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Could not set DNS ttl to 0 for %s", $r2);

        goto label2;

     label5:
        r4 := @caughtexception;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r2[0] = $r3;

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r4, "Could not set DNS negative ttl to 0 for %s", $r2);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }
    private java.util.List attemptXOAuth2() throws com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.oauth.OAuth2TokenProvider $r1;
        com.fsck.k9.mail.store.imap.ImapSettings $r2;
        java.lang.String $r3, $r4;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r5;
        com.fsck.k9.mail.store.imap.ImapConnection$1 $r6;
        java.util.List $r7;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider>;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r3 = interfaceinvoke $r2.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        $r3 = interfaceinvoke $r1.<com.fsck.k9.mail.oauth.OAuth2TokenProvider: java.lang.String getToken(java.lang.String,long)>($r3, 30000L);

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r4 = interfaceinvoke $r2.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        $r3 = staticinvoke <com.fsck.k9.mail.Authentication: java.lang.String computeXoauth(java.lang.String,java.lang.String)>($r4, $r3);

        $r3 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String sendSaslIrCommand(java.lang.String,java.lang.String,boolean)>("AUTHENTICATE XOAUTH2", $r3, 1);

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

        $r4 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r6 = new com.fsck.k9.mail.store.imap.ImapConnection$1;

        specialinvoke $r6.<com.fsck.k9.mail.store.imap.ImapConnection$1: void <init>(com.fsck.k9.mail.store.imap.ImapConnection)>(r0);

        $r7 = virtualinvoke $r5.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.util.List readStatusResponse(java.lang.String,java.lang.String,java.lang.String,com.fsck.k9.mail.store.imap.UntaggedHandler)>($r3, "AUTHENTICATE XOAUTH2", $r4, $r6);

        return $r7;
    }
    private java.util.List authCramMD5() throws com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        java.lang.String $r2, $r6, $r9;
        com.fsck.k9.mail.store.imap.ImapResponse $r3;
        int $i0;
        java.lang.Object $r4;
        boolean $z0;
        com.fsck.k9.mail.MessagingException $r5;
        byte[] $r7;
        com.fsck.k9.mail.store.imap.ImapSettings $r8;
        java.io.OutputStream $r10;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r11;
        java.util.List $r12;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)>("AUTHENTICATE CRAM-MD5", 0);

        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponse readContinuationResponse(java.lang.String)>($r2);

        $i0 = virtualinvoke $r3.<com.fsck.k9.mail.store.imap.ImapResponse: int size()>();

        if $i0 != 1 goto label1;

        $r4 = virtualinvoke $r3.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.Object get(int)>(0);

        $z0 = $r4 instanceof java.lang.String;

        if $z0 != 0 goto label2;

     label1:
        $r5 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r5.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("Invalid Cram-MD5 nonce received");

        throw $r5;

     label2:
        $r6 = virtualinvoke $r3.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getString(int)>(0);

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r8 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r6 = interfaceinvoke $r8.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        $r8 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r9 = interfaceinvoke $r8.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getPassword()>();

        $r7 = staticinvoke <com.fsck.k9.mail.Authentication: byte[] computeCramMd5Bytes(java.lang.String,java.lang.String,byte[])>($r6, $r9, $r7);

        $r10 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>($r7);

        $r10 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r10.<java.io.OutputStream: void write(int)>(13);

        $r10 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r10.<java.io.OutputStream: void write(int)>(10);

        $r10 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r10.<java.io.OutputStream: void flush()>();

        $r11 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

     label3:
        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r12 = virtualinvoke $r11.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.util.List readStatusResponse(java.lang.String,java.lang.String,java.lang.String,com.fsck.k9.mail.store.imap.UntaggedHandler)>($r2, "AUTHENTICATE CRAM-MD5", $r6, null);

     label4:
        return $r12;

     label5:
        r1 := @caughtexception;

        $r5 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.MessagingException handleAuthenticationFailure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)>(r1);

        throw $r5;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label3 to label4 with label5;
    }
    private java.util.List authXoauth2withSASLIR() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        java.util.List $r2;
        com.fsck.k9.mail.oauth.OAuth2TokenProvider $r3;
        com.fsck.k9.mail.store.imap.ImapSettings $r4;
        java.lang.String $r5;
        boolean $z0;
        com.fsck.k9.mail.AuthenticationFailedException $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean retryXoauth2WithNewToken> = 1;

     label1:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List attemptXOAuth2()>();

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider>;

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r5 = interfaceinvoke $r4.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        interfaceinvoke $r3.<com.fsck.k9.mail.oauth.OAuth2TokenProvider: void invalidateToken(java.lang.String)>($r5);

        $z0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean retryXoauth2WithNewToken>;

        if $z0 != 0 goto label4;

        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.AuthenticationFailedException handlePermanentXoauth2Failure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)>(r1);

        throw $r6;

     label4:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List handleTemporaryXoauth2Failure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)>(r1);

        return $r2;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label1 to label2 with label3;
    }
    private java.util.List authenticate() throws com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        int[] $r1;
        com.fsck.k9.mail.store.imap.ImapSettings $r2;
        com.fsck.k9.mail.AuthType $r3;
        int $i0;
        com.fsck.k9.mail.MessagingException $r4;
        com.fsck.k9.mail.oauth.OAuth2TokenProvider $r5;
        boolean $z0;
        java.util.List $r6;
        com.fsck.k9.mail.CertificateValidationException $r7;
        com.fsck.k9.mail.CertificateValidationException$Reason $r8;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = <com.fsck.k9.mail.store.imap.ImapConnection$2: int[] $SwitchMap$com$fsck$k9$mail$AuthType>;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r3 = interfaceinvoke $r2.<com.fsck.k9.mail.store.imap.ImapSettings: com.fsck.k9.mail.AuthType getAuthType()>();

        $i0 = virtualinvoke $r3.<com.fsck.k9.mail.AuthType: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label07;
            case 4: goto label10;
            default: goto label01;
        };

     label01:
        $r4 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r4.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("Unhandled authentication method found in the server settings (bug).");

        throw $r4;

     label02:
        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider>;

        if $r5 != null goto label03;

        $r4 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r4.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("No OAuthToken Provider available.");

        throw $r4;

     label03:
        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("AUTH=XOAUTH2");

        if $z0 == 0 goto label04;

        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("SASL-IR");

        if $z0 == 0 goto label04;

        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List authXoauth2withSASLIR()>();

        return $r6;

     label04:
        $r4 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r4.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("Server doesn\'t support SASL XOAUTH2.");

        throw $r4;

     label05:
        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("AUTH=CRAM-MD5");

        if $z0 == 0 goto label06;

        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List authCramMD5()>();

        return $r6;

     label06:
        $r4 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r4.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("Server doesn\'t support encrypted passwords using CRAM-MD5.");

        throw $r4;

     label07:
        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("AUTH=PLAIN");

        if $z0 == 0 goto label08;

        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List saslAuthPlainWithLoginFallback()>();

        return $r6;

     label08:
        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("LOGINDISABLED");

        if $z0 != 0 goto label09;

        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List login()>();

        return $r6;

     label09:
        $r4 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r4.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("Server doesn\'t support unencrypted passwords using AUTH=PLAIN and LOGIN is disabled.");

        throw $r4;

     label10:
        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("AUTH=EXTERNAL");

        if $z0 == 0 goto label11;

        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List saslAuthExternal()>();

        return $r6;

     label11:
        $r7 = new com.fsck.k9.mail.CertificateValidationException;

        $r8 = <com.fsck.k9.mail.CertificateValidationException$Reason: com.fsck.k9.mail.CertificateValidationException$Reason MissingCapability>;

        specialinvoke $r7.<com.fsck.k9.mail.CertificateValidationException: void <init>(com.fsck.k9.mail.CertificateValidationException$Reason)>($r8);

        throw $r7;
    }
    private void configureSocket() throws java.net.SocketException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        $i0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: int socketReadTimeout>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i0);

        return;
    }
    private java.net.Socket connect() throws java.security.GeneralSecurityException, com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.net.InetAddress r1;
        java.io.IOException r2;
        int $i0, $i1;
        com.fsck.k9.mail.store.imap.ImapSettings $r3;
        java.lang.String $r4;
        java.net.InetAddress[] $r5;
        java.net.Socket $r6;
        java.lang.Object[] $r7;
        com.fsck.k9.mail.MessagingException $r8;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        r2 = null;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r4 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getHost()>();

        $r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r4);

        $i0 = lengthof $r5;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        r1 = $r5[$i1];

     label2:
        $r6 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket connectToAddress(java.net.InetAddress)>(r1);

     label3:
        return $r6;

     label4:
        r2 := @caughtexception;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Could not connect to %s", $r7);

        $i1 = $i1 + 1;

        goto label1;

     label5:
        $r8 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r8.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot connect to host", r2);

        throw $r8;

        catch java.io.IOException from label2 to label3 with label4;
    }
    private java.net.Socket connectToAddress(java.net.InetAddress) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.net.InetAddress $r1;
        java.net.InetSocketAddress r2;
        com.fsck.k9.mail.store.imap.ImapSettings $r3;
        java.lang.String $r4, $r5;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r6;
        com.fsck.k9.mail.ConnectionSecurity $r7, $r8;
        com.fsck.k9.mail.ssl.TrustedSocketFactory $r9;
        java.net.Socket $r10;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.net.InetAddress;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r4 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getHost()>();

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $i0 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: int getPort()>();

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r5 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getClientCertificateAlias()>();

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $z0 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r4;

        $r6[1] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Connecting to %s as %s", $r6);

     label1:
        r2 = new java.net.InetSocketAddress;

        specialinvoke r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r1, $i0);

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r7 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: com.fsck.k9.mail.ConnectionSecurity getConnectionSecurity()>();

        $r8 = <com.fsck.k9.mail.ConnectionSecurity: com.fsck.k9.mail.ConnectionSecurity SSL_TLS_REQUIRED>;

        if $r7 != $r8 goto label3;

        $r9 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.ssl.TrustedSocketFactory socketFactory>;

        $r10 = interfaceinvoke $r9.<com.fsck.k9.mail.ssl.TrustedSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,java.lang.String)>(null, $r4, $i0, $r5);

     label2:
        $i0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: int socketConnectTimeout>;

        virtualinvoke $r10.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r2, $i0);

        return $r10;

     label3:
        $r10 = new java.net.Socket;

        specialinvoke $r10.<java.net.Socket: void <init>()>();

        goto label2;
    }
    private void enableCompression() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.util.zip.InflaterInputStream r1;
        com.jcraft.jzlib.ZOutputStream r2;
        java.net.Socket $r3;
        java.io.InputStream $r4;
        java.util.zip.Inflater $r5;
        java.io.OutputStream $r6;
        boolean $z0;
        java.lang.Object[] $r7;
        java.lang.String $r8;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r9;
        java.io.IOException r10;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

     label01:
        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("COMPRESS DEFLATE");

     label02:
        r1 = new java.util.zip.InflaterInputStream;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

     label03:
        $r4 = virtualinvoke $r3.<java.net.Socket: java.io.InputStream getInputStream()>();

     label04:
        $r5 = new java.util.zip.Inflater;

     label05:
        specialinvoke $r5.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke r1.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r4, $r5);

     label06:
        r2 = new com.jcraft.jzlib.ZOutputStream;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

     label07:
        $r6 = virtualinvoke $r3.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r2.<com.jcraft.jzlib.ZOutputStream: void <init>(java.io.OutputStream,int,boolean)>($r6, 1, 1);

        virtualinvoke r2.<com.jcraft.jzlib.ZOutputStream: void setFlushMode(int)>(1);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void setUpStreamsAndParser(java.io.InputStream,java.io.OutputStream)>(r1, r2);

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

     label08:
        if $z0 == 0 goto label15;

        $r7 = newarray (java.lang.Object)[1];

     label09:
        $r8 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

     label10:
        $r7[0] = $r8;

     label11:
        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Compression enabled for %s", $r7);

     label12:
        return;

     label13:
        r9 := @caughtexception;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r9, "Unable to negotiate compression: ", $r7);

        return;

     label14:
        r10 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r10, "Error enabling compression", $r7);

     label15:
        return;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label14;
        catch java.io.IOException from label05 to label06 with label14;
        catch java.io.IOException from label07 to label08 with label14;
        catch java.io.IOException from label09 to label10 with label14;
        catch java.io.IOException from label11 to label12 with label14;
    }
    private void enableCompressionIfRequested() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("COMPRESS=DEFLATE");

        if $z0 == 0 goto label1;

        $z0 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean shouldEnableCompression()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void enableCompression()>();

     label1:
        return;
    }
    private java.util.List extractCapabilities(java.util.List)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.util.List r1;
        com.fsck.k9.mail.store.imap.CapabilityResponse $r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.String $r5;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <com.fsck.k9.mail.store.imap.CapabilityResponse: com.fsck.k9.mail.store.imap.CapabilityResponse parse(java.util.List)>(r1);

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<com.fsck.k9.mail.store.imap.CapabilityResponse: java.util.Set getCapabilities()>();

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r3;

        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r4[1] = $r5;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Saving %s capabilities for %s", $r4);

     label1:
        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities> = $r3;

     label2:
        return r1;
    }
    private java.util.List extractOrRequestCapabilities(java.util.List) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.util.List r1;
        com.fsck.k9.mail.store.imap.CapabilityResponse $r2;
        java.util.Set $r3;
        java.lang.Object[] $r4;
        java.lang.String $r5;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        r1 := @parameter0: java.util.List;

        $r2 = staticinvoke <com.fsck.k9.mail.store.imap.CapabilityResponse: com.fsck.k9.mail.store.imap.CapabilityResponse parse(java.util.List)>(r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<com.fsck.k9.mail.store.imap.CapabilityResponse: java.util.Set getCapabilities()>();

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = $r3;

        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r4[1] = $r5;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Saving %s capabilities for %s", $r4);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities> = $r3;

        return r1;

     label1:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r4[0] = $r5;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Did not get capabilities in post-auth banner, requesting CAPABILITY for %s", $r4);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void requestCapabilities()>();

        return r1;
    }
    private com.fsck.k9.mail.MessagingException handleAuthenticationFailure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        com.fsck.k9.mail.store.imap.ImapResponse $r2;
        java.lang.String $r3;
        boolean $z0;
        com.fsck.k9.mail.AuthenticationFailedException $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        r1 := @parameter0: com.fsck.k9.mail.store.imap.NegativeImapResponseException;

        $r2 = virtualinvoke r1.<com.fsck.k9.mail.store.imap.NegativeImapResponseException: com.fsck.k9.mail.store.imap.ImapResponse getLastResponse()>();

        $r3 = staticinvoke <com.fsck.k9.mail.store.imap.ResponseCodeExtractor: java.lang.String getResponseCode(com.fsck.k9.mail.store.imap.ImapResponse)>($r2);

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("AUTHENTICATIONFAILED");

        if $z0 == 0 goto label3;

     label1:
        $z0 = virtualinvoke r1.<com.fsck.k9.mail.store.imap.NegativeImapResponseException: boolean wasByeResponseReceived()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

     label2:
        $r4 = new com.fsck.k9.mail.AuthenticationFailedException;

        $r3 = virtualinvoke r1.<com.fsck.k9.mail.store.imap.NegativeImapResponseException: java.lang.String getMessage()>();

        specialinvoke $r4.<com.fsck.k9.mail.AuthenticationFailedException: void <init>(java.lang.String)>($r3);

        return $r4;

     label3:
        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        return r1;
    }
    private void handleConnectException(java.net.ConnectException) throws java.net.ConnectException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.net.ConnectException $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        int $i0;
        java.lang.Object[] $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.net.ConnectException;

        $r2 = virtualinvoke $r1.<java.net.ConnectException: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $i0 = lengthof $r3;

        if $i0 <= 1 goto label1;

        $r2 = $r3[1];

        if $r2 == null goto label1;

        $r4 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r4[0] = $r2;

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, "Stripping host/port from ConnectionException for %s", $r4);

        $r1 = new java.net.ConnectException;

        $r2 = $r3[1];

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r1.<java.net.ConnectException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        throw $r1;
    }
    private void handleNamespace() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.util.List $r1;
        com.fsck.k9.mail.store.imap.NamespaceResponse $r2;
        java.lang.String $r3, $r4;
        com.fsck.k9.mail.store.imap.ImapSettings $r5;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("NAMESPACE");

        $r2 = staticinvoke <com.fsck.k9.mail.store.imap.NamespaceResponse: com.fsck.k9.mail.store.imap.NamespaceResponse parse(java.util.List)>($r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<com.fsck.k9.mail.store.imap.NamespaceResponse: java.lang.String getPrefix()>();

        $r4 = virtualinvoke $r2.<com.fsck.k9.mail.store.imap.NamespaceResponse: java.lang.String getHierarchyDelimiter()>();

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        interfaceinvoke $r5.<com.fsck.k9.mail.store.imap.ImapSettings: void setPathPrefix(java.lang.String)>($r3);

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        interfaceinvoke $r5.<com.fsck.k9.mail.store.imap.ImapSettings: void setPathDelimiter(java.lang.String)>($r4);

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        interfaceinvoke $r5.<com.fsck.k9.mail.store.imap.ImapSettings: void setCombinedPrefix(java.lang.String)>(null);

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = $r3;

        $r6[1] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Got path \'%s\' and separator \'%s\'", $r6);

     label1:
        return;
    }
    private com.fsck.k9.mail.AuthenticationFailedException handlePermanentXoauth2Failure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        com.fsck.k9.mail.AuthenticationFailedException $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.NegativeImapResponseException;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, "Permanent failure during XOAUTH2", $r3);

        $r4 = new com.fsck.k9.mail.AuthenticationFailedException;

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.NegativeImapResponseException: java.lang.String getMessage()>();

        specialinvoke $r4.<com.fsck.k9.mail.AuthenticationFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r2, $r1);

        return $r4;
    }
    private void handleSslException(javax.net.ssl.SSLException) throws com.fsck.k9.mail.CertificateValidationException, javax.net.ssl.SSLException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        javax.net.ssl.SSLException $r1;
        java.lang.Throwable $r2;
        boolean $z0;
        com.fsck.k9.mail.CertificateValidationException $r3;
        java.lang.String $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: javax.net.ssl.SSLException;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLException: java.lang.Throwable getCause()>();

        $z0 = $r2 instanceof java.security.cert.CertificateException;

        if $z0 == 0 goto label1;

        $r3 = new com.fsck.k9.mail.CertificateValidationException;

        $r4 = virtualinvoke $r1.<javax.net.ssl.SSLException: java.lang.String getMessage()>();

        specialinvoke $r3.<com.fsck.k9.mail.CertificateValidationException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r1);

        throw $r3;

     label1:
        throw $r1;
    }
    private java.util.List handleTemporaryXoauth2Failure(com.fsck.k9.mail.store.imap.NegativeImapResponseException) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException $r1, r2;
        java.lang.Object[] $r3;
        java.util.List $r4;
        com.fsck.k9.mail.oauth.OAuth2TokenProvider $r5;
        com.fsck.k9.mail.store.imap.ImapSettings $r6;
        java.lang.String $r7;
        com.fsck.k9.mail.AuthenticationFailedException $r8;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.NegativeImapResponseException;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, "Temporary failure - retrying with new token", $r3);

     label1:
        $r4 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List attemptXOAuth2()>();

     label2:
        return $r4;

     label3:
        r2 := @caughtexception;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, "Authentication exception for new token, permanent error assumed", $r3);

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.oauth.OAuth2TokenProvider oauthTokenProvider>;

        $r6 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r7 = interfaceinvoke $r6.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        interfaceinvoke $r5.<com.fsck.k9.mail.oauth.OAuth2TokenProvider: void invalidateToken(java.lang.String)>($r7);

        $r8 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.AuthenticationFailedException handlePermanentXoauth2Failure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)>(r2);

        throw $r8;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label1 to label2 with label3;
    }
    private void handleXOAuthUntaggedResponse(com.fsck.k9.mail.store.imap.ImapResponse) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;
        boolean $z0;
        java.lang.String $r2, $r4;
        com.fsck.k9.mail.store.imap.ImapSettings $r3;
        java.io.OutputStream $r5;
        byte[] $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponse;

        $z0 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean isString(int)>(0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getString(int)>(0);

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r4 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getHost()>();

        $z0 = staticinvoke <com.fsck.k9.mail.oauth.XOAuth2ChallengeParser: boolean shouldRetry(java.lang.String,java.lang.String)>($r2, $r4);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean retryXoauth2WithNewToken> = $z0;

     label1:
        $z0 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: boolean isContinuationRequested()>();

        if $z0 == 0 goto label2;

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        $r2 = "\r\n";

        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r6);

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r5.<java.io.OutputStream: void flush()>();

     label2:
        return;
    }
    private boolean isListResponse(com.fsck.k9.mail.store.imap.ImapResponse)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;
        boolean z0, $z1, $z2;
        int $i0;
        java.lang.Object $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponse;

        $z1 = 1;

        $i0 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: int size()>();

        if $i0 >= 4 goto label2;

        z0 = 1;

     label1:
        if z0 == 0 goto label3;

        return 0;

     label2:
        z0 = 0;

        goto label1;

     label3:
        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.Object get(int)>(0);

        $z2 = staticinvoke <com.fsck.k9.mail.store.imap.ImapResponseParser: boolean equalsIgnoreCase(java.lang.Object,java.lang.String)>($r2, "LIST");

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.Object get(int)>(2);

        z0 = $r2 instanceof java.lang.String;

        if $z2 == 0 goto label5;

        if z0 == 0 goto label5;

     label4:
        return $z1;

     label5:
        $z1 = 0;

        goto label4;
    }
    private java.util.List login() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        java.util.regex.Pattern $r2;
        com.fsck.k9.mail.store.imap.ImapSettings $r3;
        java.lang.String $r4, $r6;
        java.util.regex.Matcher $r5;
        java.lang.Object[] $r7;
        java.util.List $r8;
        com.fsck.k9.mail.MessagingException $r9;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\\\\"]");

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r4 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        $r5 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $r4 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("\\\\$0");

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r6 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getPassword()>();

        $r5 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r6);

        $r6 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("\\\\$0");

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = $r4;

        $r7[1] = $r6;

     label1:
        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("LOGIN \"%s\" \"%s\"", $r7);

        $r8 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)>($r4, 1);

     label2:
        return $r8;

     label3:
        r1 := @caughtexception;

        $r9 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.MessagingException handleAuthenticationFailure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)>(r1);

        throw $r9;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label1 to label2 with label3;
    }
    private com.fsck.k9.mail.store.imap.ImapResponse readContinuationResponse(java.lang.String) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1, $r3;
        com.fsck.k9.mail.store.imap.ImapResponse $r2;
        boolean $z0;
        com.fsck.k9.mail.MessagingException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Object[] $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponse readResponse()>();

        $r3 = virtualinvoke $r2.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getTag()>();

        if $r3 == null goto label3;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label2;

        $r4 = new com.fsck.k9.mail.MessagingException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command continuation aborted: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = $r1;

        $r6[1] = $r2;

        $r3 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r6[2] = $r3;

        staticinvoke <timber.log.Timber: void w(java.lang.String,java.lang.Object[])>("After sending tag %s, got tag response from previous command %s for %s", $r6);

     label3:
        $z0 = virtualinvoke $r2.<com.fsck.k9.mail.store.imap.ImapResponse: boolean isContinuationRequested()>();

        if $z0 == 0 goto label1;

        return $r2;
    }
    private void readInitialResponse() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r1;
        com.fsck.k9.mail.store.imap.ImapResponse $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        java.util.List $r5;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse readResponse()>();

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $z0 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r3[0] = $r4;

        $r3[1] = $r2;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s <<< %s", $r3);

     label1:
        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List extractCapabilities(java.util.List)>($r5);

        return;
    }
    private void requestCapabilities() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.util.List $r1;
        int $i0;
        com.fsck.k9.mail.MessagingException $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("CAPABILITY");

        $r1 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List extractCapabilities(java.util.List)>($r1);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 2 goto label1;

        $r2 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r2.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String)>("Invalid CAPABILITY response received");

        throw $r2;

     label1:
        return;
    }
    private void requestCapabilitiesIfNecessary() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.util.Set $r1;
        boolean $z0;
        java.lang.Object[] $r2;
        java.lang.String $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label2;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r2[0] = $r3;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Did not get capabilities in banner, requesting CAPABILITY for %s", $r2);

     label2:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void requestCapabilities()>();

        return;
    }
    private void retrievePathDelimiter() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.fsck.k9.mail.store.imap.ImapResponse r5;
        java.lang.String $r6;
        com.fsck.k9.mail.store.imap.ImapSettings $r7;
        java.lang.Object[] $r8;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

     label1:
        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("LIST \"\" \"\"");

     label2:
        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.fsck.k9.mail.store.imap.ImapResponse) $r4;

        $z0 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean isListResponse(com.fsck.k9.mail.store.imap.ImapResponse)>(r5);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r5.<com.fsck.k9.mail.store.imap.ImapResponse: java.lang.String getString(int)>(2);

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        interfaceinvoke $r7.<com.fsck.k9.mail.store.imap.ImapSettings: void setPathDelimiter(java.lang.String)>($r6);

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        interfaceinvoke $r7.<com.fsck.k9.mail.store.imap.ImapSettings: void setCombinedPrefix(java.lang.String)>(null);

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label5;

        $r8 = newarray (java.lang.Object)[2];

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r6 = interfaceinvoke $r7.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getPathDelimiter()>();

        $r8[0] = $r6;

        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r8[1] = $r6;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Got path delimiter \'%s\' for %s", $r8);

        return;

     label4:
        r1 := @caughtexception;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Error getting path delimiter using LIST command", $r8);

     label5:
        return;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label1 to label2 with label4;
    }
    private void retrievePathDelimiterIfNecessary() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1;
        com.fsck.k9.mail.store.imap.ImapSettings $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r1 = interfaceinvoke $r2.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getPathDelimiter()>();

        if $r1 != null goto label1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void retrievePathDelimiter()>();

     label1:
        return;
    }
    private void retrievePathPrefixIfNecessary() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapSettings $r1;
        java.lang.String $r2;
        boolean $z0;
        java.lang.Object[] $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r2 = interfaceinvoke $r1.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getPathPrefix()>();

        if $r2 == null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("NAMESPACE");

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label2;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("pathPrefix is unset and server has NAMESPACE capability", $r3);

     label2:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void handleNamespace()>();

        return;

     label3:
        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label4;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("pathPrefix is unset but server does not have NAMESPACE capability", $r3);

     label4:
        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        interfaceinvoke $r1.<com.fsck.k9.mail.store.imap.ImapSettings: void setPathPrefix(java.lang.String)>("");

        return;
    }
    private java.util.List saslAuthExternal() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        java.lang.StringBuilder $r2;
        com.fsck.k9.mail.store.imap.ImapSettings $r3;
        java.lang.String $r4;
        java.util.List $r5;
        com.fsck.k9.mail.CertificateValidationException $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r2 = new java.lang.StringBuilder;

     label1:
        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AUTHENTICATE EXTERNAL ");

     label2:
        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

     label3:
        $r4 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        $r4 = staticinvoke <com.fsck.k9.mail.filter.Base64: java.lang.String encode(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)>($r4, 0);

     label4:
        return $r5;

     label5:
        r1 := @caughtexception;

        $r6 = new com.fsck.k9.mail.CertificateValidationException;

        $r4 = virtualinvoke r1.<com.fsck.k9.mail.store.imap.NegativeImapResponseException: java.lang.String getMessage()>();

        specialinvoke $r6.<com.fsck.k9.mail.CertificateValidationException: void <init>(java.lang.String)>($r4);

        throw $r6;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label1 to label2 with label5;
        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label3 to label4 with label5;
    }
    private java.util.List saslAuthPlain() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.NegativeImapResponseException r1;
        java.lang.String $r2, $r5;
        java.lang.StringBuilder $r3;
        com.fsck.k9.mail.store.imap.ImapSettings $r4;
        byte[] $r6;
        java.io.OutputStream $r7;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r8;
        java.util.List $r9;
        com.fsck.k9.mail.MessagingException $r10;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)>("AUTHENTICATE PLAIN", 0);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponse readContinuationResponse(java.lang.String)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0000");

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r5 = interfaceinvoke $r4.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getUsername()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u0000");

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r5 = interfaceinvoke $r4.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getPassword()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        $r6 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] encodeBase64(byte[])>($r6);

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r7.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r7.<java.io.OutputStream: void write(int)>(13);

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r7.<java.io.OutputStream: void write(int)>(10);

        $r7 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r7.<java.io.OutputStream: void flush()>();

        $r8 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

     label1:
        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r9 = virtualinvoke $r8.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.util.List readStatusResponse(java.lang.String,java.lang.String,java.lang.String,com.fsck.k9.mail.store.imap.UntaggedHandler)>($r2, "AUTHENTICATE PLAIN", $r5, null);

     label2:
        return $r9;

     label3:
        r1 := @caughtexception;

        $r10 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.MessagingException handleAuthenticationFailure(com.fsck.k9.mail.store.imap.NegativeImapResponseException)>(r1);

        throw $r10;

        catch com.fsck.k9.mail.store.imap.NegativeImapResponseException from label1 to label2 with label3;
    }
    private java.util.List saslAuthPlainWithLoginFallback() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.AuthenticationFailedException r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

     label1:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List saslAuthPlain()>();

     label2:
        return $r2;

     label3:
        r1 := @caughtexception;

        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean isConnected()>();

        if $z0 != 0 goto label4;

        throw r1;

     label4:
        $r2 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List login()>();

        return $r2;

        catch com.fsck.k9.mail.AuthenticationFailedException from label1 to label2 with label3;
    }
    private void setUpStreamsAndParser(java.io.InputStream, java.io.OutputStream)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;
        com.fsck.k9.mail.filter.PeekableInputStream $r3;
        java.io.BufferedInputStream $r4;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r5;
        java.io.BufferedOutputStream $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 = new com.fsck.k9.mail.filter.PeekableInputStream;

        $r4 = new java.io.BufferedInputStream;

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r1, 1024);

        specialinvoke $r3.<com.fsck.k9.mail.filter.PeekableInputStream: void <init>(java.io.InputStream)>($r4);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.filter.PeekableInputStream inputStream> = $r3;

        $r5 = new com.fsck.k9.mail.store.imap.ImapResponseParser;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        specialinvoke $r5.<com.fsck.k9.mail.store.imap.ImapResponseParser: void <init>(com.fsck.k9.mail.filter.PeekableInputStream)>($r3);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser> = $r5;

        $r6 = new java.io.BufferedOutputStream;

        specialinvoke $r6.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r2, 1024);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream> = $r6;

        return;
    }
    private void setUpStreamsAndParserFromSocket() throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.net.Socket $r1;
        java.io.InputStream $r2;
        java.io.OutputStream $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        $r3 = virtualinvoke $r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void setUpStreamsAndParser(java.io.InputStream,java.io.OutputStream)>($r2, $r3);

        return;
    }
    private boolean shouldEnableCompression()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        boolean z0, $z1;
        android.net.ConnectivityManager $r1;
        android.net.NetworkInfo $r2;
        int $i0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        com.fsck.k9.mail.NetworkType $r5;
        com.fsck.k9.mail.store.imap.ImapSettings $r6;
        java.lang.Boolean $r7;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        z0 = 1;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: android.net.ConnectivityManager connectivityManager>;

        $r2 = virtualinvoke $r1.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<android.net.NetworkInfo: int getType()>();

        z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("On network type %s", $r3);

     label1:
        $r5 = staticinvoke <com.fsck.k9.mail.NetworkType: com.fsck.k9.mail.NetworkType fromConnectivityManagerType(int)>($i0);

        $r6 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        z0 = interfaceinvoke $r6.<com.fsck.k9.mail.store.imap.ImapSettings: boolean useCompression(com.fsck.k9.mail.NetworkType)>($r5);

     label2:
        $z1 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z1 == 0 goto label3;

        $r3 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[0] = $r7;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("useCompression: %b", $r3);

     label3:
        return z0;
    }
    private void startTLS() throws java.io.IOException, com.fsck.k9.mail.MessagingException, java.security.GeneralSecurityException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapSettings $r1;
        java.lang.String $r2, $r3;
        int $i0;
        com.fsck.k9.mail.ssl.TrustedSocketFactory $r4;
        java.net.Socket $r5;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("STARTTLS");

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r2 = interfaceinvoke $r1.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getHost()>();

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $i0 = interfaceinvoke $r1.<com.fsck.k9.mail.store.imap.ImapSettings: int getPort()>();

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r3 = interfaceinvoke $r1.<com.fsck.k9.mail.store.imap.ImapSettings: java.lang.String getClientCertificateAlias()>();

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.ssl.TrustedSocketFactory socketFactory>;

        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        $r5 = interfaceinvoke $r4.<com.fsck.k9.mail.ssl.TrustedSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,java.lang.String)>($r5, $r2, $i0, $r3);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket> = $r5;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void configureSocket()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void setUpStreamsAndParserFromSocket()>();

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r6[0] = $r2;

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("Updating capabilities after STARTTLS for %s", $r6);

     label1:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void requestCapabilities()>();

        return;
    }
    private void upgradeToTls() throws java.io.IOException, com.fsck.k9.mail.MessagingException, java.security.GeneralSecurityException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        boolean $z0;
        com.fsck.k9.mail.CertificateValidationException $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $z0 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean hasCapability(java.lang.String)>("STARTTLS");

        if $z0 != 0 goto label1;

        $r1 = new com.fsck.k9.mail.CertificateValidationException;

        specialinvoke $r1.<com.fsck.k9.mail.CertificateValidationException: void <init>(java.lang.String)>("STARTTLS connection security not available");

        throw $r1;

     label1:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void startTLS()>();

        return;
    }
    private void upgradeToTlsIfNecessary() throws java.io.IOException, com.fsck.k9.mail.MessagingException, java.security.GeneralSecurityException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.ConnectionSecurity $r1, $r2;
        com.fsck.k9.mail.store.imap.ImapSettings $r3;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapSettings settings>;

        $r2 = interfaceinvoke $r3.<com.fsck.k9.mail.store.imap.ImapSettings: com.fsck.k9.mail.ConnectionSecurity getConnectionSecurity()>();

        $r1 = <com.fsck.k9.mail.ConnectionSecurity: com.fsck.k9.mail.ConnectionSecurity STARTTLS_REQUIRED>;

        if $r2 != $r1 goto label1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void upgradeToTls()>();

     label1:
        return;
    }
    public void close()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        boolean $z0;
        java.lang.Exception $r1;
        com.fsck.k9.mail.filter.PeekableInputStream $r2;
        java.io.OutputStream $r3;
        java.net.Socket $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $z0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean open>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean open> = 0;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>()>();

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.Exception stacktraceForClose> = $r1;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.net.Socket)>($r4);

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.filter.PeekableInputStream inputStream> = null;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream> = null;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket> = null;

        return;
    }
    public java.util.List executeSimpleCommand(java.lang.String) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1;
        java.util.List $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)>($r1, 0);

        return $r2;
    }
    public java.util.List executeSimpleCommand(java.lang.String, boolean) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1, r3, $r5;
        boolean $z0, $z1;
        java.io.IOException r2;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r4;
        java.util.List $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        r3 = $r1;

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebugSensitive()>();

        if $z1 != 0 goto label1;

        r3 = "*sensitive*";

     label1:
        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)>($r1, $z0);

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

     label2:
        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r6 = virtualinvoke $r4.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.util.List readStatusResponse(java.lang.String,java.lang.String,java.lang.String,com.fsck.k9.mail.store.imap.UntaggedHandler)>($r1, r3, $r5, null);

     label3:
        return $r6;

     label4:
        r2 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        throw r2;

        catch java.io.IOException from label2 to label3 with label4;
    }
    protected java.lang.String getLogId()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("conn");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public java.io.OutputStream getOutputStream()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.io.OutputStream r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        return r1;
    }
    protected boolean hasCapability(java.lang.String)
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1;
        java.util.Set $r2;
        java.util.Locale $r3;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities>;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r3);

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean isConnected()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.filter.PeekableInputStream $r1;
        java.io.OutputStream $r2;
        java.net.Socket $r3;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.filter.PeekableInputStream inputStream>;

        if $r1 == null goto label1;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        if $r2 == null goto label1;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        if $r3 == null goto label1;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        $z0 = virtualinvoke $r3.<java.net.Socket: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        $z0 = virtualinvoke $r3.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    protected boolean isIdleCapable()
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        java.util.Set $r3;
        int $i0;
        java.lang.Integer $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r1[0] = $r2;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities>;

        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r4;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("Connection %s has %d capabilities", $r1);

     label1:
        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.Set capabilities>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>("IDLE");

        return $z0;
    }
    public void open() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        boolean $z0;
        java.lang.Exception $r1;
        java.lang.IllegalStateException $r2;
        java.net.Socket $r3;
        java.util.List $r4;
        java.lang.Object[] $r5;
        java.lang.String $r6;
        javax.net.ssl.SSLException r7;
        java.net.ConnectException r8;
        java.security.GeneralSecurityException r9;
        com.fsck.k9.mail.MessagingException $r10;
        java.lang.Throwable $r11;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $z0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean open>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.Exception stacktraceForClose>;

        if $r1 == null goto label02;

        $r2 = new java.lang.IllegalStateException;

        $r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.Exception stacktraceForClose>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("open() called after close(). Check wrapped exception to see where close() was called.", $r1);

        throw $r2;

     label02:
        r0.<com.fsck.k9.mail.store.imap.ImapConnection: boolean open> = 1;

        $z0 = 0;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int nextCommandTag> = 1;

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void adjustDNSCacheTTL()>();

     label03:
        $r3 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket connect()>();

     label04:
        r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket> = $r3;

     label05:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void configureSocket()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void setUpStreamsAndParserFromSocket()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void readInitialResponse()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void requestCapabilitiesIfNecessary()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void upgradeToTlsIfNecessary()>();

        $r4 = specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List authenticate()>();

     label06:
        $z0 = 1;

     label07:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.util.List extractOrRequestCapabilities(java.util.List)>($r4);

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void enableCompressionIfRequested()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void retrievePathPrefixIfNecessary()>();

        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void retrievePathDelimiterIfNecessary()>();

     label08:
        goto label19;

     label09:
        r7 := @caughtexception;

     label10:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void handleSslException(javax.net.ssl.SSLException)>(r7);

     label11:
        if $z0 != 0 goto label19;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Failed to login, closing connection for %s", $r5);

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        return;

     label12:
        r8 := @caughtexception;

     label13:
        specialinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void handleConnectException(java.net.ConnectException)>(r8);

     label14:
        if $z0 != 0 goto label19;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Failed to login, closing connection for %s", $r5);

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        return;

     label15:
        r9 := @caughtexception;

     label16:
        $r10 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r10.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to open connection to IMAP server due to security error.", r9);

        throw $r10;

     label17:
        $r11 := @caughtexception;

        if $z0 != 0 goto label18;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r5[0] = $r6;

        staticinvoke <timber.log.Timber: void e(java.lang.String,java.lang.Object[])>("Failed to login, closing connection for %s", $r5);

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

     label18:
        throw $r11;

     label19:
        return;

        catch javax.net.ssl.SSLException from label03 to label04 with label09;
        catch javax.net.ssl.SSLException from label05 to label06 with label09;
        catch javax.net.ssl.SSLException from label07 to label08 with label09;
        catch java.net.ConnectException from label03 to label04 with label12;
        catch java.net.ConnectException from label05 to label06 with label12;
        catch java.net.ConnectException from label07 to label08 with label12;
        catch java.security.GeneralSecurityException from label03 to label04 with label15;
        catch java.security.GeneralSecurityException from label05 to label06 with label15;
        catch java.security.GeneralSecurityException from label07 to label08 with label15;
        catch java.lang.Throwable from label03 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
    }
    public com.fsck.k9.mail.store.imap.ImapResponse readResponse() throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapResponse $r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponse readResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback)>(null);

        return $r1;
    }
    public com.fsck.k9.mail.store.imap.ImapResponse readResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        com.fsck.k9.mail.store.imap.ImapResponseCallback $r1;
        java.io.IOException r2;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r3;
        com.fsck.k9.mail.store.imap.ImapResponse $r4;
        boolean $z0;
        java.lang.Object[] $r5;
        java.lang.String $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: com.fsck.k9.mail.store.imap.ImapResponseCallback;

        $r3 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

     label1:
        $r4 = virtualinvoke $r3.<com.fsck.k9.mail.store.imap.ImapResponseParser: com.fsck.k9.mail.store.imap.ImapResponse readResponse(com.fsck.k9.mail.store.imap.ImapResponseCallback)>($r1);

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

     label2:
        if $z0 == 0 goto label8;

        $z0 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z0 == 0 goto label8;

        $r5 = newarray (java.lang.Object)[2];

     label3:
        $r6 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

     label4:
        $r5[0] = $r6;

        $r5[1] = $r4;

     label5:
        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s<<<%s", $r5);

     label6:
        return $r4;

     label7:
        r2 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        throw r2;

     label8:
        return $r4;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }
    public java.util.List readStatusResponse(java.lang.String, java.lang.String, com.fsck.k9.mail.store.imap.UntaggedHandler) throws java.io.IOException, com.fsck.k9.mail.store.imap.NegativeImapResponseException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1, $r2, $r5;
        com.fsck.k9.mail.store.imap.UntaggedHandler $r3;
        com.fsck.k9.mail.store.imap.ImapResponseParser $r4;
        java.util.List $r6;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.fsck.k9.mail.store.imap.UntaggedHandler;

        $r4 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: com.fsck.k9.mail.store.imap.ImapResponseParser responseParser>;

        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r6 = virtualinvoke $r4.<com.fsck.k9.mail.store.imap.ImapResponseParser: java.util.List readStatusResponse(java.lang.String,java.lang.String,java.lang.String,com.fsck.k9.mail.store.imap.UntaggedHandler)>($r1, $r2, $r5, $r3);

        return $r6;
    }
    public java.lang.String sendCommand(java.lang.String, boolean) throws com.fsck.k9.mail.MessagingException, java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1, $r2, $r4;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.io.OutputStream $r5;
        byte[] $r6;
        java.lang.Object[] $r7;
        java.lang.Exception r8;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

     label01:
        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void open()>();

     label02:
        $i0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: int nextCommandTag>;

        $i1 = $i0 + 1;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int nextCommandTag> = $i1;

     label03:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

     label04:
        $r3 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

     label07:
        $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[])>($r6);

     label08:
        $r5 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

     label09:
        virtualinvoke $r5.<java.io.OutputStream: void flush()>();

        $z1 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

     label10:
        if $z1 == 0 goto label25;

        $z1 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z1 == 0 goto label25;

        if $z0 == 0 goto label17;

     label11:
        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebugSensitive()>();

     label12:
        if $z0 != 0 goto label17;

        $r7 = newarray (java.lang.Object)[1];

     label13:
        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

     label14:
        $r7[0] = $r1;

     label15:
        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s>>> [Command Hidden, Enable Sensitive Debug Logging To Show]", $r7);

     label16:
        return $r2;

     label17:
        $r7 = newarray (java.lang.Object)[3];

     label18:
        $r4 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

     label19:
        $r7[0] = $r4;

        $r7[1] = $r2;

        $r7[2] = $r1;

     label20:
        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s>>> %s %s", $r7);

     label21:
        return $r2;

     label22:
        r8 := @caughtexception;

     label23:
        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        throw r8;

     label24:
        r8 := @caughtexception;

        goto label23;

     label25:
        return $r2;

        catch java.io.IOException from label01 to label02 with label22;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.io.IOException from label05 to label06 with label22;
        catch java.io.IOException from label07 to label08 with label22;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.io.IOException from label11 to label12 with label22;
        catch java.io.IOException from label13 to label14 with label22;
        catch java.io.IOException from label15 to label16 with label22;
        catch java.io.IOException from label18 to label19 with label22;
        catch java.io.IOException from label20 to label21 with label22;
        catch com.fsck.k9.mail.MessagingException from label01 to label02 with label24;
        catch com.fsck.k9.mail.MessagingException from label03 to label04 with label24;
        catch com.fsck.k9.mail.MessagingException from label05 to label06 with label24;
        catch com.fsck.k9.mail.MessagingException from label07 to label08 with label24;
        catch com.fsck.k9.mail.MessagingException from label09 to label10 with label24;
        catch com.fsck.k9.mail.MessagingException from label11 to label12 with label24;
        catch com.fsck.k9.mail.MessagingException from label13 to label14 with label24;
        catch com.fsck.k9.mail.MessagingException from label15 to label16 with label24;
        catch com.fsck.k9.mail.MessagingException from label18 to label19 with label24;
        catch com.fsck.k9.mail.MessagingException from label20 to label21 with label24;
    }
    public void sendContinuation(java.lang.String) throws java.io.IOException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1, $r5;
        java.io.OutputStream $r2;
        byte[] $r3;
        boolean $z0;
        java.lang.Object[] $r4;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r3);

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(13);

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>(10);

        $r2 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

        virtualinvoke $r2.<java.io.OutputStream: void flush()>();

        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

        if $z0 == 0 goto label1;

        $z0 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z0 == 0 goto label1;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

        $r4[0] = $r5;

        $r4[1] = $r1;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s>>> %s", $r4);

     label1:
        return;
    }
    public java.lang.String sendSaslIrCommand(java.lang.String, java.lang.String, boolean) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        java.lang.String $r1, $r2, $r3, $r5;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.io.OutputStream $r6;
        byte[] $r7;
        java.lang.Object[] $r8;
        java.lang.Exception r9;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

     label01:
        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void open()>();

     label02:
        $i0 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: int nextCommandTag>;

        $i1 = $i0 + 1;

        r0.<com.fsck.k9.mail.store.imap.ImapConnection: int nextCommandTag> = $i1;

     label03:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

     label04:
        $r4 = new java.lang.StringBuilder;

     label05:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r6 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

     label07:
        $r7 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r7);

     label08:
        $r6 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.io.OutputStream outputStream>;

     label09:
        virtualinvoke $r6.<java.io.OutputStream: void flush()>();

        $z1 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebug()>();

     label10:
        if $z1 == 0 goto label25;

        $z1 = <com.fsck.k9.mail.K9MailLib: boolean DEBUG_PROTOCOL_IMAP>;

        if $z1 == 0 goto label25;

        if $z0 == 0 goto label17;

     label11:
        $z0 = staticinvoke <com.fsck.k9.mail.K9MailLib: boolean isDebugSensitive()>();

     label12:
        if $z0 != 0 goto label17;

        $r8 = newarray (java.lang.Object)[1];

     label13:
        $r1 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

     label14:
        $r8[0] = $r1;

     label15:
        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s>>> [Command Hidden, Enable Sensitive Debug Logging To Show]", $r8);

     label16:
        return $r3;

     label17:
        $r8 = newarray (java.lang.Object)[4];

     label18:
        $r5 = virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.lang.String getLogId()>();

     label19:
        $r8[0] = $r5;

        $r8[1] = $r3;

        $r8[2] = $r1;

        $r8[3] = $r2;

     label20:
        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("%s>>> %s %s %s", $r8);

     label21:
        return $r3;

     label22:
        r9 := @caughtexception;

     label23:
        virtualinvoke r0.<com.fsck.k9.mail.store.imap.ImapConnection: void close()>();

        throw r9;

     label24:
        r9 := @caughtexception;

        goto label23;

     label25:
        return $r3;

        catch java.io.IOException from label01 to label02 with label22;
        catch java.io.IOException from label03 to label04 with label22;
        catch java.io.IOException from label05 to label06 with label22;
        catch java.io.IOException from label07 to label08 with label22;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.io.IOException from label11 to label12 with label22;
        catch java.io.IOException from label13 to label14 with label22;
        catch java.io.IOException from label15 to label16 with label22;
        catch java.io.IOException from label18 to label19 with label22;
        catch java.io.IOException from label20 to label21 with label22;
        catch com.fsck.k9.mail.MessagingException from label01 to label02 with label24;
        catch com.fsck.k9.mail.MessagingException from label03 to label04 with label24;
        catch com.fsck.k9.mail.MessagingException from label05 to label06 with label24;
        catch com.fsck.k9.mail.MessagingException from label07 to label08 with label24;
        catch com.fsck.k9.mail.MessagingException from label09 to label10 with label24;
        catch com.fsck.k9.mail.MessagingException from label11 to label12 with label24;
        catch com.fsck.k9.mail.MessagingException from label13 to label14 with label24;
        catch com.fsck.k9.mail.MessagingException from label15 to label16 with label24;
        catch com.fsck.k9.mail.MessagingException from label18 to label19 with label24;
        catch com.fsck.k9.mail.MessagingException from label20 to label21 with label24;
    }
    protected void setReadTimeout(int) throws java.net.SocketException
    {
        com.fsck.k9.mail.store.imap.ImapConnection r0;
        int $i0;
        java.net.Socket r1;

        r0 := @this: com.fsck.k9.mail.store.imap.ImapConnection;

        $i0 := @parameter0: int;

        r1 = r0.<com.fsck.k9.mail.store.imap.ImapConnection: java.net.Socket socket>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.net.Socket: void setSoTimeout(int)>($i0);

     label1:
        return;
    }
