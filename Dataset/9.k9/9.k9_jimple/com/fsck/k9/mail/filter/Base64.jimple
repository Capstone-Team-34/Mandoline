com.fsck.k9.mail.filter.Base64 extends java.lang.Object
static final byte[] CHUNK_SEPARATOR
static final int CHUNK_SIZE
private static final int MASK_6BITS
private static final int MASK_8BITS
private static final byte PAD
private static final byte[] base64ToInt
private static final byte[] intToBase64
private byte[] buf
private int currentLinePos
private final int decodeSize
private final int encodeSize
private boolean eof
private final int lineLength
private final byte[] lineSeparator
private int modulus
private int pos
private int readPos
private int x
    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <com.fsck.k9.mail.filter.Base64: byte[] CHUNK_SEPARATOR> = $r0;

        $r0 = newarray (byte)[64];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 97;

        $r0[27] = 98;

        $r0[28] = 99;

        $r0[29] = 100;

        $r0[30] = 101;

        $r0[31] = 102;

        $r0[32] = 103;

        $r0[33] = 104;

        $r0[34] = 105;

        $r0[35] = 106;

        $r0[36] = 107;

        $r0[37] = 108;

        $r0[38] = 109;

        $r0[39] = 110;

        $r0[40] = 111;

        $r0[41] = 112;

        $r0[42] = 113;

        $r0[43] = 114;

        $r0[44] = 115;

        $r0[45] = 116;

        $r0[46] = 117;

        $r0[47] = 118;

        $r0[48] = 119;

        $r0[49] = 120;

        $r0[50] = 121;

        $r0[51] = 122;

        $r0[52] = 48;

        $r0[53] = 49;

        $r0[54] = 50;

        $r0[55] = 51;

        $r0[56] = 52;

        $r0[57] = 53;

        $r0[58] = 54;

        $r0[59] = 55;

        $r0[60] = 56;

        $r0[61] = 57;

        $r0[62] = 43;

        $r0[63] = 47;

        <com.fsck.k9.mail.filter.Base64: byte[] intToBase64> = $r0;

        $r0 = newarray (byte)[123];

        $r0[0] = -1;

        $r0[1] = -1;

        $r0[2] = -1;

        $r0[3] = -1;

        $r0[4] = -1;

        $r0[5] = -1;

        $r0[6] = -1;

        $r0[7] = -1;

        $r0[8] = -1;

        $r0[9] = -1;

        $r0[10] = -1;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = -1;

        $r0[16] = -1;

        $r0[17] = -1;

        $r0[18] = -1;

        $r0[19] = -1;

        $r0[20] = -1;

        $r0[21] = -1;

        $r0[22] = -1;

        $r0[23] = -1;

        $r0[24] = -1;

        $r0[25] = -1;

        $r0[26] = -1;

        $r0[27] = -1;

        $r0[28] = -1;

        $r0[29] = -1;

        $r0[30] = -1;

        $r0[31] = -1;

        $r0[32] = -1;

        $r0[33] = -1;

        $r0[34] = -1;

        $r0[35] = -1;

        $r0[36] = -1;

        $r0[37] = -1;

        $r0[38] = -1;

        $r0[39] = -1;

        $r0[40] = -1;

        $r0[41] = -1;

        $r0[42] = -1;

        $r0[43] = 62;

        $r0[44] = -1;

        $r0[45] = -1;

        $r0[46] = -1;

        $r0[47] = 63;

        $r0[48] = 52;

        $r0[49] = 53;

        $r0[50] = 54;

        $r0[51] = 55;

        $r0[52] = 56;

        $r0[53] = 57;

        $r0[54] = 58;

        $r0[55] = 59;

        $r0[56] = 60;

        $r0[57] = 61;

        $r0[58] = -1;

        $r0[59] = -1;

        $r0[60] = -1;

        $r0[61] = -1;

        $r0[62] = -1;

        $r0[63] = -1;

        $r0[64] = -1;

        $r0[65] = 0;

        $r0[66] = 1;

        $r0[67] = 2;

        $r0[68] = 3;

        $r0[69] = 4;

        $r0[70] = 5;

        $r0[71] = 6;

        $r0[72] = 7;

        $r0[73] = 8;

        $r0[74] = 9;

        $r0[75] = 10;

        $r0[76] = 11;

        $r0[77] = 12;

        $r0[78] = 13;

        $r0[79] = 14;

        $r0[80] = 15;

        $r0[81] = 16;

        $r0[82] = 17;

        $r0[83] = 18;

        $r0[84] = 19;

        $r0[85] = 20;

        $r0[86] = 21;

        $r0[87] = 22;

        $r0[88] = 23;

        $r0[89] = 24;

        $r0[90] = 25;

        $r0[91] = -1;

        $r0[92] = -1;

        $r0[93] = -1;

        $r0[94] = -1;

        $r0[95] = -1;

        $r0[96] = -1;

        $r0[97] = 26;

        $r0[98] = 27;

        $r0[99] = 28;

        $r0[100] = 29;

        $r0[101] = 30;

        $r0[102] = 31;

        $r0[103] = 32;

        $r0[104] = 33;

        $r0[105] = 34;

        $r0[106] = 35;

        $r0[107] = 36;

        $r0[108] = 37;

        $r0[109] = 38;

        $r0[110] = 39;

        $r0[111] = 40;

        $r0[112] = 41;

        $r0[113] = 42;

        $r0[114] = 43;

        $r0[115] = 44;

        $r0[116] = 45;

        $r0[117] = 46;

        $r0[118] = 47;

        $r0[119] = 48;

        $r0[120] = 49;

        $r0[121] = 50;

        $r0[122] = 51;

        <com.fsck.k9.mail.filter.Base64: byte[] base64ToInt> = $r0;

        return;
    }
    public void <init>()
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 = <com.fsck.k9.mail.filter.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<com.fsck.k9.mail.filter.Base64: void <init>(int,byte[])>(76, $r1);

        return;
    }
    public void <init>(int)
    {
        com.fsck.k9.mail.filter.Base64 r0;
        int $i0;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $i0 := @parameter0: int;

        $r1 = <com.fsck.k9.mail.filter.Base64: byte[] CHUNK_SEPARATOR>;

        specialinvoke r0.<com.fsck.k9.mail.filter.Base64: void <init>(int,byte[])>($i0, $r1);

        return;
    }
    public void <init>(int, byte[])
    {
        com.fsck.k9.mail.filter.Base64 r0;
        int $i0, $i1;
        byte[] $r1, $r3;
        java.lang.String r2;
        boolean $z0;
        java.nio.charset.Charset $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mail.filter.Base64: int lineLength> = $i0;

        $i1 = lengthof $r1;

        $r3 = newarray (byte)[$i1];

        r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator> = $r3;

        $r3 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, 0, $i1);

        if $i0 <= 0 goto label2;

        $i0 = lengthof $r1;

        $i0 = $i0 + 4;

        r0.<com.fsck.k9.mail.filter.Base64: int encodeSize> = $i0;

     label1:
        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int encodeSize>;

        $i0 = $i0 + -1;

        r0.<com.fsck.k9.mail.filter.Base64: int decodeSize> = $i0;

        $z0 = staticinvoke <com.fsck.k9.mail.filter.Base64: boolean containsBase64Byte(byte[])>($r1);

        if $z0 == 0 goto label3;

        r2 = new java.lang.String;

        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        specialinvoke r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r4);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lineSeperator must not contain base64 characters: [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r5;

     label2:
        r0.<com.fsck.k9.mail.filter.Base64: int encodeSize> = 4;

        goto label1;

     label3:
        return;
    }
    private static boolean containsBase64Byte(byte[])
    {
        byte[] $r0;
        byte b0;
        int $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        b0 = $r0[$i2];

        $z0 = staticinvoke <com.fsck.k9.mail.filter.Base64: boolean isBase64(byte)>(b0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 0;
    }
    public static java.lang.String decode(java.lang.String)
    {
        java.lang.String $r0;
        com.fsck.k9.mail.filter.Base64 $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.fsck.k9.mail.filter.Base64;

        specialinvoke $r1.<com.fsck.k9.mail.filter.Base64: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.filter.Base64: byte[] decode(byte[])>($r2);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }
    public static byte[] decodeBase64(byte[])
    {
        byte[] $r0, r2;
        com.fsck.k9.mail.filter.Base64 r1;
        long l0;
        int $i1;

        $r0 := @parameter0: byte[];

        if $r0 == null goto label1;

        $i1 = lengthof $r0;

        if $i1 != 0 goto label2;

     label1:
        return $r0;

     label2:
        r1 = new com.fsck.k9.mail.filter.Base64;

        specialinvoke r1.<com.fsck.k9.mail.filter.Base64: void <init>()>();

        $i1 = lengthof $r0;

        $i1 = $i1 * 3;

        $i1 = $i1 / 4;

        l0 = (long) $i1;

        $i1 = (int) l0;

        r2 = newarray (byte)[$i1];

        $i1 = lengthof r2;

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: void setInitialBuffer(byte[],int,int)>(r2, 0, $i1);

        $i1 = lengthof $r0;

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: void decode(byte[],int,int)>($r0, 0, $i1);

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: void decode(byte[],int,int)>($r0, 0, -1);

        $i1 = r1.<com.fsck.k9.mail.filter.Base64: int pos>;

        $r0 = newarray (byte)[$i1];

        $i1 = lengthof $r0;

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: int readResults(byte[],int,int)>($r0, 0, $i1);

        return $r0;
    }
    public static java.math.BigInteger decodeInteger(byte[])
    {
        byte[] $r0;
        java.math.BigInteger $r1;

        $r0 := @parameter0: byte[];

        $r1 = new java.math.BigInteger;

        $r0 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] decodeBase64(byte[])>($r0);

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        return $r1;
    }
    static byte[] discardNonBase64(byte[])
    {
        byte[] $r0, r1;
        byte b0;
        int $i1, $i2, i3, i4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        r1 = newarray (byte)[$i1];

        $i1 = lengthof $r0;

        $i2 = 0;

        i3 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        b0 = $r0[$i2];

        $z0 = staticinvoke <com.fsck.k9.mail.filter.Base64: boolean isBase64(byte)>(b0);

        if $z0 == 0 goto label4;

        i4 = i3 + 1;

        r1[i3] = b0;

     label2:
        $i2 = $i2 + 1;

        i3 = i4;

        goto label1;

     label3:
        $r0 = newarray (byte)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r0, 0, i3);

        return $r0;

     label4:
        i4 = i3;

        goto label2;
    }
    public static java.lang.String encode(java.lang.String)
    {
        java.lang.String $r0;
        com.fsck.k9.mail.filter.Base64 $r1;
        byte[] $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = new com.fsck.k9.mail.filter.Base64;

        specialinvoke $r1.<com.fsck.k9.mail.filter.Base64: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $r2 = virtualinvoke $r1.<com.fsck.k9.mail.filter.Base64: byte[] encode(byte[])>($r2);

        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        return $r0;
    }
    public static byte[] encodeBase64(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] encodeBase64(byte[],boolean)>($r0, 0);

        return $r0;
    }
    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] $r0, $r2;
        boolean $z0;
        long l0, l2, $l4;
        int $i1;
        com.fsck.k9.mail.filter.Base64 r1;
        byte $b3;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        if $r0 == null goto label1;

        $i1 = lengthof $r0;

        if $i1 != 0 goto label2;

     label1:
        return $r0;

     label2:
        if $z0 == 0 goto label6;

        r1 = new com.fsck.k9.mail.filter.Base64;

        specialinvoke r1.<com.fsck.k9.mail.filter.Base64: void <init>()>();

     label3:
        $i1 = lengthof $r0;

        $i1 = $i1 * 4;

        $i1 = $i1 / 3;

        l2 = (long) $i1;

        l0 = l2 % 4L;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label4;

        l0 = 4L - l0;

        l2 = l2 + l0;

     label4:
        if $z0 == 0 goto label5;

        l0 = l2 / 76L;

        l0 = 1L + l0;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] CHUNK_SEPARATOR>;

        $i1 = lengthof $r2;

        $l4 = (long) $i1;

        l0 = l0 * $l4;

        l2 = l2 + l0;

     label5:
        $b3 = l2 cmp 2147483647L;

        if $b3 <= 0 goto label7;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input array too big, output array would be bigger than Integer.MAX_VALUE=2147483647");

        throw $r3;

     label6:
        r1 = new com.fsck.k9.mail.filter.Base64;

        specialinvoke r1.<com.fsck.k9.mail.filter.Base64: void <init>(int)>(0);

        goto label3;

     label7:
        $i1 = (int) l2;

        $r2 = newarray (byte)[$i1];

        $i1 = lengthof $r2;

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: void setInitialBuffer(byte[],int,int)>($r2, 0, $i1);

        $i1 = lengthof $r0;

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: void encode(byte[],int,int)>($r0, 0, $i1);

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: void encode(byte[],int,int)>($r0, 0, -1);

        $r0 = r1.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r0 == $r2 goto label8;

        $i1 = lengthof $r2;

        virtualinvoke r1.<com.fsck.k9.mail.filter.Base64: int readResults(byte[],int,int)>($r2, 0, $i1);

     label8:
        return $r2;
    }
    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] $r0;

        $r0 := @parameter0: byte[];

        $r0 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] encodeBase64(byte[],boolean)>($r0, 1);

        return $r0;
    }
    public static byte[] encodeInteger(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        java.lang.NullPointerException $r1;
        byte[] $r2;

        $r0 := @parameter0: java.math.BigInteger;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("encodeInteger called with null parameter");

        throw $r1;

     label1:
        $r2 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] toIntegerBytes(java.math.BigInteger)>($r0);

        $r2 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] encodeBase64(byte[],boolean)>($r2, 0);

        return $r2;
    }
    public static boolean isArrayByteBase64(byte[])
    {
        byte[] $r0;
        byte b0;
        int $i1, $i2;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        b0 = $r0[$i2];

        $z0 = staticinvoke <com.fsck.k9.mail.filter.Base64: boolean isBase64(byte)>(b0);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <com.fsck.k9.mail.filter.Base64: boolean isWhiteSpace(byte)>(b0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        return 1;
    }
    public static boolean isBase64(byte)
    {
        byte $b0;
        byte[] $r0;
        int $i1;

        $b0 := @parameter0: byte;

        if $b0 == 61 goto label1;

        if $b0 < 0 goto label2;

        $r0 = <com.fsck.k9.mail.filter.Base64: byte[] base64ToInt>;

        $i1 = lengthof $r0;

        if $b0 >= $i1 goto label2;

        $r0 = <com.fsck.k9.mail.filter.Base64: byte[] base64ToInt>;

        $b0 = $r0[$b0];

        if $b0 == -1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private static boolean isWhiteSpace(byte)
    {
        byte $b0;

        $b0 := @parameter0: byte;

        lookupswitch($b0)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }
    private void resizeBuf()
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] r1, $r2, $r3;
        int $i0;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if r1 != null goto label1;

        r1 = newarray (byte)[8192];

        r0.<com.fsck.k9.mail.filter.Base64: byte[] buf> = r1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = 0;

        r0.<com.fsck.k9.mail.filter.Base64: int readPos> = 0;

        return;

     label1:
        r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        $i0 = lengthof r1;

        $i0 = $i0 * 2;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        $r3 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        r0.<com.fsck.k9.mail.filter.Base64: byte[] buf> = r1;

        return;
    }
    static byte[] toIntegerBytes(java.math.BigInteger)
    {
        java.math.BigInteger $r0;
        byte[] r1, $r2;
        int i0, $i1, $i2;
        byte b3;

        $r0 := @parameter0: java.math.BigInteger;

        $i2 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i2 = $i2 + 7;

        $i2 = $i2 >> 3;

        $i2 = $i2 << 3;

        $r2 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i1 % 8;

        if $i1 == 0 goto label1;

        $i1 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        $i1 = $i1 / 8;

        i0 = $i1 + 1;

        $i1 = $i2 / 8;

        if i0 != $i1 goto label1;

        return $r2;

     label1:
        b3 = 0;

        $i1 = lengthof $r2;

        i0 = virtualinvoke $r0.<java.math.BigInteger: int bitLength()>();

        i0 = i0 % 8;

        if i0 != 0 goto label2;

        b3 = 1;

        $i1 = $i1 + -1;

     label2:
        i0 = $i2 / 8;

        i0 = i0 - $i1;

        $i2 = $i2 / 8;

        r1 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, b3, r1, i0, $i1);

        return r1;
    }
    int avail()
    {
        com.fsck.k9.mail.filter.Base64 r0;
        int $i0, $i1;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r1 == null goto label1;

        $i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int readPos>;

        $i0 = $i1 - $i0;

        return $i0;

     label1:
        return 0;
    }
    public java.lang.Object decode(java.lang.Object) throws com.fsck.k9.mail.filter.Base64$DecoderException
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;
        java.lang.Object $r2;
        boolean $z0;
        com.fsck.k9.mail.filter.Base64$DecoderException $r3;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof byte[];

        if $z0 != 0 goto label1;

        $r3 = new com.fsck.k9.mail.filter.Base64$DecoderException;

        specialinvoke $r3.<com.fsck.k9.mail.filter.Base64$DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 decode is not a byte[]");

        throw $r3;

     label1:
        $r1 = (byte[]) $r2;

        $r1 = virtualinvoke r0.<com.fsck.k9.mail.filter.Base64: byte[] decode(byte[])>($r1);

        return $r1;
    }
    void decode(byte[], int, int)
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1, $r2;
        int $i0, i2, i3, i4, $i5;
        byte b1;
        boolean $z0;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = r0.<com.fsck.k9.mail.filter.Base64: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if $i0 >= 0 goto label02;

        r0.<com.fsck.k9.mail.filter.Base64: boolean eof> = 1;

     label02:
        i3 = 0;

        i4 = i2;

     label03:
        if i3 >= $i0 goto label11;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r2 == null goto label04;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i2 = lengthof $r2;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        i2 = i2 - $i5;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int decodeSize>;

        if i2 >= $i5 goto label05;

     label04:
        specialinvoke r0.<com.fsck.k9.mail.filter.Base64: void resizeBuf()>();

     label05:
        i2 = i4 + 1;

        b1 = $r1[i4];

        if b1 != 61 goto label09;

        i2 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        i2 = i2 << 6;

        r0.<com.fsck.k9.mail.filter.Base64: int x> = i2;

        i2 = r0.<com.fsck.k9.mail.filter.Base64: int modulus>;

        lookupswitch(i2)
        {
            case 2: goto label07;
            case 3: goto label08;
            default: goto label06;
        };

     label06:
        r0.<com.fsck.k9.mail.filter.Base64: boolean eof> = 1;

        return;

     label07:
        i2 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        i2 = i2 << 6;

        r0.<com.fsck.k9.mail.filter.Base64: int x> = i2;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i2 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i2 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 >> 16;

        $i0 = $i0 & 255;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        goto label06;

     label08:
        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i2 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i2 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 >> 16;

        $i0 = $i0 & 255;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i2 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i2 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 >> 8;

        $i0 = $i0 & 255;

        b1 = (byte) $i0;

        $r1[i2] = b1;

        goto label06;

     label09:
        if b1 < 0 goto label10;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] base64ToInt>;

        i4 = lengthof $r2;

        if b1 >= i4 goto label10;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] base64ToInt>;

        b1 = $r2[b1];

        if b1 < 0 goto label10;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int modulus>;

        i4 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int modulus> = i4;

        i4 = i4 % 4;

        r0.<com.fsck.k9.mail.filter.Base64: int modulus> = i4;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        i4 = i4 << 6;

        i4 = i4 + b1;

        r0.<com.fsck.k9.mail.filter.Base64: int x> = i4;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int modulus>;

        if i4 != 0 goto label10;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 >> 16;

        $i5 = $i5 & 255;

        b1 = (byte) $i5;

        $r2[i4] = b1;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 >> 8;

        $i5 = $i5 & 255;

        b1 = (byte) $i5;

        $r2[i4] = b1;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 & 255;

        b1 = (byte) $i5;

        $r2[i4] = b1;

     label10:
        i3 = i3 + 1;

        i4 = i2;

        goto label03;

     label11:
        return;
    }
    public byte[] decode(byte[])
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 := @parameter0: byte[];

        $r1 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] decodeBase64(byte[])>($r1);

        return $r1;
    }
    public java.lang.Object encode(java.lang.Object) throws com.fsck.k9.mail.filter.Base64$EncoderException
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;
        java.lang.Object $r2;
        boolean $z0;
        com.fsck.k9.mail.filter.Base64$EncoderException $r3;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof byte[];

        if $z0 != 0 goto label1;

        $r3 = new com.fsck.k9.mail.filter.Base64$EncoderException;

        specialinvoke $r3.<com.fsck.k9.mail.filter.Base64$EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 encode is not a byte[]");

        throw $r3;

     label1:
        $r1 = (byte[]) $r2;

        $r1 = virtualinvoke r0.<com.fsck.k9.mail.filter.Base64: byte[] encode(byte[])>($r1);

        return $r1;
    }
    void encode(byte[], int, int)
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1, $r2, $r3, $r4;
        int $i0, i1, i3, i4, $i5;
        boolean $z0;
        byte $b2;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $z0 = r0.<com.fsck.k9.mail.filter.Base64: boolean eof>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if $i0 >= 0 goto label07;

        r0.<com.fsck.k9.mail.filter.Base64: boolean eof> = 1;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r1 == null goto label02;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = lengthof $r1;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        i1 = i1 - $i0;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int encodeSize>;

        if i1 >= $i0 goto label03;

     label02:
        specialinvoke r0.<com.fsck.k9.mail.filter.Base64: void resizeBuf()>();

     label03:
        i1 = r0.<com.fsck.k9.mail.filter.Base64: int modulus>;

        lookupswitch(i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            default: goto label04;
        };

     label04:
        i1 = r0.<com.fsck.k9.mail.filter.Base64: int lineLength>;

        if i1 <= 0 goto label13;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $r3 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, i1, $i0);

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $i0 = lengthof $r1;

        i1 = i1 + $i0;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = i1;

        return;

     label05:
        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 >> 2;

        $i0 = $i0 & 63;

        $b2 = $r2[$i0];

        $r1[i1] = $b2;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 << 4;

        $i0 = $i0 & 63;

        $b2 = $r2[$i0];

        $r1[i1] = $b2;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r1[i1] = 61;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r1[i1] = 61;

        goto label04;

     label06:
        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 >> 10;

        $i0 = $i0 & 63;

        $b2 = $r2[$i0];

        $r1[i1] = $b2;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 >> 4;

        $i0 = $i0 & 63;

        $b2 = $r2[$i0];

        $r1[i1] = $b2;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r2 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i0 = $i0 << 2;

        $i0 = $i0 & 63;

        $b2 = $r2[$i0];

        $r1[i1] = $b2;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i0 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        $r1[i1] = 61;

        goto label04;

     label07:
        i3 = 0;

        i4 = i1;

     label08:
        if i3 >= $i0 goto label13;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r2 == null goto label09;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i1 = lengthof $r2;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        i1 = i1 - $i5;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int encodeSize>;

        if i1 >= $i5 goto label10;

     label09:
        specialinvoke r0.<com.fsck.k9.mail.filter.Base64: void resizeBuf()>();

     label10:
        i1 = r0.<com.fsck.k9.mail.filter.Base64: int modulus>;

        i1 = i1 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int modulus> = i1;

        i1 = i1 % 3;

        r0.<com.fsck.k9.mail.filter.Base64: int modulus> = i1;

        i1 = i4 + 1;

        i4 = $r1[i4];

        if i4 >= 0 goto label11;

        i4 = i4 + 256;

     label11:
        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 << 8;

        i4 = $i5 + i4;

        r0.<com.fsck.k9.mail.filter.Base64: int x> = i4;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int modulus>;

        if i4 != 0 goto label12;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $r3 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 >> 18;

        $i5 = $i5 & 63;

        $b2 = $r3[$i5];

        $r2[i4] = $b2;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $r3 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 >> 12;

        $i5 = $i5 & 63;

        $b2 = $r3[$i5];

        $r2[i4] = $b2;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $r3 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 >> 6;

        $i5 = $i5 & 63;

        $b2 = $r3[$i5];

        $r2[i4] = $b2;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $i5 = i4 + 1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i5;

        $r3 = <com.fsck.k9.mail.filter.Base64: byte[] intToBase64>;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int x>;

        $i5 = $i5 & 63;

        $b2 = $r3[$i5];

        $r2[i4] = $b2;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int currentLinePos>;

        i4 = i4 + 4;

        r0.<com.fsck.k9.mail.filter.Base64: int currentLinePos> = i4;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int lineLength>;

        if i4 <= 0 goto label12;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int lineLength>;

        $i5 = r0.<com.fsck.k9.mail.filter.Base64: int currentLinePos>;

        if i4 > $i5 goto label12;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $r3 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $r4 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $i5 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r3, i4, $i5);

        i4 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] lineSeparator>;

        $i5 = lengthof $r2;

        i4 = i4 + $i5;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = i4;

        r0.<com.fsck.k9.mail.filter.Base64: int currentLinePos> = 0;

     label12:
        i3 = i3 + 1;

        i4 = i1;

        goto label08;

     label13:
        return;
    }
    public byte[] encode(byte[])
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 := @parameter0: byte[];

        $r1 = staticinvoke <com.fsck.k9.mail.filter.Base64: byte[] encodeBase64(byte[],boolean)>($r1, 0);

        return $r1;
    }
    boolean hasData()
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    int readResults(byte[], int, int)
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        byte $b3;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r2 == null goto label2;

        $i2 = virtualinvoke r0.<com.fsck.k9.mail.filter.Base64: int avail()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        if $r2 == $r1 goto label1;

        $r2 = r0.<com.fsck.k9.mail.filter.Base64: byte[] buf>;

        $i2 = r0.<com.fsck.k9.mail.filter.Base64: int readPos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r1, $i0, $i1);

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int readPos>;

        $i0 = $i0 + $i1;

        r0.<com.fsck.k9.mail.filter.Base64: int readPos> = $i0;

        $i0 = r0.<com.fsck.k9.mail.filter.Base64: int readPos>;

        $i2 = r0.<com.fsck.k9.mail.filter.Base64: int pos>;

        if $i0 < $i2 goto label5;

        r0.<com.fsck.k9.mail.filter.Base64: byte[] buf> = null;

        return $i1;

     label1:
        r0.<com.fsck.k9.mail.filter.Base64: byte[] buf> = null;

        return $i1;

     label2:
        $z0 = r0.<com.fsck.k9.mail.filter.Base64: boolean eof>;

        if $z0 == 0 goto label4;

        $b3 = -1;

     label3:
        return $b3;

     label4:
        $b3 = 0;

        goto label3;

     label5:
        return $i1;
    }
    void setInitialBuffer(byte[], int, int)
    {
        com.fsck.k9.mail.filter.Base64 r0;
        byte[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.fsck.k9.mail.filter.Base64;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 == null goto label1;

        $i2 = lengthof $r1;

        if $i2 != $i1 goto label1;

        r0.<com.fsck.k9.mail.filter.Base64: byte[] buf> = $r1;

        r0.<com.fsck.k9.mail.filter.Base64: int pos> = $i0;

        r0.<com.fsck.k9.mail.filter.Base64: int readPos> = $i0;

     label1:
        return;
    }
