com.fsck.k9.mail.TransportUris extends java.lang.Object
    public void <init>()
    {
        com.fsck.k9.mail.TransportUris r0;

        r0 := @this: com.fsck.k9.mail.TransportUris;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.lang.String createSmtpUri(com.fsck.k9.mail.ServerSettings)
    {
        com.fsck.k9.mail.ServerSettings $r0;
        int $i0;
        com.fsck.k9.mail.AuthType r1, $r9;
        java.net.URISyntaxException r2;
        java.lang.String $r3, r4, r5, r6;
        int[] $r7;
        com.fsck.k9.mail.ConnectionSecurity $r8;
        java.lang.StringBuilder $r10;
        java.net.URI $r11;
        java.lang.IllegalArgumentException $r12;

        $r0 := @parameter0: com.fsck.k9.mail.ServerSettings;

        $r3 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String username>;

        if $r3 == null goto label09;

        $r3 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String username>;

        r4 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String encodeUtf8(java.lang.String)>($r3);

     label01:
        $r3 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String password>;

        if $r3 == null goto label10;

        $r3 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String password>;

        r5 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String encodeUtf8(java.lang.String)>($r3);

     label02:
        $r3 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String clientCertificateAlias>;

        if $r3 == null goto label11;

        $r3 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String clientCertificateAlias>;

        r6 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String encodeUtf8(java.lang.String)>($r3);

     label03:
        $r7 = <com.fsck.k9.mail.TransportUris$1: int[] $SwitchMap$com$fsck$k9$mail$ConnectionSecurity>;

        $r8 = $r0.<com.fsck.k9.mail.ServerSettings: com.fsck.k9.mail.ConnectionSecurity connectionSecurity>;

        $i0 = virtualinvoke $r8.<com.fsck.k9.mail.ConnectionSecurity: int ordinal()>();

        $i0 = $r7[$i0];

        lookupswitch($i0)
        {
            case 1: goto label12;
            case 2: goto label13;
            default: goto label04;
        };

     label04:
        $r3 = "smtp";

     label05:
        r1 = $r0.<com.fsck.k9.mail.ServerSettings: com.fsck.k9.mail.AuthType authenticationType>;

        if r1 == null goto label15;

        $r9 = <com.fsck.k9.mail.AuthType: com.fsck.k9.mail.AuthType EXTERNAL>;

        if $r9 != r1 goto label14;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r4 = virtualinvoke r1.<com.fsck.k9.mail.AuthType: java.lang.String name()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r11 = new java.net.URI;

        r5 = $r0.<com.fsck.k9.mail.ServerSettings: java.lang.String host>;

        $i0 = $r0.<com.fsck.k9.mail.ServerSettings: int port>;

     label07:
        specialinvoke $r11.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>($r3, r4, r5, $i0, null, null, null);

        $r3 = virtualinvoke $r11.<java.net.URI: java.lang.String toString()>();

     label08:
        return $r3;

     label09:
        r4 = "";

        goto label01;

     label10:
        r5 = "";

        goto label02;

     label11:
        r6 = "";

        goto label03;

     label12:
        $r3 = "smtp+ssl+";

        goto label05;

     label13:
        $r3 = "smtp+tls+";

        goto label05;

     label14:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r4 = virtualinvoke r1.<com.fsck.k9.mail.AuthType: java.lang.String name()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label06;

     label15:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label06;

     label16:
        r2 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Can\'t create SmtpTransport URI", r2);

        throw $r12;

        catch java.net.URISyntaxException from label07 to label08 with label16;
    }
    public static java.lang.String createTransportUri(com.fsck.k9.mail.ServerSettings)
    {
        com.fsck.k9.mail.ServerSettings $r0;
        com.fsck.k9.mail.ServerSettings$Type $r1, $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @parameter0: com.fsck.k9.mail.ServerSettings;

        $r1 = <com.fsck.k9.mail.ServerSettings$Type: com.fsck.k9.mail.ServerSettings$Type SMTP>;

        $r2 = $r0.<com.fsck.k9.mail.ServerSettings: com.fsck.k9.mail.ServerSettings$Type type>;

        if $r1 != $r2 goto label1;

        $r3 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String createSmtpUri(com.fsck.k9.mail.ServerSettings)>($r0);

        return $r3;

     label1:
        $r1 = <com.fsck.k9.mail.ServerSettings$Type: com.fsck.k9.mail.ServerSettings$Type WebDAV>;

        $r2 = $r0.<com.fsck.k9.mail.ServerSettings: com.fsck.k9.mail.ServerSettings$Type type>;

        if $r1 != $r2 goto label2;

        $r3 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String createWebDavUri(com.fsck.k9.mail.ServerSettings)>($r0);

        return $r3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a valid transport URI");

        throw $r4;
    }
    private static java.lang.String createWebDavUri(com.fsck.k9.mail.ServerSettings)
    {
        com.fsck.k9.mail.ServerSettings $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.fsck.k9.mail.ServerSettings;

        $r1 = staticinvoke <com.fsck.k9.mail.store.webdav.WebDavStore: java.lang.String createUri(com.fsck.k9.mail.ServerSettings)>($r0);

        return $r1;
    }
    private static com.fsck.k9.mail.ServerSettings decodeSmtpUri(java.lang.String)
    {
        java.lang.String $r0, r4, r5, r6, $r9;
        java.net.URI r1;
        java.net.URISyntaxException r2;
        com.fsck.k9.mail.AuthType r3, $r14, $r15;
        boolean $z0;
        com.fsck.k9.mail.ConnectionSecurity r7;
        com.fsck.k9.mail.ServerSettings$Type $r8;
        int i0, $i1;
        java.lang.String[] $r10;
        com.fsck.k9.mail.ServerSettings $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13;

        $r0 := @parameter0: java.lang.String;

        r3 = null;

        r4 = null;

        r5 = null;

        r6 = null;

        r1 = new java.net.URI;

     label01:
        specialinvoke r1.<java.net.URI: void <init>(java.lang.String)>($r0);

     label02:
        $r0 = virtualinvoke r1.<java.net.URI: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("smtp");

        if $z0 == 0 goto label07;

        r7 = <com.fsck.k9.mail.ConnectionSecurity: com.fsck.k9.mail.ConnectionSecurity NONE>;

        $r8 = <com.fsck.k9.mail.ServerSettings$Type: com.fsck.k9.mail.ServerSettings$Type SMTP>;

        i0 = $r8.<com.fsck.k9.mail.ServerSettings$Type: int defaultPort>;

     label03:
        $r0 = virtualinvoke r1.<java.net.URI: java.lang.String getHost()>();

        $i1 = virtualinvoke r1.<java.net.URI: int getPort()>();

        if $i1 == -1 goto label04;

        i0 = virtualinvoke r1.<java.net.URI: int getPort()>();

     label04:
        $r9 = virtualinvoke r1.<java.net.URI: java.lang.String getUserInfo()>();

        if $r9 == null goto label05;

        $r9 = virtualinvoke r1.<java.net.URI: java.lang.String getUserInfo()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i1 = lengthof $r10;

        if $i1 != 1 goto label10;

        r3 = <com.fsck.k9.mail.AuthType: com.fsck.k9.mail.AuthType PLAIN>;

        r4 = $r10[0];

        r4 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String decodeUtf8(java.lang.String)>(r4);

     label05:
        $r11 = new com.fsck.k9.mail.ServerSettings;

        $r8 = <com.fsck.k9.mail.ServerSettings$Type: com.fsck.k9.mail.ServerSettings$Type SMTP>;

        specialinvoke $r11.<com.fsck.k9.mail.ServerSettings: void <init>(com.fsck.k9.mail.ServerSettings$Type,java.lang.String,int,com.fsck.k9.mail.ConnectionSecurity,com.fsck.k9.mail.AuthType,java.lang.String,java.lang.String,java.lang.String)>($r8, $r0, i0, r7, r3, r4, r5, r6);

        return $r11;

     label06:
        r2 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid SmtpTransport URI", r2);

        throw $r12;

     label07:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("smtp+tls");

        if $z0 == 0 goto label08;

        r7 = <com.fsck.k9.mail.ConnectionSecurity: com.fsck.k9.mail.ConnectionSecurity STARTTLS_REQUIRED>;

        $r8 = <com.fsck.k9.mail.ServerSettings$Type: com.fsck.k9.mail.ServerSettings$Type SMTP>;

        i0 = $r8.<com.fsck.k9.mail.ServerSettings$Type: int defaultPort>;

        goto label03;

     label08:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("smtp+ssl");

        if $z0 == 0 goto label09;

        r7 = <com.fsck.k9.mail.ConnectionSecurity: com.fsck.k9.mail.ConnectionSecurity SSL_TLS_REQUIRED>;

        $r8 = <com.fsck.k9.mail.ServerSettings$Type: com.fsck.k9.mail.ServerSettings$Type SMTP>;

        i0 = $r8.<com.fsck.k9.mail.ServerSettings$Type: int defaultTlsPort>;

        goto label03;

     label09:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported protocol (");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r12;

     label10:
        $i1 = lengthof $r10;

        if $i1 != 2 goto label11;

        r3 = <com.fsck.k9.mail.AuthType: com.fsck.k9.mail.AuthType PLAIN>;

        r5 = $r10[0];

        r4 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String decodeUtf8(java.lang.String)>(r5);

        r5 = $r10[1];

        r5 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String decodeUtf8(java.lang.String)>(r5);

        goto label05;

     label11:
        $i1 = lengthof $r10;

        if $i1 != 3 goto label05;

        r4 = $r10[2];

        $r14 = staticinvoke <com.fsck.k9.mail.AuthType: com.fsck.k9.mail.AuthType valueOf(java.lang.String)>(r4);

        r3 = $r14;

        r4 = $r10[0];

        r4 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String decodeUtf8(java.lang.String)>(r4);

        $r15 = <com.fsck.k9.mail.AuthType: com.fsck.k9.mail.AuthType EXTERNAL>;

        if $r14 != $r15 goto label12;

        r6 = $r10[1];

        r6 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String decodeUtf8(java.lang.String)>(r6);

        goto label05;

     label12:
        r5 = $r10[1];

        r5 = staticinvoke <com.fsck.k9.mail.TransportUris: java.lang.String decodeUtf8(java.lang.String)>(r5);

        goto label05;

        catch java.net.URISyntaxException from label01 to label02 with label06;
    }
    public static com.fsck.k9.mail.ServerSettings decodeTransportUri(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        com.fsck.k9.mail.ServerSettings $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("smtp");

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <com.fsck.k9.mail.TransportUris: com.fsck.k9.mail.ServerSettings decodeSmtpUri(java.lang.String)>($r0);

        return $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("webdav");

        if $z0 == 0 goto label2;

        $r1 = staticinvoke <com.fsck.k9.mail.TransportUris: com.fsck.k9.mail.ServerSettings decodeWebDavUri(java.lang.String)>($r0);

        return $r1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a valid transport URI");

        throw $r2;
    }
    private static java.lang.String decodeUtf8(java.lang.String)
    {
        java.lang.String $r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.RuntimeException $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("UTF-8 not found");

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
    private static com.fsck.k9.mail.ServerSettings decodeWebDavUri(java.lang.String)
    {
        java.lang.String $r0;
        com.fsck.k9.mail.store.webdav.WebDavStoreSettings $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.fsck.k9.mail.store.webdav.WebDavStore: com.fsck.k9.mail.store.webdav.WebDavStoreSettings decodeUri(java.lang.String)>($r0);

        return $r1;
    }
    private static java.lang.String encodeUtf8(java.lang.String)
    {
        java.lang.String $r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.RuntimeException $r2;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8");

     label2:
        return $r0;

     label3:
        r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("UTF-8 not found");

        throw $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
