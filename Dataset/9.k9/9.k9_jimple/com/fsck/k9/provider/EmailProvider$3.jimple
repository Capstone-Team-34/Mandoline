com.fsck.k9.provider.EmailProvider$3 extends java.lang.Object implements com.fsck.k9.mailstore.LockableDatabase$DbCallback
final com.fsck.k9.provider.EmailProvider this$0
final java.lang.String[] val$projection
final java.lang.String val$sortOrder
final java.lang.String val$threadId
    void <init>(com.fsck.k9.provider.EmailProvider, java.lang.String[], java.lang.String, java.lang.String)
    {
        com.fsck.k9.provider.EmailProvider$3 r0;
        com.fsck.k9.provider.EmailProvider $r1;
        java.lang.String[] $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.fsck.k9.provider.EmailProvider$3;

        $r1 := @parameter0: com.fsck.k9.provider.EmailProvider;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        r0.<com.fsck.k9.provider.EmailProvider$3: com.fsck.k9.provider.EmailProvider this$0> = $r1;

        r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String[] val$projection> = $r2;

        r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String val$sortOrder> = $r3;

        r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String val$threadId> = $r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public android.database.Cursor doDbWork(android.database.sqlite.SQLiteDatabase) throws com.fsck.k9.mailstore.LockableDatabase$WrappedException, com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.provider.EmailProvider$3 r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String r2, $r5;
        java.lang.StringBuilder r3;
        boolean z0, $z1;
        java.lang.String[] $r4, $r6;
        int $i0, $i1;
        java.lang.Object[] $r7;
        android.database.Cursor $r8;

        r0 := @this: com.fsck.k9.provider.EmailProvider$3;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        z0 = 1;

        $r4 = r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String[] val$projection>;

        $i0 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label6;

        r2 = $r4[$i1];

        if z0 != 0 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r5 = "id";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label5;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m.id AS id");

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        z0 = 0;

        goto label2;

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        goto label3;

     label6:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM threads t JOIN messages m ON (m.id = t.message_id) ");

        $r4 = r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String[] val$projection>;

        $r6 = staticinvoke <com.fsck.k9.provider.EmailProvider: java.lang.String[] access$000()>();

        $r7 = (java.lang.Object[]) $r6;

        z0 = staticinvoke <com.fsck.k9.helper.Utility: boolean arrayContainsAny(java.lang.Object[],java.lang.Object[])>($r4, $r7);

        if z0 == 0 goto label7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEFT JOIN folders f ON (m.folder_id = f.id) ");

     label7:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE root = ? AND deleted = 0 AND empty = 0");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ORDER BY ");

        $r4 = staticinvoke <com.fsck.k9.provider.EmailProvider: java.lang.String[] access$100()>();

        r2 = r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String val$sortOrder>;

        r2 = staticinvoke <com.fsck.k9.search.SqlQueryBuilder: java.lang.String addPrefixToSelection(java.lang.String[],java.lang.String,java.lang.String)>($r4, "m.", r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r2 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.String)[1];

        $r5 = r0.<com.fsck.k9.provider.EmailProvider$3: java.lang.String val$threadId>;

        $r4[0] = $r5;

        $r8 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>(r2, $r4);

        return $r8;
    }
    public volatile java.lang.Object doDbWork(android.database.sqlite.SQLiteDatabase) throws com.fsck.k9.mailstore.LockableDatabase$WrappedException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.provider.EmailProvider$3 r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.Cursor $r2;

        r0 := @this: com.fsck.k9.provider.EmailProvider$3;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = virtualinvoke r0.<com.fsck.k9.provider.EmailProvider$3: android.database.Cursor doDbWork(android.database.sqlite.SQLiteDatabase)>($r1);

        return $r2;
    }
