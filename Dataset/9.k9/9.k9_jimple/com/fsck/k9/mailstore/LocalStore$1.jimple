com.fsck.k9.mailstore.LocalStore$1 extends java.lang.Object implements com.fsck.k9.mailstore.LockableDatabase$DbCallback
final com.fsck.k9.mailstore.LocalStore this$0
final java.io.File val$attachmentDirectory
final com.fsck.k9.mailstore.StorageManager val$storageManager
    void <init>(com.fsck.k9.mailstore.LocalStore, java.io.File, com.fsck.k9.mailstore.StorageManager)
    {
        com.fsck.k9.mailstore.LocalStore$1 r0;
        com.fsck.k9.mailstore.LocalStore $r1;
        java.io.File $r2;
        com.fsck.k9.mailstore.StorageManager $r3;

        r0 := @this: com.fsck.k9.mailstore.LocalStore$1;

        $r1 := @parameter0: com.fsck.k9.mailstore.LocalStore;

        $r2 := @parameter1: java.io.File;

        $r3 := @parameter2: com.fsck.k9.mailstore.StorageManager;

        r0.<com.fsck.k9.mailstore.LocalStore$1: com.fsck.k9.mailstore.LocalStore this$0> = $r1;

        r0.<com.fsck.k9.mailstore.LocalStore$1: java.io.File val$attachmentDirectory> = $r2;

        r0.<com.fsck.k9.mailstore.LocalStore$1: com.fsck.k9.mailstore.StorageManager val$storageManager> = $r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public java.lang.Long doDbWork(android.database.sqlite.SQLiteDatabase)
    {
        com.fsck.k9.mailstore.LocalStore$1 r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.io.File r2;
        java.io.File[] $r3;
        long l0, $l3;
        int $i1, $i2;
        boolean $z0;
        com.fsck.k9.mailstore.StorageManager $r4;
        com.fsck.k9.mailstore.LocalStore $r5;
        com.fsck.k9.Account $r6;
        java.lang.String $r7, $r9;
        com.fsck.k9.mailstore.LockableDatabase $r8;
        java.lang.Long $r10;

        r0 := @this: com.fsck.k9.mailstore.LocalStore$1;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 = r0.<com.fsck.k9.mailstore.LocalStore$1: java.io.File val$attachmentDirectory>;

        $r3 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        l0 = 0L;

        if $r3 == null goto label3;

        $i1 = lengthof $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        r2 = $r3[$i2];

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $l3 = virtualinvoke r2.<java.io.File: long length()>();

        l0 = l0 + $l3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r4 = r0.<com.fsck.k9.mailstore.LocalStore$1: com.fsck.k9.mailstore.StorageManager val$storageManager>;

        $r5 = r0.<com.fsck.k9.mailstore.LocalStore$1: com.fsck.k9.mailstore.LocalStore this$0>;

        $r6 = staticinvoke <com.fsck.k9.mailstore.LocalStore: com.fsck.k9.Account access$000(com.fsck.k9.mailstore.LocalStore)>($r5);

        $r7 = virtualinvoke $r6.<com.fsck.k9.Account: java.lang.String getUuid()>();

        $r5 = r0.<com.fsck.k9.mailstore.LocalStore$1: com.fsck.k9.mailstore.LocalStore this$0>;

        $r8 = staticinvoke <com.fsck.k9.mailstore.LocalStore: com.fsck.k9.mailstore.LockableDatabase access$100(com.fsck.k9.mailstore.LocalStore)>($r5);

        $r9 = virtualinvoke $r8.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String getStorageProviderId()>();

        r2 = virtualinvoke $r4.<com.fsck.k9.mailstore.StorageManager: java.io.File getDatabase(java.lang.String,java.lang.String)>($r7, $r9);

        $l3 = virtualinvoke r2.<java.io.File: long length()>();

        l0 = $l3 + l0;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        return $r10;
    }
    public volatile java.lang.Object doDbWork(android.database.sqlite.SQLiteDatabase) throws com.fsck.k9.mailstore.LockableDatabase$WrappedException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mailstore.LocalStore$1 r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Long $r2;

        r0 := @this: com.fsck.k9.mailstore.LocalStore$1;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 = virtualinvoke r0.<com.fsck.k9.mailstore.LocalStore$1: java.lang.Long doDbWork(android.database.sqlite.SQLiteDatabase)>($r1);

        return $r2;
    }
