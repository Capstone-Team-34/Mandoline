com.fsck.k9.mailstore.LockableDatabase$StorageListener extends java.lang.Object implements com.fsck.k9.mailstore.StorageManager$StorageListener
final com.fsck.k9.mailstore.LockableDatabase this$0
    private void <init>(com.fsck.k9.mailstore.LockableDatabase)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        com.fsck.k9.mailstore.LockableDatabase $r1;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    void <init>(com.fsck.k9.mailstore.LockableDatabase, com.fsck.k9.mailstore.LockableDatabase$1)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        com.fsck.k9.mailstore.LockableDatabase $r1;
        com.fsck.k9.mailstore.LockableDatabase$1 $r2;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        $r2 := @parameter1: com.fsck.k9.mailstore.LockableDatabase$1;

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: void <init>(com.fsck.k9.mailstore.LockableDatabase)>($r1);

        return;
    }
    public void onMount(java.lang.String)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        java.lang.String $r1, $r4;
        com.fsck.k9.mailstore.UnavailableStorageException r2;
        com.fsck.k9.mailstore.LockableDatabase $r3;
        boolean $z0;
        java.lang.Object[] $r5;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$000(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = newarray (java.lang.Object)[2];

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$100(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $r5[0] = $r4;

        $r5[1] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("LockableDatabase: Opening DB %s due to mount event on StorageProvider: %s", $r5);

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label2:
        staticinvoke <com.fsck.k9.mailstore.LockableDatabase: void access$300(com.fsck.k9.mailstore.LockableDatabase)>($r3);

     label3:
        return;

     label4:
        r2 := @caughtexception;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Unable to open DB on mount", $r5);

        return;

        catch com.fsck.k9.mailstore.UnavailableStorageException from label2 to label3 with label4;
    }
    public void onUnmount(java.lang.String)
    {
        com.fsck.k9.mailstore.LockableDatabase$StorageListener r0;
        java.lang.String $r1, $r4;
        com.fsck.k9.mailstore.UnavailableStorageException r2;
        com.fsck.k9.mailstore.LockableDatabase $r3;
        boolean $z0;
        java.lang.Object[] $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$000(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r5 = newarray (java.lang.Object)[2];

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r4 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: java.lang.String access$100(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        $r5[0] = $r4;

        $r5[1] = $r1;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("LockableDatabase: Closing DB %s due to unmount event on StorageProvider: %s", $r5);

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label02:
        virtualinvoke $r3.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite()>();

     label03:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

        $r6 = staticinvoke <com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase access$200(com.fsck.k9.mailstore.LockableDatabase)>($r3);

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void close()>();

     label04:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label05:
        virtualinvoke $r3.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

     label06:
        return;

     label07:
        r2 := @caughtexception;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Unable to writelock on unmount", $r5);

        return;

     label08:
        $r7 := @caughtexception;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: com.fsck.k9.mailstore.LockableDatabase this$0>;

     label09:
        virtualinvoke $r3.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        throw $r7;

     label10:
        nop;

        catch com.fsck.k9.mailstore.UnavailableStorageException from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch com.fsck.k9.mailstore.UnavailableStorageException from label05 to label06 with label07;
        catch com.fsck.k9.mailstore.UnavailableStorageException from label09 to label10 with label07;
    }
