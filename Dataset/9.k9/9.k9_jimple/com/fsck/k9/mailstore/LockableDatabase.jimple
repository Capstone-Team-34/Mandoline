com.fsck.k9.mailstore.LockableDatabase extends java.lang.Object
private android.content.Context context
private java.lang.ThreadLocal inTransaction
private android.database.sqlite.SQLiteDatabase mDb
private final java.util.concurrent.locks.Lock mReadLock
private com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition mSchemaDefinition
private final com.fsck.k9.mailstore.LockableDatabase$StorageListener mStorageListener
private java.lang.String mStorageProviderId
private final java.util.concurrent.locks.Lock mWriteLock
private java.lang.String uUid
    public void <init>(android.content.Context, java.lang.String, com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition)
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        android.content.Context $r1;
        java.lang.String $r2;
        com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock r4;
        java.util.concurrent.locks.Lock $r5;
        com.fsck.k9.mailstore.LockableDatabase$StorageListener $r6;
        java.lang.ThreadLocal $r7;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke r4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(1);

        $r5 = interfaceinvoke r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mReadLock> = $r5;

        $r5 = interfaceinvoke r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mWriteLock> = $r5;

        $r6 = new com.fsck.k9.mailstore.LockableDatabase$StorageListener;

        specialinvoke $r6.<com.fsck.k9.mailstore.LockableDatabase$StorageListener: void <init>(com.fsck.k9.mailstore.LockableDatabase,com.fsck.k9.mailstore.LockableDatabase$1)>(r0, null);

        r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.LockableDatabase$StorageListener mStorageListener> = $r6;

        $r7 = new java.lang.ThreadLocal;

        specialinvoke $r7.<java.lang.ThreadLocal: void <init>()>();

        r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.ThreadLocal inTransaction> = $r7;

        r0.<com.fsck.k9.mailstore.LockableDatabase: android.content.Context context> = $r1;

        r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid> = $r2;

        r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition mSchemaDefinition> = $r3;

        return;
    }
    static java.lang.String access$000(com.fsck.k9.mailstore.LockableDatabase)
    {
        com.fsck.k9.mailstore.LockableDatabase $r0;
        java.lang.String r1;

        $r0 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        r1 = $r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        return r1;
    }
    static java.lang.String access$100(com.fsck.k9.mailstore.LockableDatabase)
    {
        com.fsck.k9.mailstore.LockableDatabase $r0;
        java.lang.String r1;

        $r0 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        r1 = $r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        return r1;
    }
    static android.database.sqlite.SQLiteDatabase access$200(com.fsck.k9.mailstore.LockableDatabase)
    {
        com.fsck.k9.mailstore.LockableDatabase $r0;
        android.database.sqlite.SQLiteDatabase r1;

        $r0 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        r1 = $r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        return r1;
    }
    static void access$300(com.fsck.k9.mailstore.LockableDatabase) throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase $r0;

        $r0 := @parameter0: com.fsck.k9.mailstore.LockableDatabase;

        specialinvoke $r0.<com.fsck.k9.mailstore.LockableDatabase: void openOrCreateDataspace()>();

        return;
    }
    private void delete(boolean) throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        boolean $z0, $z1;
        java.io.File r1, $r6;
        int $i0, $i1;
        android.database.sqlite.SQLiteDatabase $r2;
        com.fsck.k9.mailstore.StorageManager $r3;
        java.lang.String $r4, $r5;
        java.io.File[] $r7;
        java.lang.Object[] $r8;
        java.lang.Exception r9, r11, r12;
        java.lang.Throwable $r10;
        com.fsck.k9.mailstore.LockableDatabase$StorageListener $r13;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $z0 := @parameter0: boolean;

        $i0 = 0;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite()>();

     label01:
        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void close()>();

     label02:
        $r3 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

     label03:
        $r4 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        $r6 = virtualinvoke $r3.<com.fsck.k9.mailstore.StorageManager: java.io.File getAttachmentDirectory(java.lang.String,java.lang.String)>($r4, $r5);

        $r7 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>();

     label04:
        $i1 = lengthof $r7;

     label05:
        if $i0 >= $i1 goto label17;

     label06:
        r1 = $r7[$i0];

     label07:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

     label08:
        if $z1 == 0 goto label12;

     label09:
        $z1 = virtualinvoke r1.<java.io.File: boolean delete()>();

     label10:
        if $z1 != 0 goto label12;

     label11:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Attachment was not deleted!", $r8);

     label12:
        $i0 = $i0 + 1;

        goto label05;

     label13:
        r9 := @caughtexception;

     label14:
        $r8 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r8[0] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Exception caught in DB close: %s", $r8);

     label15:
        goto label02;

     label16:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        throw $r10;

     label17:
        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

     label18:
        if $z1 == 0 goto label22;

     label19:
        $z1 = virtualinvoke $r6.<java.io.File: boolean delete()>();

     label20:
        if $z1 != 0 goto label22;

     label21:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Attachment directory was not deleted!", $r8);

     label22:
        $r4 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        r1 = virtualinvoke $r3.<com.fsck.k9.mailstore.StorageManager: java.io.File getDatabase(java.lang.String,java.lang.String)>($r4, $r5);

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void deleteDatabase(java.io.File)>(r1);

     label23:
        if $z0 == 0 goto label32;

     label24:
        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void openOrCreateDataspace()>();

     label25:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        return;

     label26:
        r11 := @caughtexception;

     label27:
        $r8 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r8[0] = $r4;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Exception caught in clearing attachments: %s", $r8);

     label28:
        goto label22;

     label29:
        r12 := @caughtexception;

     label30:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r12, "LockableDatabase: delete(): Unable to delete backing DB file", $r8);

     label31:
        goto label23;

     label32:
        $r3 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

        $r13 = r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.LockableDatabase$StorageListener mStorageListener>;

        virtualinvoke $r3.<com.fsck.k9.mailstore.StorageManager: void removeListener(com.fsck.k9.mailstore.StorageManager$StorageListener)>($r13);

     label33:
        goto label25;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Exception from label03 to label05 with label26;
        catch java.lang.Exception from label06 to label08 with label26;
        catch java.lang.Exception from label09 to label10 with label26;
        catch java.lang.Exception from label11 to label12 with label26;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Exception from label17 to label18 with label26;
        catch java.lang.Exception from label19 to label20 with label26;
        catch java.lang.Exception from label21 to label22 with label26;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label19 to label20 with label16;
        catch java.lang.Throwable from label21 to label22 with label16;
        catch java.lang.Exception from label22 to label23 with label29;
        catch java.lang.Throwable from label22 to label23 with label16;
        catch java.lang.Throwable from label24 to label25 with label16;
        catch java.lang.Throwable from label27 to label28 with label16;
        catch java.lang.Throwable from label30 to label31 with label16;
        catch java.lang.Throwable from label32 to label33 with label16;
    }
    private void deleteDatabase(java.io.File)
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.io.File $r1, $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object[] $r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.io.File;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label2;

        $z0 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>($r1);

     label1:
        if $z0 != 0 goto label3;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.String,java.lang.Object[])>("LockableDatabase: deleteDatabase(): No files deleted.", $r2);

        return;

     label2:
        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-journal");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r3.<java.io.File: boolean delete()>();

        $z0 = $z0 | $z1;

        goto label1;

     label3:
        return;
    }
    private void doOpenOrCreateDb(java.io.File)
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.io.File $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        android.content.Context $r4;
        android.database.sqlite.SQLiteDatabase $r5;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.io.File;

        $r2 = "InternalStorage";

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.content.Context context>;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r2, 0, null);

        r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb> = $r5;

        return;

     label1:
        $r5 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r1, null);

        r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb> = $r5;

        return;
    }
    private com.fsck.k9.mailstore.StorageManager getStorageManager()
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        com.fsck.k9.mailstore.StorageManager $r1;
        android.content.Context $r2;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.content.Context context>;

        $r1 = staticinvoke <com.fsck.k9.mailstore.StorageManager: com.fsck.k9.mailstore.StorageManager getInstance(android.content.Context)>($r2);

        return $r1;
    }
    private void openOrCreateDataspace() throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        android.database.sqlite.SQLiteException r1;
        java.lang.String $r2;
        java.io.File $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        int $i0, $i1;
        com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition $r5;
        java.lang.Object[] $r6;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite()>();

     label01:
        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        $r3 = virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: java.io.File prepareStorage(java.lang.String)>($r2);

     label02:
        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void doOpenOrCreateDb(java.io.File)>($r3);

     label03:
        $r4 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        $i0 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition mSchemaDefinition>;

        $i1 = interfaceinvoke $r5.<com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition: int getVersion()>();

     label04:
        if $i0 == $i1 goto label06;

     label05:
        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition mSchemaDefinition>;

        $r4 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        interfaceinvoke $r5.<com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition: void doDbUpgrade(android.database.sqlite.SQLiteDatabase)>($r4);

     label06:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        return;

     label07:
        r1 := @caughtexception;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r3;

        staticinvoke <timber.log.Timber: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r1, "Unable to open DB %s - removing file and retrying", $r6);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

     label09:
        if $z0 == 0 goto label13;

     label10:
        $z0 = virtualinvoke $r3.<java.io.File: boolean delete()>();

     label11:
        if $z0 != 0 goto label13;

     label12:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r3;

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Failed to remove %s that couldn\'t be opened", $r6);

     label13:
        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void doOpenOrCreateDb(java.io.File)>($r3);

     label14:
        goto label03;

     label15:
        $r7 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch android.database.sqlite.SQLiteException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label14 with label15;
    }
    public void delete() throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void delete(boolean)>(0);

        return;
    }
    public java.lang.Object execute(boolean, com.fsck.k9.mailstore.LockableDatabase$DbCallback) throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        boolean $z0, z1;
        com.fsck.k9.mailstore.LockableDatabase$DbCallback r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        long $l0, $l1;
        java.lang.Object[] $r6;
        java.lang.Long $r7;
        java.lang.Exception $r8;
        java.lang.StackTraceElement[] $r9;
        java.lang.StackTraceElement $r10;
        java.lang.Throwable $r11, $r12;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $z0 := @parameter0: boolean;

        r1 := @parameter1: com.fsck.k9.mailstore.LockableDatabase$DbCallback;

        z1 = 1;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockRead()>();

        if $z0 == 0 goto label16;

        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.ThreadLocal inTransaction>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r3 != null goto label16;

     label01:
        $z0 = staticinvoke <com.fsck.k9.K9: boolean isDebug()>();

     label02:
        if z1 == 0 goto label04;

     label03:
        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.ThreadLocal inTransaction>;

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>($r4);

        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label04:
        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        $r3 = interfaceinvoke r1.<com.fsck.k9.mailstore.LockableDatabase$DbCallback: java.lang.Object doDbWork(android.database.sqlite.SQLiteDatabase)>($r5);

     label05:
        if z1 == 0 goto label07;

     label06:
        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label07:
        if z1 == 0 goto label14;

        if $z0 == 0 goto label17;

     label08:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label09:
        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label10:
        if $z0 == 0 goto label14;

     label11:
        $r6 = newarray (java.lang.Object)[2];

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label12:
        $l0 = $l1 - $l0;

     label13:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6[0] = $r7;

        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r10 = $r9[1];

        $r6[1] = $r10;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("LockableDatabase: Transaction ended, took %d ms / %s", $r6);

     label14:
        if z1 == 0 goto label15;

        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.ThreadLocal inTransaction>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

     label15:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockRead()>();

        return $r3;

     label16:
        z1 = 0;

        goto label01;

     label17:
        $l0 = 0L;

        goto label09;

     label18:
        $r11 := @caughtexception;

        if z1 == 0 goto label25;

        if $z0 == 0 goto label28;

     label19:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label20:
        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label21:
        if $z0 == 0 goto label25;

     label22:
        $r6 = newarray (java.lang.Object)[2];

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label23:
        $l0 = $l1 - $l0;

     label24:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6[0] = $r7;

        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r10 = $r9[1];

        $r6[1] = $r10;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("LockableDatabase: Transaction ended, took %d ms / %s", $r6);

     label25:
        throw $r11;

     label26:
        $r12 := @caughtexception;

        if z1 == 0 goto label27;

        $r2 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.ThreadLocal inTransaction>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

     label27:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockRead()>();

        throw $r12;

     label28:
        $l0 = 0L;

        goto label20;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label24 to label26 with label26;
    }
    public java.lang.String getStorageProviderId()
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String r1;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        r1 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        return r1;
    }
    protected void lockRead() throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;
        com.fsck.k9.mailstore.StorageManager $r2;
        java.util.concurrent.locks.Lock $r3;
        java.lang.Exception r4;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mReadLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

     label2:
        $r1 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

     label3:
        virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: void lockProvider(java.lang.String)>($r1);

     label4:
        return;

     label5:
        r4 := @caughtexception;

     label6:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mReadLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r4;

     label7:
        r4 := @caughtexception;

        goto label6;

        catch com.fsck.k9.mailstore.UnavailableStorageException from label1 to label2 with label7;
        catch com.fsck.k9.mailstore.UnavailableStorageException from label3 to label4 with label7;
        catch java.lang.RuntimeException from label1 to label4 with label5;
    }
    protected void lockWrite() throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite(java.lang.String)>($r1);

        return;
    }
    protected void lockWrite(java.lang.String) throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;
        com.fsck.k9.mailstore.StorageManager $r2;
        java.util.concurrent.locks.Lock $r3;
        java.lang.Exception r4;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mWriteLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

        virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: void lockProvider(java.lang.String)>($r1);

     label2:
        return;

     label3:
        r4 := @caughtexception;

     label4:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mWriteLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r4;

     label5:
        r4 := @caughtexception;

        goto label4;

        catch com.fsck.k9.mailstore.UnavailableStorageException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
    public void open() throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        com.fsck.k9.mailstore.LockableDatabase$StorageListener $r1;
        com.fsck.k9.mailstore.StorageManager $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite()>();

     label1:
        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void openOrCreateDataspace()>();

     label2:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.content.Context context>;

        $r2 = staticinvoke <com.fsck.k9.mailstore.StorageManager: com.fsck.k9.mailstore.StorageManager getInstance(android.content.Context)>($r3);

        $r1 = r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.LockableDatabase$StorageListener mStorageListener>;

        virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: void addListener(com.fsck.k9.mailstore.StorageManager$StorageListener)>($r1);

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    protected java.io.File prepareStorage(java.lang.String) throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1, $r3;
        com.fsck.k9.mailstore.StorageManager $r2;
        java.io.File $r4, $r5, $r8;
        boolean $z0;
        com.fsck.k9.mailstore.UnavailableStorageException $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r4 = virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: java.io.File getDatabase(java.lang.String,java.lang.String)>($r3, $r1);

        $r5 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

     label1:
        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $r6 = new com.fsck.k9.mailstore.UnavailableStorageException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to access: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.fsck.k9.mailstore.UnavailableStorageException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label2:
        staticinvoke <com.fsck.k9.helper.FileHelper: void touchFile(java.io.File,java.lang.String)>($r5, ".nomedia");

     label3:
        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r5 = virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: java.io.File getAttachmentDirectory(java.lang.String,java.lang.String)>($r3, $r1);

        $r8 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label4;

        virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

        staticinvoke <com.fsck.k9.helper.FileHelper: void touchFile(java.io.File,java.lang.String)>($r8, ".nomedia");

     label4:
        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

     label5:
        return $r4;
    }
    public void recreate() throws com.fsck.k9.mailstore.UnavailableStorageException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void delete(boolean)>(1);

        return;
    }
    public void setStorageProviderId(java.lang.String)
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.lang.String;

        r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId> = $r1;

        return;
    }
    public void switchProvider(java.lang.String) throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1, r3, $r7;
        java.lang.Exception r2;
        boolean $z0;
        java.lang.Object[] $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        com.fsck.k9.mailstore.StorageManager $r6;
        java.io.File $r8, $r9, $r10;
        java.lang.Throwable $r11, $r12;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.lang.String;

        r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label01;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r1;

        staticinvoke <timber.log.Timber: void v(java.lang.String,java.lang.Object[])>("LockableDatabase: Ignoring provider switch request as they are equal: %s", $r4);

        return;

     label01:
        r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite(java.lang.String)>(r3);

     label02:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void lockWrite(java.lang.String)>($r1);

     label03:
        $r5 = r0.<com.fsck.k9.mailstore.LockableDatabase: android.database.sqlite.SQLiteDatabase mDb>;

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: void close()>();

     label04:
        $r6 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

        $r7 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r8 = virtualinvoke $r6.<com.fsck.k9.mailstore.StorageManager: java.io.File getDatabase(java.lang.String,java.lang.String)>($r7, r3);

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: java.io.File prepareStorage(java.lang.String)>($r1);

        $r7 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r9 = virtualinvoke $r6.<com.fsck.k9.mailstore.StorageManager: java.io.File getDatabase(java.lang.String,java.lang.String)>($r7, $r1);

        staticinvoke <com.fsck.k9.helper.FileHelper: void moveRecursive(java.io.File,java.io.File)>($r8, $r9);

        $r7 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r9 = virtualinvoke $r6.<com.fsck.k9.mailstore.StorageManager: java.io.File getAttachmentDirectory(java.lang.String,java.lang.String)>($r7, r3);

        $r7 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String uUid>;

        $r10 = virtualinvoke $r6.<com.fsck.k9.mailstore.StorageManager: java.io.File getAttachmentDirectory(java.lang.String,java.lang.String)>($r7, $r1);

        staticinvoke <com.fsck.k9.helper.FileHelper: void moveRecursive(java.io.File,java.io.File)>($r9, $r10);

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void deleteDatabase(java.io.File)>($r8);

        r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId> = $r1;

        specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void openOrCreateDataspace()>();

     label05:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite(java.lang.String)>($r1);

     label06:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite(java.lang.String)>(r3);

        return;

     label07:
        r2 := @caughtexception;

     label08:
        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r2, "Unable to close DB on local store migration", $r4);

     label09:
        goto label04;

     label10:
        $r11 := @caughtexception;

     label11:
        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite(java.lang.String)>($r1);

        throw $r11;

     label12:
        $r12 := @caughtexception;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite(java.lang.String)>(r3);

        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Exception from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label12;
    }
    protected void unlockRead()
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;
        com.fsck.k9.mailstore.StorageManager $r2;
        java.util.concurrent.locks.Lock $r3;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r2 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

        $r1 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: void unlockProvider(java.lang.String)>($r1);

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mReadLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }
    protected void unlockWrite()
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.lang.String mStorageProviderId>;

        virtualinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: void unlockWrite(java.lang.String)>($r1);

        return;
    }
    protected void unlockWrite(java.lang.String)
    {
        com.fsck.k9.mailstore.LockableDatabase r0;
        java.lang.String $r1;
        com.fsck.k9.mailstore.StorageManager $r2;
        java.util.concurrent.locks.Lock $r3;

        r0 := @this: com.fsck.k9.mailstore.LockableDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.fsck.k9.mailstore.LockableDatabase: com.fsck.k9.mailstore.StorageManager getStorageManager()>();

        virtualinvoke $r2.<com.fsck.k9.mailstore.StorageManager: void unlockProvider(java.lang.String)>($r1);

        $r3 = r0.<com.fsck.k9.mailstore.LockableDatabase: java.util.concurrent.locks.Lock mWriteLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }
