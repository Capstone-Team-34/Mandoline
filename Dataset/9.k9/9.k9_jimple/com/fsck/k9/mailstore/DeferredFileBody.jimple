com.fsck.k9.mailstore.DeferredFileBody extends java.lang.Object implements com.fsck.k9.mail.internet.RawDataBody com.fsck.k9.mail.internet.SizeAware
public static final int DEFAULT_MEMORY_BACKED_THRESHOLD
private byte[] data
private final java.lang.String encoding
private java.io.File file
private final com.fsck.k9.mailstore.util.FileFactory fileFactory
private final int memoryBackedThreshold
    void <init>(int, com.fsck.k9.mailstore.util.FileFactory, java.lang.String)
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        int $i0;
        com.fsck.k9.mailstore.util.FileFactory $r1;
        java.lang.String $r2;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.fsck.k9.mailstore.util.FileFactory;

        $r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.mailstore.DeferredFileBody: com.fsck.k9.mailstore.util.FileFactory fileFactory> = $r1;

        r0.<com.fsck.k9.mailstore.DeferredFileBody: int memoryBackedThreshold> = $i0;

        r0.<com.fsck.k9.mailstore.DeferredFileBody: java.lang.String encoding> = $r2;

        return;
    }
    public void <init>(com.fsck.k9.mailstore.util.FileFactory, java.lang.String)
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        com.fsck.k9.mailstore.util.FileFactory $r1;
        java.lang.String $r2;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 := @parameter0: com.fsck.k9.mailstore.util.FileFactory;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.fsck.k9.mailstore.DeferredFileBody: void <init>(int,com.fsck.k9.mailstore.util.FileFactory,java.lang.String)>(8192, $r1, $r2);

        return;
    }
    static java.io.File access$002(com.fsck.k9.mailstore.DeferredFileBody, java.io.File)
    {
        com.fsck.k9.mailstore.DeferredFileBody $r0;
        java.io.File $r1;

        $r0 := @parameter0: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 := @parameter1: java.io.File;

        $r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file> = $r1;

        return $r1;
    }
    static byte[] access$102(com.fsck.k9.mailstore.DeferredFileBody, byte[])
    {
        com.fsck.k9.mailstore.DeferredFileBody $r0;
        byte[] $r1;

        $r0 := @parameter0: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 := @parameter1: byte[];

        $r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data> = $r1;

        return $r1;
    }
    private void writeMemoryToFile() throws java.io.IOException
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        java.io.FileOutputStream r1;
        java.io.File $r2;
        java.lang.IllegalStateException $r3;
        byte[] $r4;
        java.lang.Object[] $r5;
        com.fsck.k9.mailstore.util.FileFactory $r6;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        if $r2 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Body is already file-backed!");

        throw $r3;

     label1:
        $r4 = r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data>;

        if $r4 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Data must be fully written before it can be read!");

        throw $r3;

     label2:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Writing body to file for attachment access", $r5);

        $r6 = r0.<com.fsck.k9.mailstore.DeferredFileBody: com.fsck.k9.mailstore.util.FileFactory fileFactory>;

        $r2 = interfaceinvoke $r6.<com.fsck.k9.mailstore.util.FileFactory: java.io.File createFile()>();

        r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file> = $r2;

        r1 = new java.io.FileOutputStream;

        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        specialinvoke r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        $r4 = r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data>;

        virtualinvoke r1.<java.io.FileOutputStream: void write(byte[])>($r4);

        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data> = null;

        return;
    }
    public java.lang.String getEncoding()
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        java.lang.String r1;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        r1 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.lang.String encoding>;

        return r1;
    }
    public java.io.File getFile() throws java.io.IOException
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        java.io.File $r1;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        if $r1 != null goto label1;

        specialinvoke r0.<com.fsck.k9.mailstore.DeferredFileBody: void writeMemoryToFile()>();

     label1:
        $r1 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        return $r1;
    }
    public java.io.InputStream getInputStream() throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        java.io.IOException r1;
        java.io.File $r2;
        java.lang.Object[] $r3;
        java.io.BufferedInputStream $r4;
        java.io.FileInputStream $r5;
        byte[] $r6;
        java.io.ByteArrayInputStream $r7;
        com.fsck.k9.mail.MessagingException $r8;
        java.lang.IllegalStateException $r9;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        if $r2 == null goto label05;

        $r3 = newarray (java.lang.Object)[0];

     label01:
        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Decrypted data is file-backed.", $r3);

     label02:
        $r4 = new java.io.BufferedInputStream;

        $r5 = new java.io.FileInputStream;

        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

     label03:
        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r5);

     label04:
        return $r4;

     label05:
        $r6 = r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data>;

        if $r6 == null goto label11;

        $r3 = newarray (java.lang.Object)[0];

     label06:
        staticinvoke <timber.log.Timber: void d(java.lang.String,java.lang.Object[])>("Decrypted data is memory-backed.", $r3);

     label07:
        $r7 = new java.io.ByteArrayInputStream;

        $r6 = r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data>;

     label08:
        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

     label09:
        return $r7;

     label10:
        r1 := @caughtexception;

        $r8 = new com.fsck.k9.mail.MessagingException;

        specialinvoke $r8.<com.fsck.k9.mail.MessagingException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to open body", r1);

        throw $r8;

     label11:
        $r9 = new java.lang.IllegalStateException;

     label12:
        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Data must be fully written before it can be read!");

     label13:
        throw $r9;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label12 to label13 with label10;
    }
    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        com.fsck.k9.mailstore.DeferredFileBody$1 $r1;
        int $i0;
        com.fsck.k9.mailstore.util.FileFactory $r2;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 = new com.fsck.k9.mailstore.DeferredFileBody$1;

        $i0 = r0.<com.fsck.k9.mailstore.DeferredFileBody: int memoryBackedThreshold>;

        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: com.fsck.k9.mailstore.util.FileFactory fileFactory>;

        specialinvoke $r1.<com.fsck.k9.mailstore.DeferredFileBody$1: void <init>(com.fsck.k9.mailstore.DeferredFileBody,int,com.fsck.k9.mailstore.util.FileFactory)>(r0, $i0, $r2);

        return $r1;
    }
    public long getSize()
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        long $l0;
        java.io.File $r1;
        byte[] $r2;
        int $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        if $r1 == null goto label1;

        $r1 = r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.File file>;

        $l0 = virtualinvoke $r1.<java.io.File: long length()>();

        return $l0;

     label1:
        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data>;

        if $r2 == null goto label2;

        $r2 = r0.<com.fsck.k9.mailstore.DeferredFileBody: byte[] data>;

        $i1 = lengthof $r2;

        $l0 = (long) $i1;

        return $l0;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Data must be fully written before it can be read!");

        throw $r3;
    }
    public void setEncoding(java.lang.String) throws com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot re-encode a DecryptedTempFileBody!");

        throw $r2;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException, com.fsck.k9.mail.MessagingException
    {
        com.fsck.k9.mailstore.DeferredFileBody r0;
        java.io.OutputStream $r1;
        java.io.InputStream $r2;

        r0 := @this: com.fsck.k9.mailstore.DeferredFileBody;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = virtualinvoke r0.<com.fsck.k9.mailstore.DeferredFileBody: java.io.InputStream getInputStream()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r2, $r1);

        return;
    }
