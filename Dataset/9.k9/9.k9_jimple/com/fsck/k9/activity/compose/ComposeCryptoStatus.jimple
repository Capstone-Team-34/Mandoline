com.fsck.k9.activity.compose.ComposeCryptoStatus extends java.lang.Object
private com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode
private com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState
private boolean enablePgpInline
private java.lang.Long openPgpKeyId
private boolean preferEncryptMutual
private java.lang.String[] recipientAddresses
private com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus
    public void <init>()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState access$002(com.fsck.k9.activity.compose.ComposeCryptoStatus, com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState> = $r1;

        return $r1;
    }
    static com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode access$102(com.fsck.k9.activity.compose.ComposeCryptoStatus, com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode> = $r1;

        return $r1;
    }
    static java.lang.String[] access$202(com.fsck.k9.activity.compose.ComposeCryptoStatus, java.lang.String[])
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        java.lang.String[] $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: java.lang.String[];

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses> = $r1;

        return $r1;
    }
    static java.lang.Long access$302(com.fsck.k9.activity.compose.ComposeCryptoStatus, java.lang.Long)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        java.lang.Long $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter1: java.lang.Long;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long openPgpKeyId> = $r1;

        return $r1;
    }
    static boolean access$402(com.fsck.k9.activity.compose.ComposeCryptoStatus, boolean)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        boolean $z0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 := @parameter1: boolean;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline> = $z0;

        return $z0;
    }
    static boolean access$502(com.fsck.k9.activity.compose.ComposeCryptoStatus, boolean)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r0;
        boolean $z0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 := @parameter1: boolean;

        $r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean preferEncryptMutual> = $z0;

        return $z0;
    }
    boolean allRecipientsCanEncrypt()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean $z0;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus $r1;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        if $r1 == null goto label1;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        $r2 = $r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType type>;

        $z0 = virtualinvoke $r2.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean canEncrypt()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean canEncryptAndIsMutual()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean $z0;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus $r1;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allRecipientsCanEncrypt()>();

        if $z0 == 0 goto label1;

        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean preferEncryptMutual>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        $r2 = $r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType type>;

        $z0 = virtualinvoke $r2.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean isMutual()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState getAttachErrorStateOrNull()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        boolean $z0;
        com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState r3;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState UNCONFIGURED>;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline>;

        if $z0 == 0 goto label2;

        r3 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState IS_INLINE>;

        return r3;

     label2:
        return null;
    }
    android.app.PendingIntent getAutocryptPendingIntent()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus $r1;
        android.app.PendingIntent r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        r2 = $r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus: android.app.PendingIntent intent>;

        return r2;
    }
    com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType getCryptoSpecialModeDisplayType()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        boolean $z0;
        com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType r3;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState OK>;

        if $r2 == $r1 goto label1;

        r3 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType NONE>;

        return r3;

     label1:
        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isSignOnly()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isPgpInlineModeEnabled()>();

        if $z0 == 0 goto label2;

        r3 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType SIGN_ONLY_PGP_INLINE>;

        return r3;

     label2:
        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isSignOnly()>();

        if $z0 == 0 goto label3;

        r3 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType SIGN_ONLY>;

        return r3;

     label3:
        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allRecipientsCanEncrypt()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isPgpInlineModeEnabled()>();

        if $z0 == 0 goto label4;

        r3 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType PGP_INLINE>;

        return r3;

     label4:
        r3 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType NONE>;

        return r3;
    }
    com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType getCryptoStatusDisplayType()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType r1, $r7;
        int[] $r2;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r3;
        int $i0;
        java.lang.AssertionError $r4;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus $r5;
        java.lang.IllegalStateException $r6;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r8;
        boolean $z0;
        com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType r9;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$1: int[] $SwitchMap$com$fsck$k9$activity$compose$RecipientPresenter$CryptoProviderState>;

        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $i0 = virtualinvoke $r3.<com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label05;
            default: goto label01;
        };

     label01:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("all CryptoProviderStates must be handled!");

        throw $r4;

     label02:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType UNCONFIGURED>;

        return r9;

     label03:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType UNINITIALIZED>;

        return r9;

     label04:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType ERROR>;

        return r9;

     label05:
        $r5 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        if $r5 != null goto label06;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Display type must be obtained from provider!");

        throw $r6;

     label06:
        $r5 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        r1 = $r5.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType type>;

        $r7 = <com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType ERROR>;

        if r1 != $r7 goto label07;

        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType ERROR>;

        return r9;

     label07:
        $r2 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$1: int[] $SwitchMap$com$fsck$k9$activity$compose$RecipientPresenter$CryptoMode>;

        $r8 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $i0 = virtualinvoke $r8.<com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label09;
            case 2: goto label12;
            case 3: goto label15;
            case 4: goto label21;
            default: goto label08;
        };

     label08:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("all CryptoModes must be handled!");

        throw $r4;

     label09:
        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean canEncrypt()>();

        if $z0 == 0 goto label11;

        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean isConfirmed()>();

        if $z0 == 0 goto label10;

        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType CHOICE_ENABLED_TRUSTED>;

        return r9;

     label10:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType CHOICE_ENABLED_UNTRUSTED>;

        return r9;

     label11:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType CHOICE_ENABLED_ERROR>;

        return r9;

     label12:
        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean canEncrypt()>();

        if $z0 == 0 goto label14;

        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean isConfirmed()>();

        if $z0 == 0 goto label13;

        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType CHOICE_DISABLED_TRUSTED>;

        return r9;

     label13:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType CHOICE_DISABLED_UNTRUSTED>;

        return r9;

     label14:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType CHOICE_DISABLED_UNAVAILABLE>;

        return r9;

     label15:
        $r7 = <com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType NO_RECIPIENTS>;

        if r1 != $r7 goto label16;

        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType NO_CHOICE_EMPTY>;

        return r9;

     label16:
        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean canEncryptAndIsMutual()>();

        if $z0 == 0 goto label18;

        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean isConfirmed()>();

        if $z0 == 0 goto label17;

        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType NO_CHOICE_MUTUAL_TRUSTED>;

        return r9;

     label17:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType NO_CHOICE_MUTUAL>;

        return r9;

     label18:
        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean canEncrypt()>();

        if $z0 == 0 goto label20;

        $z0 = virtualinvoke r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType: boolean isConfirmed()>();

        if $z0 == 0 goto label19;

        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType NO_CHOICE_AVAILABLE_TRUSTED>;

        return r9;

     label19:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType NO_CHOICE_AVAILABLE>;

        return r9;

     label20:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType NO_CHOICE_UNAVAILABLE>;

        return r9;

     label21:
        r9 = <com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType: com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType SIGN_ONLY>;

        return r9;
    }
    public java.lang.Long getOpenPgpKeyId()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        java.lang.Long r1;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long openPgpKeyId>;

        return r1;
    }
    public java.lang.String[] getRecipientAddresses()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        java.lang.String[] r1;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses>;

        return r1;
    }
    public com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState getSendErrorStateOrNull()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        java.lang.Long $r3;
        boolean $z0;
        com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState r4;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState OK>;

        if $r2 == $r1 goto label1;

        r4 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState PROVIDER_ERROR>;

        return r4;

     label1:
        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long openPgpKeyId>;

        if $r3 != null goto label3;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isEncryptionEnabled()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isSignOnly()>();

        if $z0 == 0 goto label3;

     label2:
        r4 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState KEY_CONFIG_ERROR>;

        return r4;

     label3:
        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isEncryptionEnabled()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean allRecipientsCanEncrypt()>();

        if $z0 != 0 goto label4;

        r4 = <com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState: com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState ENABLED_ERROR>;

        return r4;

     label4:
        return null;
    }
    boolean hasAutocryptPendingIntent()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean $z0;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus $r1;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus>;

        $z0 = virtualinvoke $r1.<com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus: boolean hasPendingIntent()>();

        return $z0;
    }
    public boolean hasRecipients()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        java.lang.String[] $r1;
        int $i0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isEncryptionEnabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean $z0, z1;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r3, $r4;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r2 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState UNCONFIGURED>;

        if $r1 != $r2 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r4 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode CHOICE_ENABLED>;

        if $r3 != $r4 goto label5;

        z1 = 1;

     label2:
        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r4 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode CHOICE_DISABLED>;

        if $r3 == $r4 goto label6;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean canEncryptAndIsMutual()>();

        if $z0 == 0 goto label6;

        $z0 = 1;

     label3:
        if z1 != 0 goto label4;

        if $z0 == 0 goto label7;

     label4:
        return 1;

     label5:
        z1 = 0;

        goto label2;

     label6:
        $z0 = 0;

        goto label3;

     label7:
        return 0;
    }
    public boolean isPgpInlineModeEnabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        boolean z0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline>;

        return z0;
    }
    public boolean isProviderStateOk()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState OK>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean isSignOnly()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode SIGN_ONLY>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isSigningEnabled()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r1, $r2;
        boolean $z0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode SIGN_ONLY>;

        if $r2 == $r1 goto label1;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean isEncryptionEnabled()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean shouldUsePgpMessageBuilder()
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r1, $r2;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r2 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        $r1 = <com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState UNCONFIGURED>;

        if $r2 == $r1 goto label1;

        return 1;

     label1:
        return 0;
    }
    com.fsck.k9.activity.compose.ComposeCryptoStatus withRecipientAutocryptStatus(com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus)
    {
        com.fsck.k9.activity.compose.ComposeCryptoStatus r0, r2;
        com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus $r1;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState $r3;
        com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode $r4;
        java.lang.String[] $r5;
        java.lang.Long $r6;
        boolean $z0;

        r0 := @this: com.fsck.k9.activity.compose.ComposeCryptoStatus;

        $r1 := @parameter0: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus;

        r2 = new com.fsck.k9.activity.compose.ComposeCryptoStatus;

        specialinvoke r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: void <init>()>();

        $r3 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState>;

        r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState cryptoProviderState> = $r3;

        $r4 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode>;

        r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode cryptoMode> = $r4;

        $r5 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses>;

        r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.String[] recipientAddresses> = $r5;

        $r6 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long openPgpKeyId>;

        r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: java.lang.Long openPgpKeyId> = $r6;

        $z0 = r0.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline>;

        r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: boolean enablePgpInline> = $z0;

        r2.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus recipientAutocryptStatus> = $r1;

        return r2;
    }
