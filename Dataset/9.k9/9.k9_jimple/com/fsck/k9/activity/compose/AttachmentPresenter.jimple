com.fsck.k9.activity.compose.AttachmentPresenter extends java.lang.Object
private static final java.lang.String LOADER_ARG_ATTACHMENT
private static final int LOADER_ID_MASK
private static final int MAX_TOTAL_LOADERS
private static final int REQUEST_CODE_ATTACHMENT_URI
private static final java.lang.String STATE_KEY_ATTACHMENTS
private static final java.lang.String STATE_KEY_NEXT_LOADER_ID
private static final java.lang.String STATE_KEY_WAITING_FOR_ATTACHMENTS
private com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting
private final com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView
private java.util.LinkedHashMap attachments
private final android.content.Context context
private final com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener listener
private final android.app.LoaderManager loaderManager
private android.app.LoaderManager$LoaderCallbacks mAttachmentContentLoaderCallback
private android.app.LoaderManager$LoaderCallbacks mAttachmentInfoLoaderCallback
private int nextLoaderId
    public void <init>(android.content.Context, com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView, android.app.LoaderManager, com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.content.Context $r1;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r2;
        android.app.LoaderManager $r3;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener $r4;
        com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction $r5;
        com.fsck.k9.activity.compose.AttachmentPresenter$1 $r6;
        com.fsck.k9.activity.compose.AttachmentPresenter$2 $r7;
        java.util.LinkedHashMap $r8;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView;

        $r3 := @parameter2: android.app.LoaderManager;

        $r4 := @parameter3: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int nextLoaderId> = 0;

        $r5 = <com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction NONE>;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting> = $r5;

        $r6 = new com.fsck.k9.activity.compose.AttachmentPresenter$1;

        specialinvoke $r6.<com.fsck.k9.activity.compose.AttachmentPresenter$1: void <init>(com.fsck.k9.activity.compose.AttachmentPresenter)>(r0);

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager$LoaderCallbacks mAttachmentInfoLoaderCallback> = $r6;

        $r7 = new com.fsck.k9.activity.compose.AttachmentPresenter$2;

        specialinvoke $r7.<com.fsck.k9.activity.compose.AttachmentPresenter$2: void <init>(com.fsck.k9.activity.compose.AttachmentPresenter)>(r0);

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager$LoaderCallbacks mAttachmentContentLoaderCallback> = $r7;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.content.Context context> = $r1;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView> = $r2;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager loaderManager> = $r3;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener listener> = $r4;

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments> = $r8;

        return;
    }
    static android.content.Context access$000(com.fsck.k9.activity.compose.AttachmentPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;
        android.content.Context r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        r1 = $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.content.Context context>;

        return r1;
    }
    static java.util.LinkedHashMap access$100(com.fsck.k9.activity.compose.AttachmentPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;
        java.util.LinkedHashMap r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        r1 = $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        return r1;
    }
    static android.app.LoaderManager access$200(com.fsck.k9.activity.compose.AttachmentPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;
        android.app.LoaderManager r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        r1 = $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager loaderManager>;

        return r1;
    }
    static com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView access$300(com.fsck.k9.activity.compose.AttachmentPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        r1 = $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        return r1;
    }
    static void access$400(com.fsck.k9.activity.compose.AttachmentPresenter, com.fsck.k9.activity.misc.Attachment)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;
        com.fsck.k9.activity.misc.Attachment $r1;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter1: com.fsck.k9.activity.misc.Attachment;

        specialinvoke $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void initAttachmentContentLoader(com.fsck.k9.activity.misc.Attachment)>($r1);

        return;
    }
    static void access$500(com.fsck.k9.activity.compose.AttachmentPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        specialinvoke $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void postPerformStalledAction()>();

        return;
    }
    static void access$600(com.fsck.k9.activity.compose.AttachmentPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter $r0;

        $r0 := @parameter0: com.fsck.k9.activity.compose.AttachmentPresenter;

        specialinvoke $r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void performStalledAction()>();

        return;
    }
    private void addAttachment(android.net.Uri)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.net.Uri $r1;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.net.Uri;

        virtualinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachment(android.net.Uri,java.lang.String)>($r1, null);

        return;
    }
    private void addAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.mailstore.AttachmentViewInfo $r1;
        long $l0;
        java.util.LinkedHashMap $r2;
        android.net.Uri $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        int $i1;
        java.lang.String $r5, $r7;
        com.fsck.k9.activity.misc.Attachment $r6;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.mailstore.AttachmentViewInfo;

        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $r3 = $r1.<com.fsck.k9.mailstore.AttachmentViewInfo: android.net.Uri internalUri>;

        $z0 = virtualinvoke $r2.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Received the same attachmentViewInfo twice!");

        throw $r4;

     label1:
        $i1 = specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int getNextFreeLoaderId()>();

        $r3 = $r1.<com.fsck.k9.mailstore.AttachmentViewInfo: android.net.Uri internalUri>;

        $r5 = $r1.<com.fsck.k9.mailstore.AttachmentViewInfo: java.lang.String mimeType>;

        $r6 = staticinvoke <com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment createAttachment(android.net.Uri,int,java.lang.String)>($r3, $i1, $r5);

        $r5 = $r1.<com.fsck.k9.mailstore.AttachmentViewInfo: java.lang.String mimeType>;

        $r7 = $r1.<com.fsck.k9.mailstore.AttachmentViewInfo: java.lang.String displayName>;

        $l0 = $r1.<com.fsck.k9.mailstore.AttachmentViewInfo: long size>;

        $r6 = virtualinvoke $r6.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment deriveWithMetadataLoaded(java.lang.String,java.lang.String,long)>($r5, $r7, $l0);

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachmentAndStartLoader(com.fsck.k9.activity.misc.Attachment)>($r6);

        return;
    }
    private void addAttachmentAndStartLoader(com.fsck.k9.activity.misc.Attachment)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.activity.misc.Attachment $r1;
        java.util.LinkedHashMap $r2;
        android.net.Uri $r3;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener $r4;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r5;
        com.fsck.k9.activity.misc.Attachment$LoadingState $r6, $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.activity.misc.Attachment;

        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $r3 = $r1.<com.fsck.k9.activity.misc.Attachment: android.net.Uri uri>;

        virtualinvoke $r2.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        $r4 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener listener>;

        interfaceinvoke $r4.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener: void onAttachmentAdded()>();

        $r5 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r5.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void addAttachmentView(com.fsck.k9.activity.misc.Attachment)>($r1);

        $r6 = $r1.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment$LoadingState state>;

        $r7 = <com.fsck.k9.activity.misc.Attachment$LoadingState: com.fsck.k9.activity.misc.Attachment$LoadingState URI_ONLY>;

        if $r6 != $r7 goto label1;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void initAttachmentInfoLoader(com.fsck.k9.activity.misc.Attachment)>($r1);

        return;

     label1:
        $r6 = $r1.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment$LoadingState state>;

        $r7 = <com.fsck.k9.activity.misc.Attachment$LoadingState: com.fsck.k9.activity.misc.Attachment$LoadingState METADATA>;

        if $r6 != $r7 goto label2;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void initAttachmentContentLoader(com.fsck.k9.activity.misc.Attachment)>($r1);

        return;

     label2:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attachment can only be added in URI_ONLY or METADATA state!");

        throw $r8;
    }
    private void addAttachmentsFromResultIntent(android.content.Intent)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.content.Intent $r1;
        int $i0, $i1;
        android.content.ClipData $r2;
        android.content.ClipData$Item $r3;
        android.net.Uri $r4;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.content.Intent;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label3;

        $r2 = virtualinvoke $r1.<android.content.Intent: android.content.ClipData getClipData()>();

        if $r2 == null goto label3;

        $i0 = 0;

        $i1 = virtualinvoke $r2.<android.content.ClipData: int getItemCount()>();

     label1:
        if $i0 >= $i1 goto label4;

        $r3 = virtualinvoke $r2.<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>($i0);

        $r4 = virtualinvoke $r3.<android.content.ClipData$Item: android.net.Uri getUri()>();

        if $r4 == null goto label2;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachment(android.net.Uri)>($r4);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke $r1.<android.content.Intent: android.net.Uri getData()>();

        if $r4 == null goto label4;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachment(android.net.Uri)>($r4);

     label4:
        return;
    }
    private int getNextFreeLoaderId()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        int $i0, $i1;
        java.lang.AssertionError $r1;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $i0 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int nextLoaderId>;

        if $i0 < 63 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("more than 63 attachments? hum.");

        throw $r1;

     label1:
        $i0 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int nextLoaderId>;

        $i1 = $i0 + 1;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int nextLoaderId> = $i1;

        $i0 = $i0 | 64;

        return $i0;
    }
    private boolean hasLoadingAttachments()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        int $i0;
        java.util.LinkedHashMap $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.fsck.k9.activity.misc.Attachment r5;
        android.app.LoaderManager $r6;
        android.content.Loader $r7;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $r2 = virtualinvoke $r1.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.fsck.k9.activity.misc.Attachment) $r4;

        $r6 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager loaderManager>;

        $i0 = r5.<com.fsck.k9.activity.misc.Attachment: int loaderId>;

        $r7 = virtualinvoke $r6.<android.app.LoaderManager: android.content.Loader getLoader(int)>($i0);

        if $r7 == null goto label1;

        $z0 = virtualinvoke $r7.<android.content.Loader: boolean isStarted()>();

        if $z0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
    private void initAttachmentContentLoader(com.fsck.k9.activity.misc.Attachment)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.activity.misc.Attachment $r1;
        android.os.Bundle r2;
        android.app.LoaderManager$LoaderCallbacks $r3;
        com.fsck.k9.activity.misc.Attachment$LoadingState $r4, $r5;
        java.lang.IllegalStateException $r6;
        android.net.Uri $r7;
        android.app.LoaderManager $r8;
        int $i0;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.activity.misc.Attachment;

        $r4 = $r1.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment$LoadingState state>;

        $r5 = <com.fsck.k9.activity.misc.Attachment$LoadingState: com.fsck.k9.activity.misc.Attachment$LoadingState METADATA>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("initAttachmentContentLoader can only be called for METADATA state!");

        throw $r6;

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        $r7 = $r1.<com.fsck.k9.activity.misc.Attachment: android.net.Uri uri>;

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("attachment", $r7);

        $r8 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager loaderManager>;

        $i0 = $r1.<com.fsck.k9.activity.misc.Attachment: int loaderId>;

        $r3 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager$LoaderCallbacks mAttachmentContentLoaderCallback>;

        virtualinvoke $r8.<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>($i0, r2, $r3);

        return;
    }
    private void initAttachmentInfoLoader(com.fsck.k9.activity.misc.Attachment)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.activity.misc.Attachment $r1;
        android.os.Bundle r2;
        android.app.LoaderManager$LoaderCallbacks $r3;
        com.fsck.k9.activity.misc.Attachment$LoadingState $r4, $r5;
        java.lang.IllegalStateException $r6;
        android.net.Uri $r7;
        android.app.LoaderManager $r8;
        int $i0;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.activity.misc.Attachment;

        $r4 = $r1.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment$LoadingState state>;

        $r5 = <com.fsck.k9.activity.misc.Attachment$LoadingState: com.fsck.k9.activity.misc.Attachment$LoadingState URI_ONLY>;

        if $r4 == $r5 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("initAttachmentInfoLoader can only be called for URI_ONLY state!");

        throw $r6;

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        $r7 = $r1.<com.fsck.k9.activity.misc.Attachment: android.net.Uri uri>;

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("attachment", $r7);

        $r8 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager loaderManager>;

        $i0 = $r1.<com.fsck.k9.activity.misc.Attachment: int loaderId>;

        $r3 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager$LoaderCallbacks mAttachmentInfoLoaderCallback>;

        virtualinvoke $r8.<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>($i0, r2, $r3);

        return;
    }
    private void performStalledAction()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction r1, $r3;
        int $i0;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r2;
        int[] $r4;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void dismissWaitingForAttachmentDialog()>();

        r1 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting>;

        $r3 = <com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction NONE>;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting> = $r3;

        $r4 = <com.fsck.k9.activity.compose.AttachmentPresenter$4: int[] $SwitchMap$com$fsck$k9$activity$compose$AttachmentPresenter$WaitingAction>;

        $i0 = virtualinvoke r1.<com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void performSendAfterChecks()>();

        return;

     label3:
        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void performSaveAfterChecks()>();

        return;
    }
    private void postPerformStalledAction()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.os.Handler $r1;
        com.fsck.k9.activity.compose.AttachmentPresenter$3 $r2;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<android.os.Handler: void <init>()>();

        $r2 = new com.fsck.k9.activity.compose.AttachmentPresenter$3;

        specialinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$3: void <init>(com.fsck.k9.activity.compose.AttachmentPresenter)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }
    public void addAttachment(android.net.Uri, java.lang.String)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.net.Uri $r1;
        java.lang.String $r2;
        java.util.LinkedHashMap $r3;
        boolean $z0;
        int $i0;
        com.fsck.k9.activity.misc.Attachment $r4;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $z0 = virtualinvoke $r3.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int getNextFreeLoaderId()>();

        $r4 = staticinvoke <com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment createAttachment(android.net.Uri,int,java.lang.String)>($r1, $i0, $r2);

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachmentAndStartLoader(com.fsck.k9.activity.misc.Attachment)>($r4);

        return;
    }
    public void attachmentProgressDialogCancelled()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction $r1;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 = <com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction NONE>;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting> = $r1;

        return;
    }
    public boolean checkOkForSendingOrDraftSaving()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        boolean $z0;
        com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction $r1, $r2;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r3;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting>;

        $r2 = <com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction NONE>;

        if $r1 == $r2 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: boolean hasLoadingAttachments()>();

        if $z0 == 0 goto label2;

        $r1 = <com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction SEND>;

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting> = $r1;

        $r3 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        $r1 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting>;

        interfaceinvoke $r3.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void showWaitingForAttachmentDialog(com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction)>($r1);

        return 1;

     label2:
        return 0;
    }
    public java.util.ArrayList createAttachmentList()
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        java.util.ArrayList r1;
        java.util.LinkedHashMap $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.fsck.k9.activity.misc.Attachment r6;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.fsck.k9.activity.misc.Attachment) $r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label1;

     label2:
        return r1;
    }
    public boolean loadNonInlineAttachments(com.fsck.k9.mailstore.MessageViewInfo)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.mailstore.MessageViewInfo $r1;
        boolean z0, $z1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        com.fsck.k9.mailstore.AttachmentViewInfo r5;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.mailstore.MessageViewInfo;

        z0 = 1;

        $r2 = $r1.<com.fsck.k9.mailstore.MessageViewInfo: java.util.List attachments>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.fsck.k9.mailstore.AttachmentViewInfo) $r4;

        $z1 = r5.<com.fsck.k9.mailstore.AttachmentViewInfo: boolean inlineAttachment>;

        if $z1 != 0 goto label1;

        $z1 = virtualinvoke r5.<com.fsck.k9.mailstore.AttachmentViewInfo: boolean isContentAvailable()>();

        if $z1 != 0 goto label2;

        z0 = 0;

        goto label1;

     label2:
        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)>(r5);

        goto label1;

     label3:
        return z0;
    }
    public void onActivityResult(int, int, android.content.Intent)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        int $i0, $i1;
        android.content.Intent $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.content.Intent;

        if $i1 == 1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("onActivityResult must only be called for our request code");

        throw $r2;

     label1:
        if $i0 == -1 goto label2;

        return;

     label2:
        if $r1 == null goto label3;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void addAttachmentsFromResultIntent(android.content.Intent)>($r1);

     label3:
        return;
    }
    public void onClickAddAttachment(com.fsck.k9.activity.compose.RecipientPresenter)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.activity.compose.RecipientPresenter $r1;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r2;
        com.fsck.k9.activity.compose.ComposeCryptoStatus $r3;
        com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState $r4;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.activity.compose.RecipientPresenter;

        $r3 = virtualinvoke $r1.<com.fsck.k9.activity.compose.RecipientPresenter: com.fsck.k9.activity.compose.ComposeCryptoStatus getCurrentCachedCryptoStatus()>();

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke $r3.<com.fsck.k9.activity.compose.ComposeCryptoStatus: com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState getAttachErrorStateOrNull()>();

        if $r4 == null goto label2;

        virtualinvoke $r1.<com.fsck.k9.activity.compose.RecipientPresenter: void showPgpAttachError(com.fsck.k9.activity.compose.ComposeCryptoStatus$AttachErrorState)>($r4);

        return;

     label2:
        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void showPickAttachmentDialog(int)>(1);

        return;
    }
    public void onClickRemoveAttachment(android.net.Uri)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.net.Uri $r1;
        int $i0;
        java.lang.Object $r2;
        java.util.LinkedHashMap $r3;
        com.fsck.k9.activity.misc.Attachment r4;
        android.app.LoaderManager $r5;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r6;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener $r7;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.net.Uri;

        $r3 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $r2 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (com.fsck.k9.activity.misc.Attachment) $r2;

        $r5 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: android.app.LoaderManager loaderManager>;

        $i0 = r4.<com.fsck.k9.activity.misc.Attachment: int loaderId>;

        virtualinvoke $r5.<android.app.LoaderManager: void destroyLoader(int)>($i0);

        $r6 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r6.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void removeAttachmentView(com.fsck.k9.activity.misc.Attachment)>(r4);

        $r3 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r7 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener listener>;

        interfaceinvoke $r7.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener: void onAttachmentRemoved()>();

        return;
    }
    public void onRestoreInstanceState(android.os.Bundle)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.os.Bundle $r1;
        java.lang.String $r2;
        com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction $r3;
        int $i0;
        java.util.ArrayList $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        com.fsck.k9.activity.misc.Attachment r7;
        java.util.LinkedHashMap $r8;
        android.net.Uri $r9;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r10;
        com.fsck.k9.activity.misc.Attachment$LoadingState $r11, $r12;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("waitingForAttachments");

        $r3 = staticinvoke <com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction valueOf(java.lang.String)>($r2);

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting> = $r3;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("nextLoaderId");

        r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int nextLoaderId> = $i0;

        $r4 = virtualinvoke $r1.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("com.fsck.k9.activity.MessageCompose.attachments");

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.fsck.k9.activity.misc.Attachment) $r6;

        $r8 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.LinkedHashMap attachments>;

        $r9 = r7.<com.fsck.k9.activity.misc.Attachment: android.net.Uri uri>;

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r7);

        $r10 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r10.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void addAttachmentView(com.fsck.k9.activity.misc.Attachment)>(r7);

        $r11 = r7.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment$LoadingState state>;

        $r12 = <com.fsck.k9.activity.misc.Attachment$LoadingState: com.fsck.k9.activity.misc.Attachment$LoadingState URI_ONLY>;

        if $r11 != $r12 goto label2;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void initAttachmentInfoLoader(com.fsck.k9.activity.misc.Attachment)>(r7);

        goto label1;

     label2:
        $r11 = r7.<com.fsck.k9.activity.misc.Attachment: com.fsck.k9.activity.misc.Attachment$LoadingState state>;

        $r12 = <com.fsck.k9.activity.misc.Attachment$LoadingState: com.fsck.k9.activity.misc.Attachment$LoadingState METADATA>;

        if $r11 != $r12 goto label1;

        specialinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: void initAttachmentContentLoader(com.fsck.k9.activity.misc.Attachment)>(r7);

        goto label1;

     label3:
        return;
    }
    public void onSaveInstanceState(android.os.Bundle)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        android.os.Bundle $r1;
        com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction $r2;
        java.lang.String $r3;
        java.util.ArrayList $r4;
        int $i0;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction actionToPerformAfterWaiting>;

        $r3 = virtualinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction: java.lang.String name()>();

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("waitingForAttachments", $r3);

        $r4 = virtualinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: java.util.ArrayList createAttachmentList()>();

        virtualinvoke $r1.<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>("com.fsck.k9.activity.MessageCompose.attachments", $r4);

        $i0 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: int nextLoaderId>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("nextLoaderId", $i0);

        return;
    }
    public void processMessageToForward(com.fsck.k9.mailstore.MessageViewInfo)
    {
        com.fsck.k9.activity.compose.AttachmentPresenter r0;
        com.fsck.k9.mailstore.MessageViewInfo $r1;
        boolean $z0;
        com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView $r2;

        r0 := @this: com.fsck.k9.activity.compose.AttachmentPresenter;

        $r1 := @parameter0: com.fsck.k9.mailstore.MessageViewInfo;

        $z0 = virtualinvoke r0.<com.fsck.k9.activity.compose.AttachmentPresenter: boolean loadNonInlineAttachments(com.fsck.k9.mailstore.MessageViewInfo)>($r1);

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label3;

        $r2 = r0.<com.fsck.k9.activity.compose.AttachmentPresenter: com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView attachmentMvpView>;

        interfaceinvoke $r2.<com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView: void showMissingAttachmentsPartialMessageWarning()>();

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }
