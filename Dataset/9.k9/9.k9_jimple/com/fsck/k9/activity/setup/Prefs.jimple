com.fsck.k9.activity.setup.Prefs extends com.fsck.k9.activity.K9PreferenceActivity
private static final int ACTIVITY_CHOOSE_FOLDER
private static final java.lang.String APG_PROVIDER_PLACEHOLDER
private static final int DIALOG_APG_DEPRECATION_WARNING
private static final java.lang.CharSequence[] EMPTY_CHAR_SEQUENCE_ARRAY
private static final java.lang.String PREFERENCE_ANIMATIONS
private static final java.lang.String PREFERENCE_ATTACHMENT_DEF_PATH
private static final java.lang.String PREFERENCE_AUTOFIT_WIDTH
private static final java.lang.String PREFERENCE_BACKGROUND_AS_UNREAD_INDICATOR
private static final java.lang.String PREFERENCE_BACKGROUND_OPS
private static final java.lang.String PREFERENCE_COMPOSER_THEME
private static final java.lang.String PREFERENCE_CONFIRM_ACTIONS
private static final java.lang.String PREFERENCE_COUNT_SEARCH
private static final java.lang.String PREFERENCE_DEBUG_LOGGING
private static final java.lang.String PREFERENCE_DISABLE_NOTIFICATION_DURING_QUIET_TIME
private static final java.lang.String PREFERENCE_FIXED_MESSAGE_THEME
private static final java.lang.String PREFERENCE_FOLDERLIST_WRAP_NAME
private static final java.lang.String PREFERENCE_FONT_SIZE
private static final java.lang.String PREFERENCE_GESTURES
private static final java.lang.String PREFERENCE_HIDE_SPECIAL_ACCOUNTS
private static final java.lang.String PREFERENCE_HIDE_TIMEZONE
private static final java.lang.String PREFERENCE_HIDE_USERAGENT
private static final java.lang.String PREFERENCE_LANGUAGE
private static final java.lang.String PREFERENCE_LOCK_SCREEN_NOTIFICATION_VISIBILITY
private static final java.lang.String PREFERENCE_MEASURE_ACCOUNTS
private static final java.lang.String PREFERENCE_MESSAGELIST_CHECKBOXES
private static final java.lang.String PREFERENCE_MESSAGELIST_COLORIZE_MISSING_CONTACT_PICTURES
private static final java.lang.String PREFERENCE_MESSAGELIST_CONTACT_NAME_COLOR
private static final java.lang.String PREFERENCE_MESSAGELIST_PREVIEW_LINES
private static final java.lang.String PREFERENCE_MESSAGELIST_SENDER_ABOVE_SUBJECT
private static final java.lang.String PREFERENCE_MESSAGELIST_SHOW_CONTACT_NAME
private static final java.lang.String PREFERENCE_MESSAGELIST_SHOW_CONTACT_PICTURE
private static final java.lang.String PREFERENCE_MESSAGELIST_SHOW_CORRESPONDENT_NAMES
private static final java.lang.String PREFERENCE_MESSAGELIST_STARS
private static final java.lang.String PREFERENCE_MESSAGEVIEW_FIXEDWIDTH
private static final java.lang.String PREFERENCE_MESSAGEVIEW_RETURN_TO_LIST
private static final java.lang.String PREFERENCE_MESSAGEVIEW_SHOW_NEXT
private static final java.lang.String PREFERENCE_MESSAGEVIEW_VISIBLE_REFILE_ACTIONS
private static final java.lang.String PREFERENCE_MESSAGE_VIEW_THEME
private static final java.lang.String PREFERENCE_NOTIFICATION_HIDE_SUBJECT
private static final java.lang.String PREFERENCE_NOTIF_QUICK_DELETE
private static final java.lang.String PREFERENCE_OPENPGP_PROVIDER
private static final java.lang.String PREFERENCE_OPENPGP_SUPPORT_SIGN_ONLY
private static final java.lang.String PREFERENCE_QUIET_TIME_ENABLED
private static final java.lang.String PREFERENCE_QUIET_TIME_ENDS
private static final java.lang.String PREFERENCE_QUIET_TIME_STARTS
private static final java.lang.String PREFERENCE_SENSITIVE_LOGGING
private static final java.lang.String PREFERENCE_SPLITVIEW_MODE
private static final java.lang.String PREFERENCE_START_INTEGRATED_INBOX
private static final java.lang.String PREFERENCE_THEME
private static final java.lang.String PREFERENCE_THREADED_VIEW
private static final java.lang.String PREFERENCE_VOLUME_NAVIGATION
private static final int VISIBLE_REFILE_ACTIONS_ARCHIVE
private static final int VISIBLE_REFILE_ACTIONS_COPY
private static final int VISIBLE_REFILE_ACTIONS_DELETE
private static final int VISIBLE_REFILE_ACTIONS_MOVE
private static final int VISIBLE_REFILE_ACTIONS_SPAM
private android.preference.CheckBoxPreference mAnimations
private android.preference.Preference mAttachmentPathPreference
private android.preference.CheckBoxPreference mAutofitWidth
private android.preference.CheckBoxPreference mBackgroundAsUnreadIndicator
private android.preference.ListPreference mBackgroundOps
private android.preference.CheckBoxPreference mChangeContactNameColor
private android.preference.CheckBoxPreference mCheckboxes
private android.preference.CheckBoxPreference mColorizeMissingContactPictures
private android.preference.ListPreference mComposerTheme
private com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions
private android.preference.CheckBoxPreference mCountSearch
private android.preference.CheckBoxPreference mDebugLogging
private android.preference.CheckBoxPreference mDisableNotificationDuringQuietTime
private android.preference.CheckBoxPreference mFixedMessageTheme
private android.preference.CheckBoxPreference mFixedWidth
private android.preference.CheckBoxPreference mGestures
private android.preference.CheckBoxPreference mHideSpecialAccounts
private android.preference.CheckBoxPreference mHideTimeZone
private android.preference.CheckBoxPreference mHideUserAgent
private android.preference.ListPreference mLanguage
private android.preference.ListPreference mLockScreenNotificationVisibility
private android.preference.CheckBoxPreference mMeasureAccounts
private android.preference.ListPreference mMessageTheme
private android.preference.ListPreference mNotificationHideSubject
private android.preference.ListPreference mNotificationQuickDelete
private org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider
private android.preference.CheckBoxPreference mOpenPgpSupportSignOnly
private android.preference.ListPreference mPreviewLines
private android.preference.CheckBoxPreference mQuietTimeEnabled
private com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds
private com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts
private android.preference.CheckBoxPreference mReturnToList
private android.preference.CheckBoxPreference mSenderAboveSubject
private android.preference.CheckBoxPreference mSensitiveLogging
private android.preference.CheckBoxPreference mShowContactName
private android.preference.CheckBoxPreference mShowContactPicture
private android.preference.CheckBoxPreference mShowCorrespondentNames
private android.preference.CheckBoxPreference mShowNext
private android.preference.ListPreference mSplitViewMode
private android.preference.CheckBoxPreference mStars
private android.preference.CheckBoxPreference mStartIntegratedInbox
private android.preference.ListPreference mTheme
private android.preference.CheckBoxPreference mThreadedView
private com.fsck.k9.preferences.CheckBoxListPreference mVisibleRefileActions
private com.fsck.k9.preferences.CheckBoxListPreference mVolumeNavigation
private android.preference.CheckBoxPreference mWrapFolderNames
    static void <clinit>()
    {
        java.lang.CharSequence[] $r0;

        $r0 = newarray (java.lang.CharSequence)[0];

        <com.fsck.k9.activity.setup.Prefs: java.lang.CharSequence[] EMPTY_CHAR_SEQUENCE_ARRAY> = $r0;

        return;
    }
    public void <init>()
    {
        com.fsck.k9.activity.setup.Prefs r0;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        specialinvoke r0.<com.fsck.k9.activity.K9PreferenceActivity: void <init>()>();

        return;
    }
    static void access$000(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        specialinvoke $r0.<com.fsck.k9.activity.setup.Prefs: void onFontSizeSettings()>();

        return;
    }
    static void access$100(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        specialinvoke $r0.<com.fsck.k9.activity.setup.Prefs: void onChooseContactNameColor()>();

        return;
    }
    static android.preference.CheckBoxPreference access$200(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;
        android.preference.CheckBoxPreference r1;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        r1 = $r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor>;

        return r1;
    }
    static com.fsck.k9.preferences.TimePickerPreference access$300(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;
        com.fsck.k9.preferences.TimePickerPreference r1;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        r1 = $r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts>;

        return r1;
    }
    static com.fsck.k9.preferences.TimePickerPreference access$400(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;
        com.fsck.k9.preferences.TimePickerPreference r1;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        r1 = $r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds>;

        return r1;
    }
    static org.openintents.openpgp.util.OpenPgpAppPreference access$500(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;
        org.openintents.openpgp.util.OpenPgpAppPreference r1;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        r1 = $r0.<com.fsck.k9.activity.setup.Prefs: org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider>;

        return r1;
    }
    static android.preference.Preference access$600(com.fsck.k9.activity.setup.Prefs)
    {
        com.fsck.k9.activity.setup.Prefs $r0;
        android.preference.Preference r1;

        $r0 := @parameter0: com.fsck.k9.activity.setup.Prefs;

        r1 = $r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference mAttachmentPathPreference>;

        return r1;
    }
    public static void actionPrefs(android.content.Context)
    {
        android.content.Context $r0;
        android.content.Intent r1;

        $r0 := @parameter0: android.content.Context;

        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r0, class "Lcom/fsck/k9/activity/setup/Prefs;");

        virtualinvoke $r0.<android.content.Context: void startActivity(android.content.Intent)>(r1);

        return;
    }
    private void onChooseContactNameColor()
    {
        com.fsck.k9.activity.setup.Prefs r0;
        com.fsck.k9.activity.ColorPickerDialog $r1;
        com.fsck.k9.activity.setup.Prefs$7 $r2;
        int $i0;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        $r1 = new com.fsck.k9.activity.ColorPickerDialog;

        $r2 = new com.fsck.k9.activity.setup.Prefs$7;

        specialinvoke $r2.<com.fsck.k9.activity.setup.Prefs$7: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        $i0 = staticinvoke <com.fsck.k9.K9: int getContactNameColor()>();

        specialinvoke $r1.<com.fsck.k9.activity.ColorPickerDialog: void <init>(android.content.Context,com.fsck.k9.activity.ColorPickerDialog$OnColorChangedListener,int)>(r0, $r2, $i0);

        virtualinvoke $r1.<com.fsck.k9.activity.ColorPickerDialog: void show()>();

        return;
    }
    private void onFontSizeSettings()
    {
        com.fsck.k9.activity.setup.Prefs r0;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        staticinvoke <com.fsck.k9.activity.setup.FontSizeSettings: void actionEditSettings(android.content.Context)>(r0);

        return;
    }
    private void saveSettings()
    {
        com.fsck.k9.activity.setup.Prefs r0;
        boolean $z0, $z1;
        com.fsck.k9.Preferences $r1;
        com.fsck.k9.preferences.Storage $r2;
        android.preference.ListPreference $r3;
        java.lang.String $r4;
        com.fsck.k9.K9$Theme $r5;
        android.preference.CheckBoxPreference $r6;
        com.fsck.k9.preferences.CheckBoxListPreference $r7;
        boolean[] $r8;
        com.fsck.k9.K9$NotificationHideSubject $r9;
        int i0, i1;
        com.fsck.k9.preferences.TimePickerPreference $r10;
        com.fsck.k9.K9$NotificationQuickDelete $r11;
        com.fsck.k9.K9$LockScreenNotificationVisibility $r12;
        com.fsck.k9.K9$SplitViewMode $r13;
        android.preference.Preference $r14;
        java.lang.CharSequence $r15;
        android.widget.Toast $r16;
        org.openintents.openpgp.util.OpenPgpAppPreference $r17;
        com.fsck.k9.preferences.StorageEditor $r18;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        $z0 = 0;

        $r1 = staticinvoke <com.fsck.k9.Preferences: com.fsck.k9.Preferences getPreferences(android.content.Context)>(r0);

        $r2 = virtualinvoke $r1.<com.fsck.k9.Preferences: com.fsck.k9.preferences.Storage getStorage()>();

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLanguage>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        staticinvoke <com.fsck.k9.K9: void setK9Language(java.lang.String)>($r4);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mTheme>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r5 = staticinvoke <com.fsck.k9.activity.setup.Prefs: com.fsck.k9.K9$Theme themeNameToId(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setK9Theme(com.fsck.k9.K9$Theme)>($r5);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mFixedMessageTheme>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setUseFixedMessageViewTheme(boolean)>($z1);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mMessageTheme>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r5 = staticinvoke <com.fsck.k9.activity.setup.Prefs: com.fsck.k9.K9$Theme themeNameToId(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setK9MessageViewThemeSetting(com.fsck.k9.K9$Theme)>($r5);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mComposerTheme>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r5 = staticinvoke <com.fsck.k9.activity.setup.Prefs: com.fsck.k9.K9$Theme themeNameToId(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setK9ComposerThemeSetting(com.fsck.k9.K9$Theme)>($r5);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mAnimations>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setAnimations(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mGestures>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setGesturesEnabled(boolean)>($z1);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVolumeNavigation>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        $z1 = $r8[0];

        staticinvoke <com.fsck.k9.K9: void setUseVolumeKeysForNavigation(boolean)>($z1);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVolumeNavigation>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        $z1 = $r8[1];

        staticinvoke <com.fsck.k9.K9: void setUseVolumeKeysForListNavigation(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideSpecialAccounts>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        if $z1 != 0 goto label7;

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mStartIntegratedInbox>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        if $z1 == 0 goto label7;

        $z1 = 1;

     label1:
        staticinvoke <com.fsck.k9.K9: void setStartIntegratedInbox(boolean)>($z1);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationHideSubject>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r9 = staticinvoke <com.fsck.k9.K9$NotificationHideSubject: com.fsck.k9.K9$NotificationHideSubject valueOf(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setNotificationHideSubject(com.fsck.k9.K9$NotificationHideSubject)>($r9);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        $z1 = $r8[0];

        staticinvoke <com.fsck.k9.K9: void setConfirmDelete(boolean)>($z1);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        i1 = 1 + 1;

        $z1 = $r8[1];

        staticinvoke <com.fsck.k9.K9: void setConfirmDeleteStarred(boolean)>($z1);

        $z1 = staticinvoke <com.fsck.k9.notification.NotificationController: boolean platformSupportsExtendedNotifications()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        $z1 = $r8[i1];

        staticinvoke <com.fsck.k9.K9: void setConfirmDeleteFromNotification(boolean)>($z1);

        i1 = i1 + 1;

     label2:
        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        i0 = i1 + 1;

        $z1 = $r8[i1];

        staticinvoke <com.fsck.k9.K9: void setConfirmSpam(boolean)>($z1);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        i1 = i0 + 1;

        $z1 = $r8[i0];

        staticinvoke <com.fsck.k9.K9: void setConfirmDiscardMessage(boolean)>($z1);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        $z1 = $r8[i1];

        staticinvoke <com.fsck.k9.K9: void setConfirmMarkAllRead(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mMeasureAccounts>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMeasureAccounts(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mCountSearch>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setCountSearchMessages(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideSpecialAccounts>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setHideSpecialAccounts(boolean)>($z1);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mPreviewLines>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setMessageListPreviewLines(int)>(i1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mCheckboxes>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMessageListCheckboxes(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mStars>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMessageListStars(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowCorrespondentNames>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setShowCorrespondentNames(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mSenderAboveSubject>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMessageListSenderAboveSubject(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowContactName>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setShowContactName(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowContactPicture>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setShowContactPicture(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mColorizeMissingContactPictures>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setColorizeMissingContactPictures(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mBackgroundAsUnreadIndicator>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setUseBackgroundAsUnreadIndicator(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mThreadedView>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setThreadedViewEnabled(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setChangeContactNameColor(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mFixedWidth>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMessageViewFixedWidthFont(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mReturnToList>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMessageViewReturnToList(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowNext>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setMessageViewShowNext(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mAutofitWidth>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setAutofitWidth(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mQuietTimeEnabled>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setQuietTimeEnabled(boolean)>($z1);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVisibleRefileActions>;

        $r8 = virtualinvoke $r7.<com.fsck.k9.preferences.CheckBoxListPreference: boolean[] getCheckedItems()>();

        $z1 = $r8[0];

        staticinvoke <com.fsck.k9.K9: void setMessageViewDeleteActionVisible(boolean)>($z1);

        $z1 = $r8[1];

        staticinvoke <com.fsck.k9.K9: void setMessageViewArchiveActionVisible(boolean)>($z1);

        $z1 = $r8[2];

        staticinvoke <com.fsck.k9.K9: void setMessageViewMoveActionVisible(boolean)>($z1);

        $z1 = $r8[3];

        staticinvoke <com.fsck.k9.K9: void setMessageViewCopyActionVisible(boolean)>($z1);

        $z1 = $r8[4];

        staticinvoke <com.fsck.k9.K9: void setMessageViewSpamActionVisible(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDisableNotificationDuringQuietTime>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        if $z1 != 0 goto label3;

        $z0 = 1;

     label3:
        staticinvoke <com.fsck.k9.K9: void setNotificationDuringQuietTimeEnabled(boolean)>($z0);

        $r10 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts>;

        $r4 = virtualinvoke $r10.<com.fsck.k9.preferences.TimePickerPreference: java.lang.String getTime()>();

        staticinvoke <com.fsck.k9.K9: void setQuietTimeStarts(java.lang.String)>($r4);

        $r10 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds>;

        $r4 = virtualinvoke $r10.<com.fsck.k9.preferences.TimePickerPreference: java.lang.String getTime()>();

        staticinvoke <com.fsck.k9.K9: void setQuietTimeEnds(java.lang.String)>($r4);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mWrapFolderNames>;

        $z0 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setWrapFolderNames(boolean)>($z0);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationQuickDelete>;

        if $r3 == null goto label4;

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationQuickDelete>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r11 = staticinvoke <com.fsck.k9.K9$NotificationQuickDelete: com.fsck.k9.K9$NotificationQuickDelete valueOf(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setNotificationQuickDeleteBehaviour(com.fsck.k9.K9$NotificationQuickDelete)>($r11);

     label4:
        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLockScreenNotificationVisibility>;

        if $r3 == null goto label5;

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLockScreenNotificationVisibility>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r12 = staticinvoke <com.fsck.k9.K9$LockScreenNotificationVisibility: com.fsck.k9.K9$LockScreenNotificationVisibility valueOf(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setLockScreenNotificationVisibility(com.fsck.k9.K9$LockScreenNotificationVisibility)>($r12);

     label5:
        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mSplitViewMode>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $r13 = staticinvoke <com.fsck.k9.K9$SplitViewMode: com.fsck.k9.K9$SplitViewMode valueOf(java.lang.String)>($r4);

        staticinvoke <com.fsck.k9.K9: void setSplitViewMode(com.fsck.k9.K9$SplitViewMode)>($r13);

        $r14 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference mAttachmentPathPreference>;

        $r15 = virtualinvoke $r14.<android.preference.Preference: java.lang.CharSequence getSummary()>();

        $r4 = interfaceinvoke $r15.<java.lang.CharSequence: java.lang.String toString()>();

        staticinvoke <com.fsck.k9.K9: void setAttachmentDefaultPath(java.lang.String)>($r4);

        $r3 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mBackgroundOps>;

        $r4 = virtualinvoke $r3.<android.preference.ListPreference: java.lang.String getValue()>();

        $z0 = staticinvoke <com.fsck.k9.K9: boolean setBackgroundOps(java.lang.String)>($r4);

        $z1 = staticinvoke <com.fsck.k9.K9: boolean isDebug()>();

        if $z1 != 0 goto label6;

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDebugLogging>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        if $z1 == 0 goto label6;

        $r16 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>(r0, 2131165591, 1);

        virtualinvoke $r16.<android.widget.Toast: void show()>();

     label6:
        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDebugLogging>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setDebug(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mSensitiveLogging>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        <com.fsck.k9.K9: boolean DEBUG_SENSITIVE> = $z1;

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideUserAgent>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setHideUserAgent(boolean)>($z1);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideTimeZone>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setHideTimeZone(boolean)>($z1);

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider>;

        $r4 = virtualinvoke $r17.<org.openintents.openpgp.util.OpenPgpAppPreference: java.lang.String getValue()>();

        staticinvoke <com.fsck.k9.K9: void setOpenPgpProvider(java.lang.String)>($r4);

        $r6 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mOpenPgpSupportSignOnly>;

        $z1 = virtualinvoke $r6.<android.preference.CheckBoxPreference: boolean isChecked()>();

        staticinvoke <com.fsck.k9.K9: void setOpenPgpSupportSignOnly(boolean)>($z1);

        $r18 = virtualinvoke $r2.<com.fsck.k9.preferences.Storage: com.fsck.k9.preferences.StorageEditor edit()>();

        staticinvoke <com.fsck.k9.K9: void save(com.fsck.k9.preferences.StorageEditor)>($r18);

        virtualinvoke $r18.<com.fsck.k9.preferences.StorageEditor: boolean commit()>();

        if $z0 == 0 goto label8;

        staticinvoke <com.fsck.k9.service.MailService: void actionReset(android.content.Context,java.lang.Integer)>(r0, null);

        return;

     label7:
        $z1 = 0;

        goto label1;

     label8:
        return;
    }
    private static java.lang.String themeIdToName(com.fsck.k9.K9$Theme)
    {
        com.fsck.k9.K9$Theme $r0;
        int $i0;
        int[] $r1;

        $r0 := @parameter0: com.fsck.k9.K9$Theme;

        $r1 = <com.fsck.k9.activity.setup.Prefs$9: int[] $SwitchMap$com$fsck$k9$K9$Theme>;

        $i0 = virtualinvoke $r0.<com.fsck.k9.K9$Theme: int ordinal()>();

        $i0 = $r1[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label1;
        };

     label1:
        return "light";

     label2:
        return "dark";

     label3:
        return "global";
    }
    private static com.fsck.k9.K9$Theme themeNameToId(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        com.fsck.k9.K9$Theme r1;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r0, "dark");

        if $z0 == 0 goto label1;

        r1 = <com.fsck.k9.K9$Theme: com.fsck.k9.K9$Theme DARK>;

        return r1;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r0, "global");

        if $z0 == 0 goto label2;

        r1 = <com.fsck.k9.K9$Theme: com.fsck.k9.K9$Theme USE_GLOBAL>;

        return r1;

     label2:
        r1 = <com.fsck.k9.K9$Theme: com.fsck.k9.K9$Theme LIGHT>;

        return r1;
    }
    protected void onActivityResult(int, int, android.content.Intent)
    {
        com.fsck.k9.activity.setup.Prefs r0;
        int $i0, $i1;
        android.content.Intent $r1;
        android.net.Uri $r2;
        java.lang.String $r3, $r5;
        android.preference.Preference $r4;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.content.Intent;

        lookupswitch($i0)
        {
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        specialinvoke r0.<com.fsck.k9.activity.K9PreferenceActivity: void onActivityResult(int,int,android.content.Intent)>($i0, $i1, $r1);

        return;

     label2:
        if $i1 != -1 goto label1;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<android.content.Intent: android.net.Uri getData()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<android.net.Uri: java.lang.String getPath()>();

        if $r3 == null goto label1;

        $r4 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference mAttachmentPathPreference>;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String toString()>();

        virtualinvoke $r4.<android.preference.Preference: void setSummary(java.lang.CharSequence)>($r5);

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String toString()>();

        staticinvoke <com.fsck.k9.K9: void setAttachmentDefaultPath(java.lang.String)>($r3);

        goto label1;
    }
    public void onCreate(android.os.Bundle)
    {
        com.fsck.k9.activity.setup.Prefs r0;
        android.os.Bundle $r1;
        java.lang.CharSequence[] r2, $r15;
        boolean[] r3;
        java.util.ArrayList r4, r5;
        java.util.HashSet r6;
        android.preference.Preference $r7;
        android.preference.ListPreference $r8, $r34;
        java.util.List $r9;
        android.content.res.Resources $r10;
        java.lang.String[] $r11;
        int $i0, i2;
        java.lang.Object $r12;
        boolean $z0, $z1;
        java.lang.String $r13;
        java.lang.Object[] $r14;
        com.fsck.k9.K9$Theme $r16;
        android.preference.CheckBoxPreference $r17;
        com.fsck.k9.activity.setup.Prefs$1 $r18;
        com.fsck.k9.preferences.CheckBoxListPreference $r19;
        byte $b1;
        com.fsck.k9.K9$NotificationHideSubject $r20;
        com.fsck.k9.activity.setup.Prefs$2 $r21;
        com.fsck.k9.preferences.TimePickerPreference $r22;
        com.fsck.k9.activity.setup.Prefs$3 $r23;
        com.fsck.k9.activity.setup.Prefs$4 $r24;
        com.fsck.k9.K9$NotificationQuickDelete $r25;
        android.preference.PreferenceScreen r26;
        com.fsck.k9.K9$LockScreenNotificationVisibility $r27;
        com.fsck.k9.K9$BACKGROUND_OPS $r28;
        org.openintents.openpgp.util.OpenPgpAppPreference $r29;
        android.content.Context $r30;
        com.fsck.k9.activity.setup.Prefs$5 $r31;
        com.fsck.k9.activity.setup.Prefs$6 $r32;
        com.fsck.k9.K9$SplitViewMode $r33;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        $r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<com.fsck.k9.activity.K9PreferenceActivity: void onCreate(android.os.Bundle)>($r1);

        virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: void addPreferencesFromResource(int)>(2131034118);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("language");

        $r8 = (android.preference.ListPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLanguage> = $r8;

        r5 = new java.util.ArrayList;

        $r8 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLanguage>;

        r2 = virtualinvoke $r8.<android.preference.ListPreference: java.lang.CharSequence[] getEntries()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        specialinvoke r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        r4 = new java.util.ArrayList;

        $r8 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLanguage>;

        r2 = virtualinvoke $r8.<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()>();

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        specialinvoke r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        $r10 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.content.res.Resources getResources()>();

        $r11 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(2131296323);

        r6 = new java.util.HashSet;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        specialinvoke r6.<java.util.HashSet: void <init>(java.util.Collection)>($r9);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        $i0 = $i0 + -1;

     label01:
        if $i0 <= -1 goto label03;

        $r12 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>($i0);

        $z0 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z0 != 0 goto label02;

        interfaceinvoke r5.<java.util.List: java.lang.Object remove(int)>($i0);

        interfaceinvoke r4.<java.util.List: java.lang.Object remove(int)>($i0);

     label02:
        $i0 = $i0 + -1;

        goto label01;

     label03:
        $r8 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLanguage>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getK9Language()>();

        r2 = <com.fsck.k9.activity.setup.Prefs: java.lang.CharSequence[] EMPTY_CHAR_SEQUENCE_ARRAY>;

        $r14 = interfaceinvoke r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        r2 = (java.lang.CharSequence[]) $r14;

        $r15 = <com.fsck.k9.activity.setup.Prefs: java.lang.CharSequence[] EMPTY_CHAR_SEQUENCE_ARRAY>;

        $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r15 = (java.lang.CharSequence[]) $r14;

        virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: void initListPreference(android.preference.ListPreference,java.lang.String,java.lang.CharSequence[],java.lang.CharSequence[])>($r8, $r13, r2, $r15);

        $r16 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$Theme getK9Theme()>();

        $r13 = staticinvoke <com.fsck.k9.activity.setup.Prefs: java.lang.String themeIdToName(com.fsck.k9.K9$Theme)>($r16);

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("theme", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mTheme> = $r8;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("fixed_message_view_theme");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mFixedMessageTheme> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mFixedMessageTheme>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean useFixedMessageViewTheme()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r16 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$Theme getK9MessageViewThemeSetting()>();

        $r13 = staticinvoke <com.fsck.k9.activity.setup.Prefs: java.lang.String themeIdToName(com.fsck.k9.K9$Theme)>($r16);

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("messageViewTheme", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mMessageTheme> = $r8;

        $r16 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$Theme getK9ComposerThemeSetting()>();

        $r13 = staticinvoke <com.fsck.k9.activity.setup.Prefs: java.lang.String themeIdToName(com.fsck.k9.K9$Theme)>($r16);

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("message_compose_theme", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mComposerTheme> = $r8;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("font_size");

        $r18 = new com.fsck.k9.activity.setup.Prefs$1;

        specialinvoke $r18.<com.fsck.k9.activity.setup.Prefs$1: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke $r7.<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>($r18);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("animations");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mAnimations> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mAnimations>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean showAnimations()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("gestures");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mGestures> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mGestures>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean gesturesEnabled()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("volume_navigation");

        $r19 = (com.fsck.k9.preferences.CheckBoxListPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVolumeNavigation> = $r19;

        $r19 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVolumeNavigation>;

        r2 = newarray (java.lang.CharSequence)[2];

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131166139);

        r2[0] = $r13;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131166138);

        r2[1] = $r13;

        virtualinvoke $r19.<com.fsck.k9.preferences.CheckBoxListPreference: void setItems(java.lang.CharSequence[])>(r2);

        $r19 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVolumeNavigation>;

        r3 = newarray (boolean)[2];

        $z0 = staticinvoke <com.fsck.k9.K9: boolean useVolumeKeysForNavigationEnabled()>();

        r3[0] = $z0;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean useVolumeKeysForListNavigationEnabled()>();

        r3[1] = $z0;

        virtualinvoke $r19.<com.fsck.k9.preferences.CheckBoxListPreference: void setCheckedItems(boolean[])>(r3);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("start_integrated_inbox");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mStartIntegratedInbox> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mStartIntegratedInbox>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean startIntegratedInbox()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("confirm_actions");

        $r19 = (com.fsck.k9.preferences.CheckBoxListPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions> = $r19;

        $z0 = staticinvoke <com.fsck.k9.notification.NotificationController: boolean platformSupportsExtendedNotifications()>();

        if $z0 == 0 goto label11;

        $b1 = 6;

     label04:
        r2 = newarray (java.lang.CharSequence)[$b1];

        $i0 = lengthof r2;

        r3 = newarray (boolean)[$i0];

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165734);

        r2[0] = $r13;

        $z1 = staticinvoke <com.fsck.k9.K9: boolean confirmDelete()>();

        r3[0] = $z1;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165736);

        r2[1] = $r13;

        $i0 = 1 + 1;

        $z1 = staticinvoke <com.fsck.k9.K9: boolean confirmDeleteStarred()>();

        r3[1] = $z1;

        if $z0 == 0 goto label05;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165735);

        r2[$i0] = $r13;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean confirmDeleteFromNotification()>();

        r3[$i0] = $z0;

        $i0 = $i0 + 1;

     label05:
        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165737);

        r2[$i0] = $r13;

        i2 = $i0 + 1;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean confirmSpam()>();

        r3[$i0] = $z0;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165740);

        r2[i2] = $r13;

        $i0 = i2 + 1;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean confirmDiscardMessage()>();

        r3[i2] = $z0;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165741);

        r2[$i0] = $r13;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean confirmMarkAllRead()>();

        r3[$i0] = $z0;

        $r19 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        virtualinvoke $r19.<com.fsck.k9.preferences.CheckBoxListPreference: void setItems(java.lang.CharSequence[])>(r2);

        $r19 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mConfirmActions>;

        virtualinvoke $r19.<com.fsck.k9.preferences.CheckBoxListPreference: void setCheckedItems(boolean[])>(r3);

        $r20 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$NotificationHideSubject getNotificationHideSubject()>();

        $r13 = virtualinvoke $r20.<com.fsck.k9.K9$NotificationHideSubject: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("notification_hide_subject", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationHideSubject> = $r8;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("measure_accounts");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mMeasureAccounts> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mMeasureAccounts>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean measureAccounts()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("count_search");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mCountSearch> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mCountSearch>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean countSearchMessages()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("hide_special_accounts");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideSpecialAccounts> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideSpecialAccounts>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isHideSpecialAccounts()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $i0 = staticinvoke <com.fsck.k9.K9: int messageListPreviewLines()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("messagelist_preview_lines", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mPreviewLines> = $r8;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_sender_above_subject");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mSenderAboveSubject> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mSenderAboveSubject>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean messageListSenderAboveSubject()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_checkboxes");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mCheckboxes> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mCheckboxes>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean messageListCheckboxes()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_stars");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mStars> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mStars>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean messageListStars()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_show_correspondent_names");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowCorrespondentNames> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowCorrespondentNames>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean showCorrespondentNames()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_show_contact_name");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowContactName> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowContactName>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean showContactName()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_show_contact_picture");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowContactPicture> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowContactPicture>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean showContactPicture()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_colorize_missing_contact_pictures");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mColorizeMissingContactPictures> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mColorizeMissingContactPictures>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isColorizeMissingContactPictures()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_background_as_unread_indicator");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mBackgroundAsUnreadIndicator> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mBackgroundAsUnreadIndicator>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean useBackgroundAsUnreadIndicator()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messagelist_contact_name_color");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean changeContactNameColor()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("threaded_view");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mThreadedView> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mThreadedView>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isThreadedViewEnabled()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $z0 = staticinvoke <com.fsck.k9.K9: boolean changeContactNameColor()>();

        if $z0 == 0 goto label12;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor>;

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setSummary(int)>(2131165776);

     label06:
        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor>;

        $r21 = new com.fsck.k9.activity.setup.Prefs$2;

        specialinvoke $r21.<com.fsck.k9.activity.setup.Prefs$2: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>($r21);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messageview_fixedwidth_font");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mFixedWidth> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mFixedWidth>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean messageViewFixedWidthFont()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messageview_return_to_list");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mReturnToList> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mReturnToList>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean messageViewReturnToList()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messageview_show_next");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowNext> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mShowNext>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean messageViewShowNext()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messageview_autofit_width");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mAutofitWidth> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mAutofitWidth>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean autofitWidth()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("quiet_time_enabled");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mQuietTimeEnabled> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mQuietTimeEnabled>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean getQuietTimeEnabled()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("disable_notifications_during_quiet_time");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDisableNotificationDuringQuietTime> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDisableNotificationDuringQuietTime>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isNotificationDuringQuietTimeEnabled()>();

        if $z0 != 0 goto label13;

        $z0 = 1;

     label07:
        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("quiet_time_starts");

        $r22 = (com.fsck.k9.preferences.TimePickerPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts> = $r22;

        $r22 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getQuietTimeStarts()>();

        virtualinvoke $r22.<com.fsck.k9.preferences.TimePickerPreference: void setDefaultValue(java.lang.Object)>($r13);

        $r22 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getQuietTimeStarts()>();

        virtualinvoke $r22.<com.fsck.k9.preferences.TimePickerPreference: void setSummary(java.lang.CharSequence)>($r13);

        $r22 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeStarts>;

        $r23 = new com.fsck.k9.activity.setup.Prefs$3;

        specialinvoke $r23.<com.fsck.k9.activity.setup.Prefs$3: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke $r22.<com.fsck.k9.preferences.TimePickerPreference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>($r23);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("quiet_time_ends");

        $r22 = (com.fsck.k9.preferences.TimePickerPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds> = $r22;

        $r22 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getQuietTimeEnds()>();

        virtualinvoke $r22.<com.fsck.k9.preferences.TimePickerPreference: void setSummary(java.lang.CharSequence)>($r13);

        $r22 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getQuietTimeEnds()>();

        virtualinvoke $r22.<com.fsck.k9.preferences.TimePickerPreference: void setDefaultValue(java.lang.Object)>($r13);

        $r22 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.TimePickerPreference mQuietTimeEnds>;

        $r24 = new com.fsck.k9.activity.setup.Prefs$4;

        specialinvoke $r24.<com.fsck.k9.activity.setup.Prefs$4: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke $r22.<com.fsck.k9.preferences.TimePickerPreference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>($r24);

        $r25 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$NotificationQuickDelete getNotificationQuickDeleteBehaviour()>();

        $r13 = virtualinvoke $r25.<com.fsck.k9.K9$NotificationQuickDelete: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("notification_quick_delete", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationQuickDelete> = $r8;

        $z0 = staticinvoke <com.fsck.k9.notification.NotificationController: boolean platformSupportsExtendedNotifications()>();

        if $z0 != 0 goto label08;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("notification_preferences");

        r26 = (android.preference.PreferenceScreen) $r7;

        $r8 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationQuickDelete>;

        virtualinvoke r26.<android.preference.PreferenceScreen: boolean removePreference(android.preference.Preference)>($r8);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mNotificationQuickDelete> = null;

     label08:
        $r27 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$LockScreenNotificationVisibility getLockScreenNotificationVisibility()>();

        $r13 = virtualinvoke $r27.<com.fsck.k9.K9$LockScreenNotificationVisibility: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("lock_screen_notification_visibility", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLockScreenNotificationVisibility> = $r8;

        $z0 = staticinvoke <com.fsck.k9.notification.NotificationController: boolean platformSupportsLockScreenNotifications()>();

        if $z0 != 0 goto label09;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("notification_preferences");

        r26 = (android.preference.PreferenceScreen) $r7;

        $r8 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLockScreenNotificationVisibility>;

        virtualinvoke r26.<android.preference.PreferenceScreen: boolean removePreference(android.preference.Preference)>($r8);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mLockScreenNotificationVisibility> = null;

     label09:
        $r28 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$BACKGROUND_OPS getBackgroundOps()>();

        $r13 = virtualinvoke $r28.<com.fsck.k9.K9$BACKGROUND_OPS: java.lang.String name()>();

        $r8 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference setupListPreference(java.lang.String,java.lang.String)>("background_ops", $r13);

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mBackgroundOps> = $r8;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("debug_logging");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDebugLogging> = $r17;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("sensitive_logging");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mSensitiveLogging> = $r17;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("privacy_hide_useragent");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideUserAgent> = $r17;

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("privacy_hide_timezone");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideTimeZone> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mDebugLogging>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isDebug()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mSensitiveLogging>;

        $z0 = <com.fsck.k9.K9: boolean DEBUG_SENSITIVE>;

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideUserAgent>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean hideUserAgent()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mHideTimeZone>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean hideTimeZone()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("openpgp_provider");

        $r29 = (org.openintents.openpgp.util.OpenPgpAppPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider> = $r29;

        $r29 = r0.<com.fsck.k9.activity.setup.Prefs: org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getOpenPgpProvider()>();

        virtualinvoke $r29.<org.openintents.openpgp.util.OpenPgpAppPreference: void setValue(java.lang.String)>($r13);

        $r30 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.content.Context getApplicationContext()>();

        $z0 = staticinvoke <org.openintents.openpgp.util.OpenPgpAppPreference: boolean isApgInstalled(android.content.Context)>($r30);

        if $z0 == 0 goto label10;

        $r29 = r0.<com.fsck.k9.activity.setup.Prefs: org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider>;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165497);

        virtualinvoke $r29.<org.openintents.openpgp.util.OpenPgpAppPreference: void addLegacyProvider(java.lang.String,java.lang.String,int)>("apg-placeholder", $r13, 2130837606);

     label10:
        $r29 = r0.<com.fsck.k9.activity.setup.Prefs: org.openintents.openpgp.util.OpenPgpAppPreference mOpenPgpProvider>;

        $r31 = new com.fsck.k9.activity.setup.Prefs$5;

        specialinvoke $r31.<com.fsck.k9.activity.setup.Prefs$5: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke $r29.<org.openintents.openpgp.util.OpenPgpAppPreference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>($r31);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("openpgp_support_sign_only");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mOpenPgpSupportSignOnly> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mOpenPgpSupportSignOnly>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean getOpenPgpSupportSignOnly()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("attachment_default_path");

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference mAttachmentPathPreference> = $r7;

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference mAttachmentPathPreference>;

        $r13 = staticinvoke <com.fsck.k9.K9: java.lang.String getAttachmentDefaultPath()>();

        virtualinvoke $r7.<android.preference.Preference: void setSummary(java.lang.CharSequence)>($r13);

        $r7 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference mAttachmentPathPreference>;

        $r32 = new com.fsck.k9.activity.setup.Prefs$6;

        specialinvoke $r32.<com.fsck.k9.activity.setup.Prefs$6: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke $r7.<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>($r32);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("folderlist_wrap_folder_name");

        $r17 = (android.preference.CheckBoxPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mWrapFolderNames> = $r17;

        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mWrapFolderNames>;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean wrapFolderNames()>();

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setChecked(boolean)>($z0);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("messageview_visible_refile_actions");

        $r19 = (com.fsck.k9.preferences.CheckBoxListPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVisibleRefileActions> = $r19;

        r2 = newarray (java.lang.CharSequence)[5];

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165596);

        r2[0] = $r13;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165513);

        r2[1] = $r13;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165903);

        r2[2] = $r13;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131165550);

        r2[3] = $r13;

        $r13 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: java.lang.String getString(int)>(2131166084);

        r2[4] = $r13;

        r3 = newarray (boolean)[5];

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isMessageViewDeleteActionVisible()>();

        r3[0] = $z0;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isMessageViewArchiveActionVisible()>();

        r3[1] = $z0;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isMessageViewMoveActionVisible()>();

        r3[2] = $z0;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isMessageViewCopyActionVisible()>();

        r3[3] = $z0;

        $z0 = staticinvoke <com.fsck.k9.K9: boolean isMessageViewSpamActionVisible()>();

        r3[4] = $z0;

        $r19 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVisibleRefileActions>;

        virtualinvoke $r19.<com.fsck.k9.preferences.CheckBoxListPreference: void setItems(java.lang.CharSequence[])>(r2);

        $r19 = r0.<com.fsck.k9.activity.setup.Prefs: com.fsck.k9.preferences.CheckBoxListPreference mVisibleRefileActions>;

        virtualinvoke $r19.<com.fsck.k9.preferences.CheckBoxListPreference: void setCheckedItems(boolean[])>(r3);

        $r7 = virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: android.preference.Preference findPreference(java.lang.CharSequence)>("splitview_mode");

        $r8 = (android.preference.ListPreference) $r7;

        r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mSplitViewMode> = $r8;

        $r8 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mSplitViewMode>;

        $r33 = staticinvoke <com.fsck.k9.K9: com.fsck.k9.K9$SplitViewMode getSplitViewMode()>();

        $r13 = virtualinvoke $r33.<com.fsck.k9.K9$SplitViewMode: java.lang.String name()>();

        $r34 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mSplitViewMode>;

        r2 = virtualinvoke $r34.<android.preference.ListPreference: java.lang.CharSequence[] getEntries()>();

        $r34 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.ListPreference mSplitViewMode>;

        $r15 = virtualinvoke $r34.<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()>();

        virtualinvoke r0.<com.fsck.k9.activity.setup.Prefs: void initListPreference(android.preference.ListPreference,java.lang.String,java.lang.CharSequence[],java.lang.CharSequence[])>($r8, $r13, r2, $r15);

        return;

     label11:
        $b1 = 5;

        goto label04;

     label12:
        $r17 = r0.<com.fsck.k9.activity.setup.Prefs: android.preference.CheckBoxPreference mChangeContactNameColor>;

        virtualinvoke $r17.<android.preference.CheckBoxPreference: void setSummary(int)>(2131165777);

        goto label06;

     label13:
        $z0 = 0;

        goto label07;
    }
    protected android.app.Dialog onCreateDialog(int)
    {
        com.fsck.k9.activity.setup.Prefs r0;
        int $i0;
        com.fsck.k9.activity.setup.Prefs$8 $r1;
        com.fsck.k9.ui.dialog.ApgDeprecationWarningDialog r2;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label2;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        r2 = new com.fsck.k9.ui.dialog.ApgDeprecationWarningDialog;

        specialinvoke r2.<com.fsck.k9.ui.dialog.ApgDeprecationWarningDialog: void <init>(android.content.Context)>(r0);

        $r1 = new com.fsck.k9.activity.setup.Prefs$8;

        specialinvoke $r1.<com.fsck.k9.activity.setup.Prefs$8: void <init>(com.fsck.k9.activity.setup.Prefs)>(r0);

        virtualinvoke r2.<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>($r1);

        return r2;
    }
    protected void onPause()
    {
        com.fsck.k9.activity.setup.Prefs r0;

        r0 := @this: com.fsck.k9.activity.setup.Prefs;

        specialinvoke r0.<com.fsck.k9.activity.setup.Prefs: void saveSettings()>();

        specialinvoke r0.<com.fsck.k9.activity.K9PreferenceActivity: void onPause()>();

        return;
    }
