com.fsck.k9.ui.crypto.MessageCryptoHelper$8 extends org.openintents.openpgp.util.OpenPgpApi$OpenPgpDataSource
final com.fsck.k9.ui.crypto.MessageCryptoHelper this$0
    void <init>(com.fsck.k9.ui.crypto.MessageCryptoHelper)
    {
        com.fsck.k9.ui.crypto.MessageCryptoHelper$8 r0;
        com.fsck.k9.ui.crypto.MessageCryptoHelper $r1;

        r0 := @this: com.fsck.k9.ui.crypto.MessageCryptoHelper$8;

        $r1 := @parameter0: com.fsck.k9.ui.crypto.MessageCryptoHelper;

        r0.<com.fsck.k9.ui.crypto.MessageCryptoHelper$8: com.fsck.k9.ui.crypto.MessageCryptoHelper this$0> = $r1;

        specialinvoke r0.<org.openintents.openpgp.util.OpenPgpApi$OpenPgpDataSource: void <init>()>();

        return;
    }
    public java.lang.Long getSizeForProgress()
    {
        com.fsck.k9.ui.crypto.MessageCryptoHelper$8 r0;
        com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType r1, $r5;
        com.fsck.k9.mail.Part r2;
        com.fsck.k9.ui.crypto.MessageCryptoHelper $r3;
        com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart $r4;
        com.fsck.k9.mail.Body $r6;
        com.fsck.k9.mail.Multipart r7;
        com.fsck.k9.mail.BodyPart $r8;
        boolean $z0;
        com.fsck.k9.mail.internet.SizeAware r9;
        long $l0;
        java.lang.Long $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.fsck.k9.ui.crypto.MessageCryptoHelper$8;

        $r3 = r0.<com.fsck.k9.ui.crypto.MessageCryptoHelper$8: com.fsck.k9.ui.crypto.MessageCryptoHelper this$0>;

        $r4 = staticinvoke <com.fsck.k9.ui.crypto.MessageCryptoHelper: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart access$800(com.fsck.k9.ui.crypto.MessageCryptoHelper)>($r3);

        r2 = $r4.<com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart: com.fsck.k9.mail.Part part>;

        $r3 = r0.<com.fsck.k9.ui.crypto.MessageCryptoHelper$8: com.fsck.k9.ui.crypto.MessageCryptoHelper this$0>;

        $r4 = staticinvoke <com.fsck.k9.ui.crypto.MessageCryptoHelper: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart access$800(com.fsck.k9.ui.crypto.MessageCryptoHelper)>($r3);

        r1 = $r4.<com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType type>;

        $r5 = <com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType PGP_ENCRYPTED>;

        if r1 != $r5 goto label2;

        $r6 = interfaceinvoke r2.<com.fsck.k9.mail.Part: com.fsck.k9.mail.Body getBody()>();

        r7 = (com.fsck.k9.mail.Multipart) $r6;

        $r8 = virtualinvoke r7.<com.fsck.k9.mail.Multipart: com.fsck.k9.mail.BodyPart getBodyPart(int)>(1);

        $r6 = virtualinvoke $r8.<com.fsck.k9.mail.BodyPart: com.fsck.k9.mail.Body getBody()>();

     label1:
        $z0 = $r6 instanceof com.fsck.k9.mail.internet.SizeAware;

        if $z0 == 0 goto label4;

        r9 = (com.fsck.k9.mail.internet.SizeAware) $r6;

        $l0 = interfaceinvoke r9.<com.fsck.k9.mail.internet.SizeAware: long getSize()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r10;

     label2:
        $r5 = <com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType PGP_INLINE>;

        if r1 != $r5 goto label3;

        $r6 = interfaceinvoke r2.<com.fsck.k9.mail.Part: com.fsck.k9.mail.Body getBody()>();

        goto label1;

     label3:
        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("part to stream must be encrypted or inline!");

        throw $r11;

     label4:
        return null;
    }
    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        com.fsck.k9.ui.crypto.MessageCryptoHelper$8 r0;
        java.io.OutputStream $r1;
        com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType r2, $r7;
        com.fsck.k9.mail.MessagingException r3;
        com.fsck.k9.mail.Part r4;
        com.fsck.k9.ui.crypto.MessageCryptoHelper $r5;
        com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart $r6;
        com.fsck.k9.mail.Body $r8;
        com.fsck.k9.mail.Multipart r9;
        com.fsck.k9.mail.BodyPart $r10;
        java.lang.String $r11;
        byte[] $r12;
        java.lang.Object[] $r13;
        java.lang.IllegalStateException $r14;

        r0 := @this: com.fsck.k9.ui.crypto.MessageCryptoHelper$8;

        $r1 := @parameter0: java.io.OutputStream;

        $r5 = r0.<com.fsck.k9.ui.crypto.MessageCryptoHelper$8: com.fsck.k9.ui.crypto.MessageCryptoHelper this$0>;

     label01:
        $r6 = staticinvoke <com.fsck.k9.ui.crypto.MessageCryptoHelper: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart access$800(com.fsck.k9.ui.crypto.MessageCryptoHelper)>($r5);

     label02:
        r4 = $r6.<com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart: com.fsck.k9.mail.Part part>;

        $r5 = r0.<com.fsck.k9.ui.crypto.MessageCryptoHelper$8: com.fsck.k9.ui.crypto.MessageCryptoHelper this$0>;

     label03:
        $r6 = staticinvoke <com.fsck.k9.ui.crypto.MessageCryptoHelper: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart access$800(com.fsck.k9.ui.crypto.MessageCryptoHelper)>($r5);

     label04:
        r2 = $r6.<com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPart: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType type>;

        $r7 = <com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType PGP_ENCRYPTED>;

        if r2 != $r7 goto label09;

     label05:
        $r8 = interfaceinvoke r4.<com.fsck.k9.mail.Part: com.fsck.k9.mail.Body getBody()>();

     label06:
        r9 = (com.fsck.k9.mail.Multipart) $r8;

     label07:
        $r10 = virtualinvoke r9.<com.fsck.k9.mail.Multipart: com.fsck.k9.mail.BodyPart getBodyPart(int)>(1);

        $r8 = virtualinvoke $r10.<com.fsck.k9.mail.BodyPart: com.fsck.k9.mail.Body getBody()>();

        interfaceinvoke $r8.<com.fsck.k9.mail.Body: void writeTo(java.io.OutputStream)>($r1);

     label08:
        return;

     label09:
        $r7 = <com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType: com.fsck.k9.ui.crypto.MessageCryptoHelper$CryptoPartType PGP_INLINE>;

        if r2 != $r7 goto label13;

     label10:
        $r11 = staticinvoke <com.fsck.k9.mail.internet.MessageExtractor: java.lang.String getTextFromPart(com.fsck.k9.mail.Part)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r12);

     label11:
        return;

     label12:
        r3 := @caughtexception;

        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <timber.log.Timber: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>(r3, "MessagingException while writing message to crypto provider", $r13);

        return;

     label13:
        $r14 = new java.lang.IllegalStateException;

     label14:
        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("part to stream must be encrypted or inline!");

     label15:
        throw $r14;

        catch com.fsck.k9.mail.MessagingException from label01 to label02 with label12;
        catch com.fsck.k9.mail.MessagingException from label03 to label04 with label12;
        catch com.fsck.k9.mail.MessagingException from label05 to label06 with label12;
        catch com.fsck.k9.mail.MessagingException from label07 to label08 with label12;
        catch com.fsck.k9.mail.MessagingException from label10 to label11 with label12;
        catch com.fsck.k9.mail.MessagingException from label14 to label15 with label12;
    }
