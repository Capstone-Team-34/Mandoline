com.squareup.moshi.ClassFactory extends java.lang.Object
    void <init>()
    {
        com.squareup.moshi.ClassFactory r0;

        r0 := @this: com.squareup.moshi.ClassFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static com.squareup.moshi.ClassFactory get(java.lang.Class)
    {
        java.lang.Class r0, $r5, $r15;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r2;
        com.squareup.moshi.ClassFactory$1 $r3;
        java.lang.NoSuchMethodException $r4, $r20, $r27;
        java.lang.reflect.Field $r6;
        java.lang.Object $r7;
        java.lang.reflect.Method $r8;
        com.squareup.moshi.ClassFactory$2 $r9;
        java.lang.IllegalAccessException r10, r17;
        java.lang.AssertionError $r11;
        java.lang.ClassNotFoundException $r12;
        java.lang.Object[] $r13;
        java.lang.Integer $r14;
        int $i0;
        com.squareup.moshi.ClassFactory$3 $r16;
        java.lang.reflect.InvocationTargetException r18;
        java.lang.RuntimeException $r19;
        com.squareup.moshi.ClassFactory$4 $r21;
        java.lang.Exception $r22;
        java.lang.IllegalArgumentException $r23;
        java.lang.StringBuilder $r24;
        java.lang.String $r25;
        java.lang.NoSuchFieldException $r26;

        r0 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Class)[0];

     label01:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

        virtualinvoke $r2.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label02:
        $r3 = new com.squareup.moshi.ClassFactory$1;

     label03:
        specialinvoke $r3.<com.squareup.moshi.ClassFactory$1: void <init>(java.lang.reflect.Constructor,java.lang.Class)>($r2, r0);

     label04:
        return $r3;

     label05:
        $r4 := @caughtexception;

     label06:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.misc.Unsafe");

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe");

        virtualinvoke $r6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label07:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Class;";

     label08:
        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("allocateInstance", $r1);

     label09:
        $r9 = new com.squareup.moshi.ClassFactory$2;

     label10:
        specialinvoke $r9.<com.squareup.moshi.ClassFactory$2: void <init>(java.lang.reflect.Method,java.lang.Object,java.lang.Class)>($r8, $r7, r0);

     label11:
        return $r9;

     label12:
        r10 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label13:
        $r12 := @caughtexception;

     label14:
        $r5 = class "Ljava/io/ObjectStreamClass;";

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Class;";

     label15:
        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getConstructorId", $r1);

        virtualinvoke $r8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label16:
        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = class "Ljava/lang/Object;";

     label17:
        $r7 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

     label18:
        $r14 = (java.lang.Integer) $r7;

     label19:
        $i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

     label20:
        $r5 = class "Ljava/io/ObjectStreamClass;";

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/lang/Class;";

        $r15 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[1] = $r15;

     label21:
        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("newInstance", $r1);

        virtualinvoke $r8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label22:
        $r16 = new com.squareup.moshi.ClassFactory$3;

     label23:
        specialinvoke $r16.<com.squareup.moshi.ClassFactory$3: void <init>(java.lang.reflect.Method,java.lang.Class,int)>($r8, r0, $i0);

     label24:
        return $r16;

     label25:
        r17 := @caughtexception;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label26:
        r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r18);

        throw $r19;

     label27:
        $r20 := @caughtexception;

        $r5 = class "Ljava/io/ObjectInputStream;";

     label28:
        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/lang/Class;";

        $r1[1] = class "Ljava/lang/Class;";

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("newInstance", $r1);

        virtualinvoke $r8.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label29:
        $r21 = new com.squareup.moshi.ClassFactory$4;

     label30:
        specialinvoke $r21.<com.squareup.moshi.ClassFactory$4: void <init>(java.lang.reflect.Method,java.lang.Class)>($r8, r0);

     label31:
        return $r21;

     label32:
        $r22 := @caughtexception;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot construct instances of ");

        $r25 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r23;

     label33:
        $r26 := @caughtexception;

        goto label14;

     label34:
        $r27 := @caughtexception;

        goto label14;

        catch java.lang.NoSuchMethodException from label01 to label02 with label05;
        catch java.lang.NoSuchMethodException from label03 to label04 with label05;
        catch java.lang.IllegalAccessException from label06 to label07 with label12;
        catch java.lang.IllegalAccessException from label08 to label09 with label12;
        catch java.lang.IllegalAccessException from label10 to label11 with label12;
        catch java.lang.ClassNotFoundException from label06 to label07 with label13;
        catch java.lang.ClassNotFoundException from label08 to label09 with label13;
        catch java.lang.ClassNotFoundException from label10 to label11 with label13;
        catch java.lang.NoSuchMethodException from label06 to label07 with label34;
        catch java.lang.NoSuchMethodException from label08 to label09 with label34;
        catch java.lang.NoSuchMethodException from label10 to label11 with label34;
        catch java.lang.NoSuchFieldException from label06 to label07 with label33;
        catch java.lang.NoSuchFieldException from label08 to label09 with label33;
        catch java.lang.NoSuchFieldException from label10 to label11 with label33;
        catch java.lang.IllegalAccessException from label15 to label16 with label25;
        catch java.lang.IllegalAccessException from label17 to label18 with label25;
        catch java.lang.IllegalAccessException from label19 to label20 with label25;
        catch java.lang.IllegalAccessException from label21 to label22 with label25;
        catch java.lang.IllegalAccessException from label23 to label24 with label25;
        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label26;
        catch java.lang.reflect.InvocationTargetException from label17 to label18 with label26;
        catch java.lang.reflect.InvocationTargetException from label19 to label20 with label26;
        catch java.lang.reflect.InvocationTargetException from label21 to label22 with label26;
        catch java.lang.reflect.InvocationTargetException from label23 to label24 with label26;
        catch java.lang.NoSuchMethodException from label15 to label16 with label27;
        catch java.lang.NoSuchMethodException from label17 to label18 with label27;
        catch java.lang.NoSuchMethodException from label19 to label20 with label27;
        catch java.lang.NoSuchMethodException from label21 to label22 with label27;
        catch java.lang.NoSuchMethodException from label23 to label24 with label27;
        catch java.lang.Exception from label28 to label29 with label32;
        catch java.lang.Exception from label30 to label31 with label32;
    }
abstract java.lang.Object newInstance() throws java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException, java.lang.InstantiationException { 
// no body
} 
