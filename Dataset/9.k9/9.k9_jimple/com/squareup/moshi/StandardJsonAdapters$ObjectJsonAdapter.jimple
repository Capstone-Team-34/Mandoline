com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter extends com.squareup.moshi.JsonAdapter
private final com.squareup.moshi.Moshi moshi
    public void <init>(com.squareup.moshi.Moshi)
    {
        com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter r0;
        com.squareup.moshi.Moshi $r1;

        r0 := @this: com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter;

        $r1 := @parameter0: com.squareup.moshi.Moshi;

        specialinvoke r0.<com.squareup.moshi.JsonAdapter: void <init>()>();

        r0.<com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter: com.squareup.moshi.Moshi moshi> = $r1;

        return;
    }
    private java.lang.Class toJsonType(java.lang.Class)
    {
        com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter r0;
        java.lang.Class r1, $r2;
        boolean $z0;

        r0 := @this: com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter;

        r1 := @parameter0: java.lang.Class;

        $r2 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        return class "Ljava/util/Map;";

     label1:
        $r2 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        return class "Ljava/util/Collection;";

     label2:
        return r1;
    }
    public java.lang.Object fromJson(com.squareup.moshi.JsonReader) throws java.io.IOException
    {
        com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter r0;
        com.squareup.moshi.JsonReader $r1;
        com.squareup.moshi.LinkedHashTreeMap r2;
        int[] $r3;
        com.squareup.moshi.JsonReader$Token $r4;
        int $i0;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.util.ArrayList r8;
        boolean $z0;
        java.lang.Object $r9;
        double $d0;
        java.lang.Double $r10;
        java.lang.Boolean $r11;

        r0 := @this: com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter;

        $r1 := @parameter0: com.squareup.moshi.JsonReader;

        $r3 = <com.squareup.moshi.StandardJsonAdapters$11: int[] $SwitchMap$com$squareup$moshi$JsonReader$Token>;

        $r4 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: com.squareup.moshi.JsonReader$Token peek()>();

        $i0 = virtualinvoke $r4.<com.squareup.moshi.JsonReader$Token: int ordinal()>();

        $i0 = $r3[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label11;
            default: goto label01;
        };

     label01:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a value but was ");

        $r4 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: com.squareup.moshi.JsonReader$Token peek()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at path ");

        $r7 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: java.lang.String getPath()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label02:
        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r1.<com.squareup.moshi.JsonReader: void beginArray()>();

     label03:
        $z0 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r9 = virtualinvoke r0.<com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter: java.lang.Object fromJson(com.squareup.moshi.JsonReader)>($r1);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label03;

     label04:
        virtualinvoke $r1.<com.squareup.moshi.JsonReader: void endArray()>();

        return r8;

     label05:
        r2 = new com.squareup.moshi.LinkedHashTreeMap;

        specialinvoke r2.<com.squareup.moshi.LinkedHashTreeMap: void <init>()>();

        virtualinvoke $r1.<com.squareup.moshi.JsonReader: void beginObject()>();

     label06:
        $z0 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r7 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: java.lang.String nextName()>();

        $r9 = virtualinvoke r0.<com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter: java.lang.Object fromJson(com.squareup.moshi.JsonReader)>($r1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

        goto label06;

     label07:
        virtualinvoke $r1.<com.squareup.moshi.JsonReader: void endObject()>();

        return r2;

     label08:
        $r7 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: java.lang.String nextString()>();

        return $r7;

     label09:
        $d0 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: double nextDouble()>();

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r10;

     label10:
        $z0 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: boolean nextBoolean()>();

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r11;

     label11:
        $r9 = virtualinvoke $r1.<com.squareup.moshi.JsonReader: java.lang.Object nextNull()>();

        return $r9;
    }
    public void toJson(com.squareup.moshi.JsonWriter, java.lang.Object) throws java.io.IOException
    {
        com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter r0;
        com.squareup.moshi.JsonWriter $r1;
        java.lang.Object $r2;
        java.util.Set $r3;
        java.lang.Class $r4;
        com.squareup.moshi.Moshi $r5;
        com.squareup.moshi.JsonAdapter $r6;

        r0 := @this: com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter;

        $r1 := @parameter0: com.squareup.moshi.JsonWriter;

        $r2 := @parameter1: java.lang.Object;

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 != class "Ljava/lang/Object;" goto label1;

        virtualinvoke $r1.<com.squareup.moshi.JsonWriter: com.squareup.moshi.JsonWriter beginObject()>();

        virtualinvoke $r1.<com.squareup.moshi.JsonWriter: com.squareup.moshi.JsonWriter endObject()>();

        return;

     label1:
        $r5 = r0.<com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter: com.squareup.moshi.Moshi moshi>;

        $r4 = specialinvoke r0.<com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter: java.lang.Class toJsonType(java.lang.Class)>($r4);

        $r3 = <com.squareup.moshi.Util: java.util.Set NO_ANNOTATIONS>;

        $r6 = virtualinvoke $r5.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.reflect.Type,java.util.Set)>($r4, $r3);

        virtualinvoke $r6.<com.squareup.moshi.JsonAdapter: void toJson(com.squareup.moshi.JsonWriter,java.lang.Object)>($r1, $r2);

        return;
    }
    public java.lang.String toString()
    {
        com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter r0;

        r0 := @this: com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter;

        return "JsonAdapter(Object)";
    }
