com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator extends java.lang.Object implements java.util.Iterator
int expectedModCount
com.squareup.moshi.LinkedHashTreeMap$Node lastReturned
com.squareup.moshi.LinkedHashTreeMap$Node next
final com.squareup.moshi.LinkedHashTreeMap this$0
    void <init>(com.squareup.moshi.LinkedHashTreeMap)
    {
        com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator r0;
        com.squareup.moshi.LinkedHashTreeMap $r1;
        com.squareup.moshi.LinkedHashTreeMap$Node $r2;
        int $i0;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator;

        $r1 := @parameter0: com.squareup.moshi.LinkedHashTreeMap;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $r2 = $r1.<com.squareup.moshi.LinkedHashTreeMap: com.squareup.moshi.LinkedHashTreeMap$Node header>;

        $r2 = $r2.<com.squareup.moshi.LinkedHashTreeMap$Node: com.squareup.moshi.LinkedHashTreeMap$Node next>;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node next> = $r2;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node lastReturned> = null;

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $i0 = $r1.<com.squareup.moshi.LinkedHashTreeMap: int modCount>;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: int expectedModCount> = $i0;

        return;
    }
    public final boolean hasNext()
    {
        com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator r0;
        com.squareup.moshi.LinkedHashTreeMap$Node $r1, $r3;
        com.squareup.moshi.LinkedHashTreeMap $r2;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator;

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node next>;

        $r2 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $r3 = $r2.<com.squareup.moshi.LinkedHashTreeMap: com.squareup.moshi.LinkedHashTreeMap$Node header>;

        if $r1 == $r3 goto label1;

        return 1;

     label1:
        return 0;
    }
    final com.squareup.moshi.LinkedHashTreeMap$Node nextNode()
    {
        com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator r0;
        com.squareup.moshi.LinkedHashTreeMap$Node r1, $r3;
        int $i0, $i1;
        com.squareup.moshi.LinkedHashTreeMap $r2;
        java.util.NoSuchElementException $r4;
        java.util.ConcurrentModificationException $r5;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator;

        r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node next>;

        $r2 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $r3 = $r2.<com.squareup.moshi.LinkedHashTreeMap: com.squareup.moshi.LinkedHashTreeMap$Node header>;

        if r1 != $r3 goto label1;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $i1 = $r2.<com.squareup.moshi.LinkedHashTreeMap: int modCount>;

        $i0 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: int expectedModCount>;

        if $i1 == $i0 goto label2;

        $r5 = new java.util.ConcurrentModificationException;

        specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r5;

     label2:
        $r3 = r1.<com.squareup.moshi.LinkedHashTreeMap$Node: com.squareup.moshi.LinkedHashTreeMap$Node next>;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node next> = $r3;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node lastReturned> = r1;

        return r1;
    }
    public final void remove()
    {
        com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator r0;
        com.squareup.moshi.LinkedHashTreeMap$Node $r1;
        java.lang.IllegalStateException $r2;
        com.squareup.moshi.LinkedHashTreeMap $r3;
        int $i0;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator;

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node lastReturned>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r3 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node lastReturned>;

        virtualinvoke $r3.<com.squareup.moshi.LinkedHashTreeMap: void removeInternal(com.squareup.moshi.LinkedHashTreeMap$Node,boolean)>($r1, 1);

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap$Node lastReturned> = null;

        $r3 = r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $i0 = $r3.<com.squareup.moshi.LinkedHashTreeMap: int modCount>;

        r0.<com.squareup.moshi.LinkedHashTreeMap$LinkedTreeMapIterator: int expectedModCount> = $i0;

        return;
    }
