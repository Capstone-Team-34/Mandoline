com.squareup.moshi.LinkedHashTreeMap$EntrySet extends java.util.AbstractSet
final com.squareup.moshi.LinkedHashTreeMap this$0
    void <init>(com.squareup.moshi.LinkedHashTreeMap)
    {
        com.squareup.moshi.LinkedHashTreeMap$EntrySet r0;
        com.squareup.moshi.LinkedHashTreeMap $r1;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$EntrySet;

        $r1 := @parameter0: com.squareup.moshi.LinkedHashTreeMap;

        r0.<com.squareup.moshi.LinkedHashTreeMap$EntrySet: com.squareup.moshi.LinkedHashTreeMap this$0> = $r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }
    public void clear()
    {
        com.squareup.moshi.LinkedHashTreeMap$EntrySet r0;
        com.squareup.moshi.LinkedHashTreeMap $r1;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$EntrySet;

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$EntrySet: com.squareup.moshi.LinkedHashTreeMap this$0>;

        virtualinvoke $r1.<com.squareup.moshi.LinkedHashTreeMap: void clear()>();

        return;
    }
    public boolean contains(java.lang.Object)
    {
        com.squareup.moshi.LinkedHashTreeMap$EntrySet r0;
        com.squareup.moshi.LinkedHashTreeMap$Node $r1;
        java.lang.Object $r2;
        boolean $z0;
        com.squareup.moshi.LinkedHashTreeMap $r3;
        java.util.Map$Entry $r4;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$EntrySet;

        $r2 := @parameter0: java.lang.Object;

        $z0 = $r2 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.squareup.moshi.LinkedHashTreeMap$EntrySet: com.squareup.moshi.LinkedHashTreeMap this$0>;

        $r4 = (java.util.Map$Entry) $r2;

        $r1 = virtualinvoke $r3.<com.squareup.moshi.LinkedHashTreeMap: com.squareup.moshi.LinkedHashTreeMap$Node findByEntry(java.util.Map$Entry)>($r4);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }
    public java.util.Iterator iterator()
    {
        com.squareup.moshi.LinkedHashTreeMap$EntrySet r0;
        com.squareup.moshi.LinkedHashTreeMap$EntrySet$1 $r1;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$EntrySet;

        $r1 = new com.squareup.moshi.LinkedHashTreeMap$EntrySet$1;

        specialinvoke $r1.<com.squareup.moshi.LinkedHashTreeMap$EntrySet$1: void <init>(com.squareup.moshi.LinkedHashTreeMap$EntrySet)>(r0);

        return $r1;
    }
    public boolean remove(java.lang.Object)
    {
        com.squareup.moshi.LinkedHashTreeMap$EntrySet r0;
        com.squareup.moshi.LinkedHashTreeMap$Node $r1;
        java.lang.Object r2;
        boolean $z0;
        com.squareup.moshi.LinkedHashTreeMap $r3;
        java.util.Map$Entry r4;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$EntrySet;

        r2 := @parameter0: java.lang.Object;

        $z0 = r2 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.squareup.moshi.LinkedHashTreeMap$EntrySet: com.squareup.moshi.LinkedHashTreeMap this$0>;

        r4 = (java.util.Map$Entry) r2;

        $r1 = virtualinvoke $r3.<com.squareup.moshi.LinkedHashTreeMap: com.squareup.moshi.LinkedHashTreeMap$Node findByEntry(java.util.Map$Entry)>(r4);

        if $r1 == null goto label2;

        $r3 = r0.<com.squareup.moshi.LinkedHashTreeMap$EntrySet: com.squareup.moshi.LinkedHashTreeMap this$0>;

        virtualinvoke $r3.<com.squareup.moshi.LinkedHashTreeMap: void removeInternal(com.squareup.moshi.LinkedHashTreeMap$Node,boolean)>($r1, 1);

        return 1;

     label2:
        return 0;
    }
    public int size()
    {
        com.squareup.moshi.LinkedHashTreeMap$EntrySet r0;
        com.squareup.moshi.LinkedHashTreeMap $r1;
        int i0;

        r0 := @this: com.squareup.moshi.LinkedHashTreeMap$EntrySet;

        $r1 = r0.<com.squareup.moshi.LinkedHashTreeMap$EntrySet: com.squareup.moshi.LinkedHashTreeMap this$0>;

        i0 = $r1.<com.squareup.moshi.LinkedHashTreeMap: int size>;

        return i0;
    }
