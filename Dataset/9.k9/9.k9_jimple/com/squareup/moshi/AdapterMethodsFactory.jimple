com.squareup.moshi.AdapterMethodsFactory extends java.lang.Object implements com.squareup.moshi.JsonAdapter$Factory
private final java.util.List fromAdapters
private final java.util.List toAdapters
    public void <init>(java.util.List, java.util.List)
    {
        com.squareup.moshi.AdapterMethodsFactory r0;
        java.util.List r1, r2;

        r0 := @this: com.squareup.moshi.AdapterMethodsFactory;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.squareup.moshi.AdapterMethodsFactory: java.util.List toAdapters> = r1;

        r0.<com.squareup.moshi.AdapterMethodsFactory: java.util.List fromAdapters> = r2;

        return;
    }
    static com.squareup.moshi.AdapterMethodsFactory$AdapterMethod fromAdapter(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object $r0;
        java.lang.reflect.Method $r1;
        java.lang.reflect.Type[] $r2;
        java.lang.reflect.Type $r3, $r4;
        int $i0;
        java.lang.Class $r5;
        java.util.Set $r6, $r10;
        com.squareup.moshi.AdapterMethodsFactory$4 $r7;
        java.lang.'annotation'.Annotation[][] $r8;
        java.lang.'annotation'.Annotation[] $r9;
        boolean $z0;
        com.squareup.moshi.AdapterMethodsFactory$5 $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.reflect.Method;

        virtualinvoke $r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $i0 = lengthof $r2;

        if $i0 != 1 goto label1;

        $r4 = $r2[0];

        if $r4 != class "Lcom/squareup/moshi/JsonReader;" goto label1;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        if $r3 == $r5 goto label1;

        $r6 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.reflect.AnnotatedElement)>($r1);

        $r7 = new com.squareup.moshi.AdapterMethodsFactory$4;

        specialinvoke $r7.<com.squareup.moshi.AdapterMethodsFactory$4: void <init>(java.lang.reflect.Type,java.util.Set,java.lang.Object,java.lang.reflect.Method,boolean)>($r3, $r6, $r0, $r1, 0);

        return $r7;

     label1:
        $i0 = lengthof $r2;

        if $i0 != 1 goto label2;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        if $r3 == $r5 goto label2;

        $r6 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.reflect.AnnotatedElement)>($r1);

        $r8 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r9 = $r8[0];

        $r10 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.'annotation'.Annotation[])>($r9);

        $r9 = $r8[0];

        $z0 = staticinvoke <com.squareup.moshi.Util: boolean hasNullable(java.lang.'annotation'.Annotation[])>($r9);

        $r11 = new com.squareup.moshi.AdapterMethodsFactory$5;

        specialinvoke $r11.<com.squareup.moshi.AdapterMethodsFactory$5: void <init>(java.lang.reflect.Type,java.util.Set,java.lang.Object,java.lang.reflect.Method,boolean,java.lang.reflect.Type[],java.util.Set)>($r3, $r6, $r0, $r1, $z0, $r2, $r10);

        return $r11;

     label2:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected signature for ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n@FromJson method signatures may have one of the following structures:\n    <any access modifier> void fromJson(JsonReader jsonReader) throws <any>;\n    <any access modifier> R fromJson(T value) throws <any>;\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r12;
    }
    private static com.squareup.moshi.AdapterMethodsFactory$AdapterMethod get(java.util.List, java.lang.reflect.Type, java.util.Set)
    {
        java.util.List r0;
        java.lang.reflect.Type $r1, $r5;
        java.util.Set r2, $r6;
        int i0, $i1;
        java.lang.Object $r3;
        com.squareup.moshi.AdapterMethodsFactory$AdapterMethod r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $r1 := @parameter1: java.lang.reflect.Type;

        r2 := @parameter2: java.util.Set;

        i0 = 0;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

     label1:
        if i0 >= $i1 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (com.squareup.moshi.AdapterMethodsFactory$AdapterMethod) $r3;

        $r5 = r4.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Type type>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r6 = r4.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.util.Set annotations>;

        $z0 = interfaceinvoke $r6.<java.util.Set: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }
    public static com.squareup.moshi.AdapterMethodsFactory get(java.lang.Object)
    {
        java.lang.Object $r0;
        java.util.ArrayList r1, r3;
        java.lang.reflect.Method r2;
        java.lang.Class $r4;
        java.lang.reflect.Method[] $r5;
        int $i0, $i1;
        boolean $z0;
        com.squareup.moshi.AdapterMethodsFactory$AdapterMethod $r6, $r9;
        java.lang.reflect.Type $r7;
        java.util.Set $r8;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        com.squareup.moshi.AdapterMethodsFactory $r13;

        $r0 := @parameter0: java.lang.Object;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if $r4 == class "Ljava/lang/Object;" goto label8;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label7;

        r2 = $r5[$i1];

        $z0 = virtualinvoke r2.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/squareup/moshi/ToJson;");

        if $z0 == 0 goto label4;

        $r6 = staticinvoke <com.squareup.moshi.AdapterMethodsFactory: com.squareup.moshi.AdapterMethodsFactory$AdapterMethod toAdapter(java.lang.Object,java.lang.reflect.Method)>($r0, r2);

        $r7 = $r6.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Type type>;

        $r8 = $r6.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.util.Set annotations>;

        $r9 = staticinvoke <com.squareup.moshi.AdapterMethodsFactory: com.squareup.moshi.AdapterMethodsFactory$AdapterMethod get(java.util.List,java.lang.reflect.Type,java.util.Set)>(r3, $r7, $r8);

        if $r9 == null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting @ToJson methods:\n    ");

        r2 = $r9.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Method method>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        r2 = $r6.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Method method>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label3:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        $z0 = virtualinvoke r2.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/squareup/moshi/FromJson;");

        if $z0 == 0 goto label6;

        $r6 = staticinvoke <com.squareup.moshi.AdapterMethodsFactory: com.squareup.moshi.AdapterMethodsFactory$AdapterMethod fromAdapter(java.lang.Object,java.lang.reflect.Method)>($r0, r2);

        $r7 = $r6.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Type type>;

        $r8 = $r6.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.util.Set annotations>;

        $r9 = staticinvoke <com.squareup.moshi.AdapterMethodsFactory: com.squareup.moshi.AdapterMethodsFactory$AdapterMethod get(java.util.List,java.lang.reflect.Type,java.util.Set)>(r1, $r7, $r8);

        if $r9 == null goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting @FromJson methods:\n    ");

        r2 = $r9.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Method method>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        r2 = $r6.<com.squareup.moshi.AdapterMethodsFactory$AdapterMethod: java.lang.reflect.Method method>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label5:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label6:
        $i1 = $i1 + 1;

        goto label2;

     label7:
        $r4 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label8:
        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected at least one @ToJson or @FromJson method on ");

        $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label9:
        $r13 = new com.squareup.moshi.AdapterMethodsFactory;

        specialinvoke $r13.<com.squareup.moshi.AdapterMethodsFactory: void <init>(java.util.List,java.util.List)>(r3, r1);

        return $r13;
    }
    static com.squareup.moshi.AdapterMethodsFactory$AdapterMethod toAdapter(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object $r0;
        java.lang.reflect.Method $r1;
        java.lang.reflect.Type[] $r2;
        java.lang.reflect.Type $r3, $r4;
        int $i0;
        java.lang.Class $r5;
        java.lang.'annotation'.Annotation[][] $r6;
        java.lang.'annotation'.Annotation[] $r7;
        java.util.Set $r8, $r10;
        com.squareup.moshi.AdapterMethodsFactory$2 $r9;
        boolean $z0;
        com.squareup.moshi.AdapterMethodsFactory$3 $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.reflect.Method;

        virtualinvoke $r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $i0 = lengthof $r2;

        if $i0 != 2 goto label1;

        $r4 = $r2[0];

        if $r4 != class "Lcom/squareup/moshi/JsonWriter;" goto label1;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        if $r3 != $r5 goto label1;

        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r7 = $r6[1];

        $r8 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.'annotation'.Annotation[])>($r7);

        $r9 = new com.squareup.moshi.AdapterMethodsFactory$2;

        $r3 = $r2[1];

        specialinvoke $r9.<com.squareup.moshi.AdapterMethodsFactory$2: void <init>(java.lang.reflect.Type,java.util.Set,java.lang.Object,java.lang.reflect.Method,boolean)>($r3, $r8, $r0, $r1, 0);

        return $r9;

     label1:
        $i0 = lengthof $r2;

        if $i0 != 1 goto label2;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        if $r3 == $r5 goto label2;

        $r8 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.reflect.AnnotatedElement)>($r1);

        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r7 = $r6[0];

        $r10 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.'annotation'.Annotation[])>($r7);

        $r7 = $r6[0];

        $z0 = staticinvoke <com.squareup.moshi.Util: boolean hasNullable(java.lang.'annotation'.Annotation[])>($r7);

        $r11 = new com.squareup.moshi.AdapterMethodsFactory$3;

        $r4 = $r2[0];

        specialinvoke $r11.<com.squareup.moshi.AdapterMethodsFactory$3: void <init>(java.lang.reflect.Type,java.util.Set,java.lang.Object,java.lang.reflect.Method,boolean,java.lang.reflect.Type,java.util.Set)>($r4, $r10, $r0, $r1, $z0, $r3, $r8);

        return $r11;

     label2:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected signature for ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n@ToJson method signatures may have one of the following structures:\n    <any access modifier> void toJson(JsonWriter writer, T value) throws <any>;\n    <any access modifier> R toJson(T value) throws <any>;\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r12;
    }
    public com.squareup.moshi.JsonAdapter create(java.lang.reflect.Type, java.util.Set, com.squareup.moshi.Moshi)
    {
        com.squareup.moshi.AdapterMethodsFactory r0;
        java.lang.reflect.Type $r1;
        java.util.Set r2;
        com.squareup.moshi.Moshi $r3;
        java.lang.IllegalArgumentException r4;
        java.util.List $r5;
        com.squareup.moshi.AdapterMethodsFactory$AdapterMethod $r6, $r7;
        com.squareup.moshi.JsonAdapter $r8;
        com.squareup.moshi.AdapterMethodsFactory$1 $r9;
        java.lang.String r10;
        java.lang.StringBuilder $r11;

        r0 := @this: com.squareup.moshi.AdapterMethodsFactory;

        $r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.util.Set;

        $r3 := @parameter2: com.squareup.moshi.Moshi;

        $r5 = r0.<com.squareup.moshi.AdapterMethodsFactory: java.util.List toAdapters>;

        $r6 = staticinvoke <com.squareup.moshi.AdapterMethodsFactory: com.squareup.moshi.AdapterMethodsFactory$AdapterMethod get(java.util.List,java.lang.reflect.Type,java.util.Set)>($r5, $r1, r2);

        $r5 = r0.<com.squareup.moshi.AdapterMethodsFactory: java.util.List fromAdapters>;

        $r7 = staticinvoke <com.squareup.moshi.AdapterMethodsFactory: com.squareup.moshi.AdapterMethodsFactory$AdapterMethod get(java.util.List,java.lang.reflect.Type,java.util.Set)>($r5, $r1, r2);

        if $r6 != null goto label1;

        if $r7 != null goto label1;

        return null;

     label1:
        if $r6 == null goto label2;

        if $r7 != null goto label7;

     label2:
        $r8 = virtualinvoke $r3.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter nextAdapter(com.squareup.moshi.JsonAdapter$Factory,java.lang.reflect.Type,java.util.Set)>(r0, $r1, r2);

     label3:
        $r9 = new com.squareup.moshi.AdapterMethodsFactory$1;

        specialinvoke $r9.<com.squareup.moshi.AdapterMethodsFactory$1: void <init>(com.squareup.moshi.AdapterMethodsFactory,com.squareup.moshi.AdapterMethodsFactory$AdapterMethod,com.squareup.moshi.JsonAdapter,com.squareup.moshi.Moshi,com.squareup.moshi.AdapterMethodsFactory$AdapterMethod,java.util.Set,java.lang.reflect.Type)>(r0, $r6, $r8, $r3, $r7, r2, $r1);

        return $r9;

     label4:
        r4 := @caughtexception;

        if $r6 != null goto label6;

        r10 = "@ToJson";

     label5:
        r4 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" adapter for ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" annotated ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r10);

        throw r4;

     label6:
        r10 = "@FromJson";

        goto label5;

     label7:
        $r8 = null;

        goto label3;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }
