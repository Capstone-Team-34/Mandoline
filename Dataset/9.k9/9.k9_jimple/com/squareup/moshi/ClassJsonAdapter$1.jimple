com.squareup.moshi.ClassJsonAdapter$1 extends java.lang.Object implements com.squareup.moshi.JsonAdapter$Factory
    void <init>()
    {
        com.squareup.moshi.ClassJsonAdapter$1 r0;

        r0 := @this: com.squareup.moshi.ClassJsonAdapter$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private void createFieldBindings(com.squareup.moshi.Moshi, java.lang.reflect.Type, java.util.Map)
    {
        com.squareup.moshi.ClassJsonAdapter$1 r0;
        com.squareup.moshi.Moshi $r1;
        java.lang.reflect.Type $r2, $r8;
        java.util.Map r3;
        java.lang.reflect.Field r4;
        com.squareup.moshi.ClassJsonAdapter$FieldBinding r5, r15;
        java.lang.Class $r6;
        boolean $z0, $z1;
        java.lang.reflect.Field[] $r7;
        int $i0, $i1, $i2;
        java.util.Set $r9;
        com.squareup.moshi.JsonAdapter $r10;
        java.lang.'annotation'.Annotation $r11;
        com.squareup.moshi.Json r12;
        java.lang.String $r13;
        java.lang.Object $r14;
        java.lang.IllegalArgumentException $r16;
        java.lang.StringBuilder $r17;

        r0 := @this: com.squareup.moshi.ClassJsonAdapter$1;

        $r1 := @parameter0: com.squareup.moshi.Moshi;

        $r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.util.Map;

        $r6 = staticinvoke <com.squareup.moshi.Types: java.lang.Class getRawType(java.lang.reflect.Type)>($r2);

        $z0 = specialinvoke r0.<com.squareup.moshi.ClassJsonAdapter$1: boolean isPlatformType(java.lang.Class)>($r6);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r7;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label6;

        r4 = $r7[$i1];

        $i2 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = specialinvoke r0.<com.squareup.moshi.ClassJsonAdapter$1: boolean includeField(boolean,int)>($z0, $i2);

        if $z1 != 0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r8 = staticinvoke <com.squareup.moshi.Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)>($r2, $r6, $r8);

        $r9 = staticinvoke <com.squareup.moshi.Util: java.util.Set jsonAnnotations(java.lang.reflect.AnnotatedElement)>(r4);

        $r10 = virtualinvoke $r1.<com.squareup.moshi.Moshi: com.squareup.moshi.JsonAdapter adapter(java.lang.reflect.Type,java.util.Set)>($r8, $r9);

        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r11 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/squareup/moshi/Json;");

        r12 = (com.squareup.moshi.Json) $r11;

        if r12 == null goto label5;

        $r13 = interfaceinvoke r12.<com.squareup.moshi.Json: java.lang.String name()>();

     label4:
        r5 = new com.squareup.moshi.ClassJsonAdapter$FieldBinding;

        specialinvoke r5.<com.squareup.moshi.ClassJsonAdapter$FieldBinding: void <init>(java.lang.String,java.lang.reflect.Field,com.squareup.moshi.JsonAdapter)>($r13, r4, $r10);

        $r14 = interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r5);

        r15 = (com.squareup.moshi.ClassJsonAdapter$FieldBinding) $r14;

        if r15 == null goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Conflicting fields:\n    ");

        r4 = r15.<com.squareup.moshi.ClassJsonAdapter$FieldBinding: java.lang.reflect.Field field>;

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        r4 = r5.<com.squareup.moshi.ClassJsonAdapter$FieldBinding: java.lang.reflect.Field field>;

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r16;

     label5:
        $r13 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        goto label4;

     label6:
        return;
    }
    private boolean includeField(boolean, int)
    {
        com.squareup.moshi.ClassJsonAdapter$1 r0;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.squareup.moshi.ClassJsonAdapter$1;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label3;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 != 0 goto label2;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i0);

        if $z1 != 0 goto label2;

        if $z0 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }
    private boolean isPlatformType(java.lang.Class)
    {
        com.squareup.moshi.ClassJsonAdapter$1 r0;
        java.lang.Class r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.squareup.moshi.ClassJsonAdapter$1;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("javax.");

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("android.");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public com.squareup.moshi.JsonAdapter create(java.lang.reflect.Type, java.util.Set, com.squareup.moshi.Moshi)
    {
        com.squareup.moshi.ClassJsonAdapter$1 r0;
        java.lang.reflect.Type $r1;
        java.util.Set r2;
        com.squareup.moshi.Moshi $r3;
        java.util.TreeMap r4;
        java.lang.Class $r5, $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        int $i0;
        com.squareup.moshi.ClassFactory $r10;
        com.squareup.moshi.ClassJsonAdapter $r11;
        com.squareup.moshi.JsonAdapter $r12;

        r0 := @this: com.squareup.moshi.ClassJsonAdapter$1;

        $r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.util.Set;

        $r3 := @parameter2: com.squareup.moshi.Moshi;

        $r5 = staticinvoke <com.squareup.moshi.Types: java.lang.Class getRawType(java.lang.reflect.Type)>($r1);

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label8;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z0 = specialinvoke r0.<com.squareup.moshi.ClassJsonAdapter$1: boolean isPlatformType(java.lang.Class)>($r5);

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Platform ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" annotated ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires explicit JsonAdapter to be registered");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label2:
        $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label8;

        $r9 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r9 == null goto label4;

        $i0 = virtualinvoke $r5.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label4;

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot serialize anonymous class ");

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot serialize non-static nested class ");

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label4:
        $i0 = virtualinvoke $r5.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 == 0 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot serialize abstract class ");

        $r8 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label5:
        $r10 = staticinvoke <com.squareup.moshi.ClassFactory: com.squareup.moshi.ClassFactory get(java.lang.Class)>($r5);

        r4 = new java.util.TreeMap;

        specialinvoke r4.<java.util.TreeMap: void <init>()>();

     label6:
        if $r1 == class "Ljava/lang/Object;" goto label7;

        specialinvoke r0.<com.squareup.moshi.ClassJsonAdapter$1: void createFieldBindings(com.squareup.moshi.Moshi,java.lang.reflect.Type,java.util.Map)>($r3, $r1, r4);

        $r1 = staticinvoke <com.squareup.moshi.Types: java.lang.reflect.Type getGenericSuperclass(java.lang.reflect.Type)>($r1);

        goto label6;

     label7:
        $r11 = new com.squareup.moshi.ClassJsonAdapter;

        specialinvoke $r11.<com.squareup.moshi.ClassJsonAdapter: void <init>(com.squareup.moshi.ClassFactory,java.util.Map)>($r10, r4);

        $r12 = virtualinvoke $r11.<com.squareup.moshi.ClassJsonAdapter: com.squareup.moshi.JsonAdapter nullSafe()>();

        return $r12;

     label8:
        return null;
    }
