com.beetstra.jutf7.UTF7StyleCharsetDecoder extends java.nio.charset.CharsetDecoder
private final com.beetstra.jutf7.Base64Util base64
private boolean base64mode
private int bitsRead
private boolean justShifted
private boolean justUnshifted
private final byte shift
private final boolean strict
private int tempChar
private final byte unshift
    void <init>(com.beetstra.jutf7.UTF7StyleCharset, com.beetstra.jutf7.Base64Util, boolean)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        com.beetstra.jutf7.UTF7StyleCharset $r1;
        com.beetstra.jutf7.Base64Util $r2;
        boolean $z0;
        byte $b0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $r1 := @parameter0: com.beetstra.jutf7.UTF7StyleCharset;

        $r2 := @parameter1: com.beetstra.jutf7.Base64Util;

        $z0 := @parameter2: boolean;

        specialinvoke r0.<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>($r1, 0.6F, 1.0F);

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: com.beetstra.jutf7.Base64Util base64> = $r2;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict> = $z0;

        $b0 = virtualinvoke $r1.<com.beetstra.jutf7.UTF7StyleCharset: byte shift()>();

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte shift> = $b0;

        $b0 = virtualinvoke $r1.<com.beetstra.jutf7.UTF7StyleCharset: byte unshift()>();

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte unshift> = $b0;

        return;
    }
    private boolean base64bitsWaiting()
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        int $i0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $i0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        if $i0 != 0 goto label1;

        $i0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        if $i0 < 6 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    private java.nio.charset.CoderResult handleBase64(java.nio.ByteBuffer, java.nio.CharBuffer, byte)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer $r1;
        java.nio.CharBuffer $r2;
        byte $b0;
        java.nio.charset.CoderResult r3;
        com.beetstra.jutf7.Base64Util $r4;
        int $i1, $i2, $i3;
        char $c4;
        boolean $z0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 := @parameter1: java.nio.CharBuffer;

        $b0 := @parameter2: byte;

        r3 = null;

        $r4 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: com.beetstra.jutf7.Base64Util base64>;

        $i1 = virtualinvoke $r4.<com.beetstra.jutf7.Base64Util: int getSextet(byte)>($b0);

        if $i1 < 0 goto label3;

        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i2 = $i2 + 6;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead> = $i2;

        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        if $i2 >= 16 goto label2;

        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        $i3 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i3 = 16 - $i3;

        $i1 = $i1 << $i3;

        $i1 = $i2 + $i1;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = $i1;

     label1:
        return r3;

     label2:
        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i2 = $i2 + -16;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead> = $i2;

        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        $i3 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i3 = $i1 >> $i3;

        $i2 = $i2 + $i3;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = $i2;

        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        $c4 = (char) $i2;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c4);

        $i2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i2 = 16 - $i2;

        $i1 = $i1 << $i2;

        $i1 = $i1 & 65535;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = $i1;

        goto label1;

     label3:
        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict>;

        if $z0 == 0 goto label4;

        r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>($r1);

        return r3;

     label4:
        $c4 = (char) $b0;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c4);

        $z0 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64bitsWaiting()>();

        if $z0 == 0 goto label5;

        r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>($r1);

     label5:
        specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: void setUnshifted()>();

        goto label1;
    }
    private java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer $r1;
        int $i0;
        java.nio.charset.CoderResult $r2;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i0 = $i0 + -1;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        $r2 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);

        return $r2;
    }
    private java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer $r1;
        int $i0;
        java.nio.charset.CoderResult r2;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i0 = $i0 + -1;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        r2 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        return r2;
    }
    private void setUnshifted()
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode> = 0;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead> = 0;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = 0;

        return;
    }
    protected java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer, java.nio.CharBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer $r1;
        java.nio.CharBuffer $r2;
        boolean $z0;
        byte $b0, $b1;
        java.nio.charset.CoderResult $r3;
        char $c2;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 := @parameter1: java.nio.CharBuffer;

     label01:
        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label13;

        $b0 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode>;

        if $z0 == 0 goto label09;

        $b1 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte unshift>;

        if $b0 != $b1 goto label07;

        $z0 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64bitsWaiting()>();

        if $z0 == 0 goto label02;

        $r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>($r1);

        return $r3;

     label02:
        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justShifted>;

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label03;

        $r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)>($r1);

        return $r3;

     label03:
        $b0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte shift>;

        $c2 = (char) $b0;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c2);

     label04:
        specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: void setUnshifted()>();

     label05:
        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justShifted> = 0;

        goto label01;

     label06:
        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted> = 1;

        goto label04;

     label07:
        $z0 = virtualinvoke $r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label08;

        $r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)>($r1);

        return $r3;

     label08:
        $r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult handleBase64(java.nio.ByteBuffer,java.nio.CharBuffer,byte)>($r1, $r2, $b0);

        if $r3 == null goto label05;

        return $r3;

     label09:
        $b1 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte shift>;

        if $b0 != $b1 goto label11;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode> = 1;

        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted>;

        if $z0 == 0 goto label10;

        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict>;

        if $z0 == 0 goto label10;

        $r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>($r1);

        return $r3;

     label10:
        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justShifted> = 1;

        goto label01;

     label11:
        $z0 = virtualinvoke $r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label12;

        $r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)>($r1);

        return $r3;

     label12:
        $c2 = (char) $b0;

        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c2);

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted> = 0;

        goto label01;

     label13:
        $r3 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r3;
    }
    protected java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.CharBuffer $r1;
        boolean $z0;
        java.nio.charset.CoderResult $r2;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $r1 := @parameter0: java.nio.CharBuffer;

        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode>;

        if $z0 == 0 goto label1;

        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict>;

        if $z0 != 0 goto label2;

     label1:
        $z0 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64bitsWaiting()>();

        if $z0 == 0 goto label3;

     label2:
        $r2 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);

        return $r2;

     label3:
        $r2 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r2;
    }
    protected void implReset()
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: void setUnshifted()>();

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted> = 0;

        return;
    }
