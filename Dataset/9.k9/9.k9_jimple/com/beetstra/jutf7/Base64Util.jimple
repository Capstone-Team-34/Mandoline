com.beetstra.jutf7.Base64Util extends java.lang.Object
private static final int ALPHABET_LENGTH
private final char[] alphabet
private final int[] inverseAlphabet
    void <init>(java.lang.String)
    {
        com.beetstra.jutf7.Base64Util r0;
        java.lang.String $r1;
        char c0;
        char[] $r2;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuffer $r4;
        int[] $r5;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        r0.<com.beetstra.jutf7.Base64Util: char[] alphabet> = $r2;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 == 64 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("alphabet has incorrect length (should be 64, not ");

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        $r5 = newarray (int)[128];

        r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet> = $r5;

        $r5 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r5, -1);

        $i1 = 0;

     label2:
        $r2 = r0.<com.beetstra.jutf7.Base64Util: char[] alphabet>;

        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label4;

        $r2 = r0.<com.beetstra.jutf7.Base64Util: char[] alphabet>;

        c0 = $r2[$i1];

        if c0 < 128 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid character in alphabet: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r1 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label3:
        $r5 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        $r5[c0] = $i1;

        $i1 = $i1 + 1;

        goto label2;

     label4:
        return;
    }
    boolean contains(char)
    {
        com.beetstra.jutf7.Base64Util r0;
        char $c0;
        int[] $r1;
        int $i1;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        $c0 := @parameter0: char;

        if $c0 < 128 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        $i1 = $r1[$c0];

        if $i1 < 0 goto label2;

        return 1;

     label2:
        return 0;
    }
    byte getChar(int)
    {
        com.beetstra.jutf7.Base64Util r0;
        int $i0;
        char[] $r1;
        char $c1;
        byte $b2;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        $i0 := @parameter0: int;

        $r1 = r0.<com.beetstra.jutf7.Base64Util: char[] alphabet>;

        $c1 = $r1[$i0];

        $b2 = (byte) $c1;

        return $b2;
    }
    int getSextet(byte)
    {
        com.beetstra.jutf7.Base64Util r0;
        byte $b0;
        int[] $r1;
        int $i1;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        $b0 := @parameter0: byte;

        if $b0 < 128 goto label1;

        return -1;

     label1:
        $r1 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        $i1 = $r1[$b0];

        return $i1;
    }
