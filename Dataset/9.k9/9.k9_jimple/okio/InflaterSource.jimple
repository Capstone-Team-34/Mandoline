okio.InflaterSource extends java.lang.Object implements okio.Source
private int bufferBytesHeldByInflater
private boolean closed
private final java.util.zip.Inflater inflater
private final okio.BufferedSource source
    void <init>(okio.BufferedSource, java.util.zip.Inflater)
    {
        okio.InflaterSource r0;
        okio.BufferedSource $r1;
        java.util.zip.Inflater $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: okio.InflaterSource;

        $r1 := @parameter0: okio.BufferedSource;

        $r2 := @parameter1: java.util.zip.Inflater;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source == null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inflater == null");

        throw $r3;

     label2:
        r0.<okio.InflaterSource: okio.BufferedSource source> = $r1;

        r0.<okio.InflaterSource: java.util.zip.Inflater inflater> = $r2;

        return;
    }
    public void <init>(okio.Source, java.util.zip.Inflater)
    {
        okio.InflaterSource r0;
        okio.Source $r1;
        java.util.zip.Inflater $r2;
        okio.BufferedSource $r3;

        r0 := @this: okio.InflaterSource;

        $r1 := @parameter0: okio.Source;

        $r2 := @parameter1: java.util.zip.Inflater;

        $r3 = staticinvoke <okio.Okio: okio.BufferedSource buffer(okio.Source)>($r1);

        specialinvoke r0.<okio.InflaterSource: void <init>(okio.BufferedSource,java.util.zip.Inflater)>($r3, $r2);

        return;
    }
    private void releaseInflatedBytes() throws java.io.IOException
    {
        okio.InflaterSource r0;
        int i0, $i1;
        java.util.zip.Inflater $r1;
        okio.BufferedSource $r2;
        long $l2;

        r0 := @this: okio.InflaterSource;

        i0 = r0.<okio.InflaterSource: int bufferBytesHeldByInflater>;

        if i0 != 0 goto label1;

        return;

     label1:
        $i1 = r0.<okio.InflaterSource: int bufferBytesHeldByInflater>;

        $r1 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

        i0 = virtualinvoke $r1.<java.util.zip.Inflater: int getRemaining()>();

        i0 = $i1 - i0;

        $i1 = r0.<okio.InflaterSource: int bufferBytesHeldByInflater>;

        $i1 = $i1 - i0;

        r0.<okio.InflaterSource: int bufferBytesHeldByInflater> = $i1;

        $r2 = r0.<okio.InflaterSource: okio.BufferedSource source>;

        $l2 = (long) i0;

        interfaceinvoke $r2.<okio.BufferedSource: void skip(long)>($l2);

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.InflaterSource r0;
        boolean $z0;
        java.util.zip.Inflater $r1;
        okio.BufferedSource $r2;

        r0 := @this: okio.InflaterSource;

        $z0 = r0.<okio.InflaterSource: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

        r0.<okio.InflaterSource: boolean closed> = 1;

        $r2 = r0.<okio.InflaterSource: okio.BufferedSource source>;

        interfaceinvoke $r2.<okio.BufferedSource: void close()>();

        return;
    }
    public long read(okio.Buffer, long) throws java.io.IOException
    {
        okio.InflaterSource r0;
        okio.Buffer $r1;
        long $l0, $l4;
        java.util.zip.DataFormatException r2;
        byte $b1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r6;
        okio.Segment $r7, $r10;
        java.util.zip.Inflater $r8;
        byte[] $r9;
        int $i2, $i3;
        java.io.EOFException $r11;
        java.io.IOException $r12;

        r0 := @this: okio.InflaterSource;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label01:
        $z0 = r0.<okio.InflaterSource: boolean closed>;

        if $z0 == 0 goto label02;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r6;

     label02:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label03;

        return 0L;

     label03:
        $z0 = virtualinvoke r0.<okio.InflaterSource: boolean refill()>();

     label04:
        $r7 = virtualinvoke $r1.<okio.Buffer: okio.Segment writableSegment(int)>(1);

     label05:
        $r8 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

        $r9 = $r7.<okio.Segment: byte[] data>;

        $i2 = $r7.<okio.Segment: int limit>;

        $i3 = $r7.<okio.Segment: int limit>;

        $i3 = 8192 - $i3;

     label06:
        $i2 = virtualinvoke $r8.<java.util.zip.Inflater: int inflate(byte[],int,int)>($r9, $i2, $i3);

     label07:
        if $i2 <= 0 goto label08;

        $i3 = $r7.<okio.Segment: int limit>;

        $i3 = $i3 + $i2;

        $r7.<okio.Segment: int limit> = $i3;

        $l0 = $r1.<okio.Buffer: long size>;

        $l4 = (long) $i2;

        $l0 = $l0 + $l4;

        $r1.<okio.Buffer: long size> = $l0;

        $l0 = (long) $i2;

        return $l0;

     label08:
        $r8 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

     label09:
        $z1 = virtualinvoke $r8.<java.util.zip.Inflater: boolean finished()>();

     label10:
        if $z1 != 0 goto label13;

        $r8 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

     label11:
        $z1 = virtualinvoke $r8.<java.util.zip.Inflater: boolean needsDictionary()>();

     label12:
        if $z1 == 0 goto label19;

     label13:
        specialinvoke r0.<okio.InflaterSource: void releaseInflatedBytes()>();

     label14:
        $i2 = $r7.<okio.Segment: int pos>;

        $i3 = $r7.<okio.Segment: int limit>;

        if $i2 != $i3 goto label18;

     label15:
        $r10 = virtualinvoke $r7.<okio.Segment: okio.Segment pop()>();

     label16:
        $r1.<okio.Buffer: okio.Segment head> = $r10;

     label17:
        staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r7);

     label18:
        return -1L;

     label19:
        if $z0 == 0 goto label03;

        $r11 = new java.io.EOFException;

     label20:
        specialinvoke $r11.<java.io.EOFException: void <init>(java.lang.String)>("source exhausted prematurely");

     label21:
        throw $r11;

     label22:
        r2 := @caughtexception;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.Throwable)>(r2);

        throw $r12;

        catch java.util.zip.DataFormatException from label04 to label05 with label22;
        catch java.util.zip.DataFormatException from label06 to label07 with label22;
        catch java.util.zip.DataFormatException from label09 to label10 with label22;
        catch java.util.zip.DataFormatException from label11 to label12 with label22;
        catch java.util.zip.DataFormatException from label13 to label14 with label22;
        catch java.util.zip.DataFormatException from label15 to label16 with label22;
        catch java.util.zip.DataFormatException from label17 to label18 with label22;
        catch java.util.zip.DataFormatException from label20 to label21 with label22;
    }
    public boolean refill() throws java.io.IOException
    {
        okio.InflaterSource r0;
        okio.Segment r1;
        int $i0, $i1;
        java.util.zip.Inflater $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        okio.BufferedSource $r4;
        okio.Buffer $r5;
        byte[] $r6;

        r0 := @this: okio.InflaterSource;

        $r2 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

        $z0 = virtualinvoke $r2.<java.util.zip.Inflater: boolean needsInput()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<okio.InflaterSource: void releaseInflatedBytes()>();

        $r2 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

        $i0 = virtualinvoke $r2.<java.util.zip.Inflater: int getRemaining()>();

        if $i0 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("?");

        throw $r3;

     label2:
        $r4 = r0.<okio.InflaterSource: okio.BufferedSource source>;

        $z0 = interfaceinvoke $r4.<okio.BufferedSource: boolean exhausted()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r4 = r0.<okio.InflaterSource: okio.BufferedSource source>;

        $r5 = interfaceinvoke $r4.<okio.BufferedSource: okio.Buffer buffer()>();

        r1 = $r5.<okio.Buffer: okio.Segment head>;

        $i0 = r1.<okio.Segment: int limit>;

        $i1 = r1.<okio.Segment: int pos>;

        $i0 = $i0 - $i1;

        r0.<okio.InflaterSource: int bufferBytesHeldByInflater> = $i0;

        $r2 = r0.<okio.InflaterSource: java.util.zip.Inflater inflater>;

        $r6 = r1.<okio.Segment: byte[] data>;

        $i0 = r1.<okio.Segment: int pos>;

        $i1 = r0.<okio.InflaterSource: int bufferBytesHeldByInflater>;

        virtualinvoke $r2.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r6, $i0, $i1);

        return 0;
    }
    public okio.Timeout timeout()
    {
        okio.InflaterSource r0;
        okio.Timeout $r1;
        okio.BufferedSource $r2;

        r0 := @this: okio.InflaterSource;

        $r2 = r0.<okio.InflaterSource: okio.BufferedSource source>;

        $r1 = interfaceinvoke $r2.<okio.BufferedSource: okio.Timeout timeout()>();

        return $r1;
    }
