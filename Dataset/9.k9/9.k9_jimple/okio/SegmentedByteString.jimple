okio.SegmentedByteString extends okio.ByteString
final transient int[] directory
final transient byte[][] segments
    void <init>(okio.Buffer, int)
    {
        okio.SegmentedByteString r0;
        okio.Buffer $r1;
        int $i0, i3, i4, $i5, $i6;
        long $l1, $l2;
        okio.Segment r2;
        java.lang.AssertionError $r3;
        byte[][] $r4;
        int[] $r5;
        byte[] $r6;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: okio.Buffer;

        $i0 := @parameter1: int;

        specialinvoke r0.<okio.ByteString: void <init>(byte[])>(null);

        $l2 = $r1.<okio.Buffer: long size>;

        $l1 = (long) $i0;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l2, 0L, $l1);

        i3 = 0;

        i4 = 0;

        r2 = $r1.<okio.Buffer: okio.Segment head>;

     label1:
        if i3 >= $i0 goto label3;

        $i5 = r2.<okio.Segment: int limit>;

        $i6 = r2.<okio.Segment: int pos>;

        if $i5 != $i6 goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("s.limit == s.pos");

        throw $r3;

     label2:
        $i5 = r2.<okio.Segment: int limit>;

        $i6 = r2.<okio.Segment: int pos>;

        $i5 = $i5 - $i6;

        i3 = i3 + $i5;

        i4 = i4 + 1;

        r2 = r2.<okio.Segment: okio.Segment next>;

        goto label1;

     label3:
        $r4 = newarray (byte[])[i4];

        r0.<okio.SegmentedByteString: byte[][] segments> = $r4;

        i3 = i4 * 2;

        $r5 = newarray (int)[i3];

        r0.<okio.SegmentedByteString: int[] directory> = $r5;

        i3 = 0;

        i4 = 0;

        r2 = $r1.<okio.Buffer: okio.Segment head>;

     label4:
        if i3 >= $i0 goto label6;

        $r4 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r6 = r2.<okio.Segment: byte[] data>;

        $r4[i4] = $r6;

        $i5 = r2.<okio.Segment: int limit>;

        $i6 = r2.<okio.Segment: int pos>;

        $i5 = $i5 - $i6;

        i3 = i3 + $i5;

        if i3 <= $i0 goto label5;

        i3 = $i0;

     label5:
        $r5 = r0.<okio.SegmentedByteString: int[] directory>;

        $r5[i4] = i3;

        $r5 = r0.<okio.SegmentedByteString: int[] directory>;

        $r4 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $i5 = lengthof $r4;

        $i5 = $i5 + i4;

        $i6 = r2.<okio.Segment: int pos>;

        $r5[$i5] = $i6;

        r2.<okio.Segment: boolean shared> = 1;

        i4 = i4 + 1;

        r2 = r2.<okio.Segment: okio.Segment next>;

        goto label4;

     label6:
        return;
    }
    private int segment(int)
    {
        okio.SegmentedByteString r0;
        int $i0, $i1;
        int[] $r1;
        byte[][] $r2;

        r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $r1 = r0.<okio.SegmentedByteString: int[] directory>;

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $i1 = lengthof $r2;

        $i0 = $i0 + 1;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(int[],int,int,int)>($r1, 0, $i1, $i0);

        if $i0 < 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 ^ -1;

        return $i0;
    }
    private okio.ByteString toByteString()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        byte[] $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = new okio.ByteString;

        $r2 = virtualinvoke r0.<okio.SegmentedByteString: byte[] toByteArray()>();

        specialinvoke $r1.<okio.ByteString: void <init>(byte[])>($r2);

        return $r1;
    }
    private java.lang.Object writeReplace()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        return $r1;
    }
    public java.nio.ByteBuffer asByteBuffer()
    {
        okio.SegmentedByteString r0;
        byte[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = virtualinvoke r0.<okio.SegmentedByteString: byte[] toByteArray()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        return $r2;
    }
    public java.lang.String base64()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String base64()>();

        return $r2;
    }
    public java.lang.String base64Url()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String base64Url()>();

        return $r2;
    }
    public boolean equals(java.lang.Object)
    {
        okio.SegmentedByteString r0;
        java.lang.Object r1;
        boolean $z0;
        okio.ByteString $r2;
        int $i0, $i1;

        r0 := @this: okio.SegmentedByteString;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof okio.ByteString;

        if $z0 == 0 goto label3;

        $r2 = (okio.ByteString) r1;

        $i0 = virtualinvoke $r2.<okio.ByteString: int size()>();

        $i1 = virtualinvoke r0.<okio.SegmentedByteString: int size()>();

        if $i0 != $i1 goto label3;

        $r2 = (okio.ByteString) r1;

        $i0 = virtualinvoke r0.<okio.SegmentedByteString: int size()>();

        $z0 = virtualinvoke r0.<okio.SegmentedByteString: boolean rangeEquals(int,okio.ByteString,int,int)>(0, $r2, 0, $i0);

        if $z0 == 0 goto label3;

        $z0 = 1;

     label2:
        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }
    public byte getByte(int)
    {
        okio.SegmentedByteString r0;
        int $i0, i2, $i3, i5;
        long $l1, $l4;
        int[] $r1;
        byte[][] $r2;
        byte[] $r3;
        byte $b6;

        r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $r1 = r0.<okio.SegmentedByteString: int[] directory>;

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $i3 = lengthof $r2;

        $i3 = $i3 + -1;

        $i3 = $r1[$i3];

        $l4 = (long) $i3;

        $l1 = (long) $i0;

        staticinvoke <okio.Util: void checkOffsetAndCount(long,long,long)>($l4, $l1, 1L);

        $i3 = specialinvoke r0.<okio.SegmentedByteString: int segment(int)>($i0);

        if $i3 != 0 goto label2;

        i5 = 0;

     label1:
        $r1 = r0.<okio.SegmentedByteString: int[] directory>;

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i2 = lengthof $r2;

        i2 = i2 + $i3;

        i2 = $r1[i2];

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r3 = $r2[$i3];

        $i0 = $i0 - i5;

        $i0 = $i0 + i2;

        $b6 = $r3[$i0];

        return $b6;

     label2:
        $r1 = r0.<okio.SegmentedByteString: int[] directory>;

        i5 = $i3 + -1;

        i5 = $r1[i5];

        goto label1;
    }
    public int hashCode()
    {
        okio.SegmentedByteString r0;
        int i0, i1, i2, i3, i4, i5, i6;
        byte[] r1;
        byte[][] $r2;
        int[] $r3;
        byte $b7;

        r0 := @this: okio.SegmentedByteString;

        i2 = r0.<okio.SegmentedByteString: int hashCode>;

        if i2 == 0 goto label1;

        return i2;

     label1:
        i4 = 1;

        i5 = 0;

        i6 = 0;

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i2 = lengthof $r2;

     label2:
        if i6 >= i2 goto label5;

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        r1 = $r2[i6];

        $r3 = r0.<okio.SegmentedByteString: int[] directory>;

        i1 = i2 + i6;

        i0 = $r3[i1];

        $r3 = r0.<okio.SegmentedByteString: int[] directory>;

        i1 = $r3[i6];

        i3 = i1 - i5;

        i5 = i0;

        i0 = i0 + i3;

     label3:
        if i5 >= i0 goto label4;

        i4 = i4 * 31;

        $b7 = r1[i5];

        i4 = i4 + $b7;

        i5 = i5 + 1;

        goto label3;

     label4:
        i5 = i1;

        i6 = i6 + 1;

        goto label2;

     label5:
        r0.<okio.SegmentedByteString: int hashCode> = i4;

        return i4;
    }
    public java.lang.String hex()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String hex()>();

        return $r2;
    }
    public okio.ByteString hmacSha1(okio.ByteString)
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1, $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: okio.ByteString;

        $r2 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r2.<okio.ByteString: okio.ByteString hmacSha1(okio.ByteString)>($r1);

        return $r1;
    }
    public okio.ByteString hmacSha256(okio.ByteString)
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1, $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: okio.ByteString;

        $r2 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r2.<okio.ByteString: okio.ByteString hmacSha256(okio.ByteString)>($r1);

        return $r1;
    }
    public int indexOf(byte[], int)
    {
        okio.SegmentedByteString r0;
        byte[] $r1;
        int $i0;
        okio.ByteString $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $i0 = virtualinvoke $r2.<okio.ByteString: int indexOf(byte[],int)>($r1, $i0);

        return $i0;
    }
    byte[] internalArray()
    {
        okio.SegmentedByteString r0;
        byte[] $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = virtualinvoke r0.<okio.SegmentedByteString: byte[] toByteArray()>();

        return $r1;
    }
    public int lastIndexOf(byte[], int)
    {
        okio.SegmentedByteString r0;
        byte[] $r1;
        int $i0;
        okio.ByteString $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $i0 = virtualinvoke $r2.<okio.ByteString: int lastIndexOf(byte[],int)>($r1, $i0);

        return $i0;
    }
    public okio.ByteString md5()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString md5()>();

        return $r1;
    }
    public boolean rangeEquals(int, okio.ByteString, int, int)
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        int[] $r2;
        byte[][] $r3;
        byte[] $r4;
        boolean $z0;

        r0 := @this: okio.SegmentedByteString;

        $i3 := @parameter0: int;

        $r1 := @parameter1: okio.ByteString;

        $i4 := @parameter2: int;

        $i5 := @parameter3: int;

        if $i3 < 0 goto label6;

        $i6 = virtualinvoke r0.<okio.SegmentedByteString: int size()>();

        $i6 = $i6 - $i5;

        if $i3 <= $i6 goto label1;

        return 0;

     label1:
        $i6 = specialinvoke r0.<okio.SegmentedByteString: int segment(int)>($i3);

     label2:
        if $i5 <= 0 goto label5;

        if $i6 != 0 goto label4;

        i0 = 0;

     label3:
        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        i2 = $r2[$i6];

        i2 = i2 - i0;

        i2 = i0 + i2;

        i2 = i2 - $i3;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i2);

        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i1 = lengthof $r3;

        i1 = i1 + $i6;

        i1 = $r2[i1];

        i0 = $i3 - i0;

        i0 = i0 + i1;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r4 = $r3[$i6];

        $z0 = virtualinvoke $r1.<okio.ByteString: boolean rangeEquals(int,byte[],int,int)>($i4, $r4, i0, i2);

        if $z0 == 0 goto label6;

        $i3 = $i3 + i2;

        $i4 = $i4 + i2;

        $i5 = $i5 - i2;

        $i6 = $i6 + 1;

        goto label2;

     label4:
        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = $i6 + -1;

        i0 = $r2[i0];

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }
    public boolean rangeEquals(int, byte[], int, int)
    {
        okio.SegmentedByteString r0;
        byte[] $r1, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        int[] $r2;
        byte[][] $r3;
        boolean $z0;

        r0 := @this: okio.SegmentedByteString;

        $i3 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i4 := @parameter2: int;

        $i5 := @parameter3: int;

        if $i3 < 0 goto label6;

        $i6 = virtualinvoke r0.<okio.SegmentedByteString: int size()>();

        $i6 = $i6 - $i5;

        if $i3 > $i6 goto label6;

        if $i4 < 0 goto label6;

        $i6 = lengthof $r1;

        $i6 = $i6 - $i5;

        if $i4 <= $i6 goto label1;

        return 0;

     label1:
        $i6 = specialinvoke r0.<okio.SegmentedByteString: int segment(int)>($i3);

     label2:
        if $i5 <= 0 goto label5;

        if $i6 != 0 goto label4;

        i0 = 0;

     label3:
        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        i2 = $r2[$i6];

        i2 = i2 - i0;

        i2 = i0 + i2;

        i2 = i2 - $i3;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i2);

        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i1 = lengthof $r3;

        i1 = i1 + $i6;

        i1 = $r2[i1];

        i0 = $i3 - i0;

        i0 = i0 + i1;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r4 = $r3[$i6];

        $z0 = staticinvoke <okio.Util: boolean arrayRangeEquals(byte[],int,byte[],int,int)>($r4, i0, $r1, $i4, i2);

        if $z0 == 0 goto label6;

        $i3 = $i3 + i2;

        $i4 = $i4 + i2;

        $i5 = $i5 - i2;

        $i6 = $i6 + 1;

        goto label2;

     label4:
        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = $i6 + -1;

        i0 = $r2[i0];

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }
    public okio.ByteString sha1()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString sha1()>();

        return $r1;
    }
    public okio.ByteString sha256()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString sha256()>();

        return $r1;
    }
    public int size()
    {
        okio.SegmentedByteString r0;
        int[] $r1;
        byte[][] $r2;
        int $i0;

        r0 := @this: okio.SegmentedByteString;

        $r1 = r0.<okio.SegmentedByteString: int[] directory>;

        $r2 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $i0 = lengthof $r2;

        $i0 = $i0 + -1;

        $i0 = $r1[$i0];

        return $i0;
    }
    public java.lang.String string(java.nio.charset.Charset)
    {
        okio.SegmentedByteString r0;
        java.nio.charset.Charset $r1;
        okio.ByteString $r2;
        java.lang.String $r3;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: java.nio.charset.Charset;

        $r2 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r3 = virtualinvoke $r2.<okio.ByteString: java.lang.String string(java.nio.charset.Charset)>($r1);

        return $r3;
    }
    public okio.ByteString substring(int)
    {
        okio.SegmentedByteString r0;
        int $i0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString substring(int)>($i0);

        return $r1;
    }
    public okio.ByteString substring(int, int)
    {
        okio.SegmentedByteString r0;
        int $i0, $i1;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString substring(int,int)>($i0, $i1);

        return $r1;
    }
    public okio.ByteString toAsciiLowercase()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString toAsciiLowercase()>();

        return $r1;
    }
    public okio.ByteString toAsciiUppercase()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r1 = virtualinvoke $r1.<okio.ByteString: okio.ByteString toAsciiUppercase()>();

        return $r1;
    }
    public byte[] toByteArray()
    {
        okio.SegmentedByteString r0;
        int i0, i1, i2, i3, i4, $i5;
        byte[] r1, $r4;
        int[] $r2;
        byte[][] $r3;

        r0 := @this: okio.SegmentedByteString;

        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i1 = lengthof $r3;

        i1 = i1 + -1;

        i1 = $r2[i1];

        r1 = newarray (byte)[i1];

        i3 = 0;

        i4 = 0;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i1 = lengthof $r3;

     label1:
        if i4 >= i1 goto label2;

        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = i1 + i4;

        i2 = $r2[i0];

        $r2 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = $r2[i4];

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r4 = $r3[i4];

        $i5 = i0 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i2, r1, i3, $i5);

        i3 = i0;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }
    public java.lang.String toString()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String toString()>();

        return $r2;
    }
    public java.lang.String utf8()
    {
        okio.SegmentedByteString r0;
        okio.ByteString $r1;
        java.lang.String $r2;

        r0 := @this: okio.SegmentedByteString;

        $r1 = specialinvoke r0.<okio.SegmentedByteString: okio.ByteString toByteString()>();

        $r2 = virtualinvoke $r1.<okio.ByteString: java.lang.String utf8()>();

        return $r2;
    }
    public void write(java.io.OutputStream) throws java.io.IOException
    {
        okio.SegmentedByteString r0;
        java.io.OutputStream $r1;
        int i0, i1, i2, i3, i4;
        java.lang.IllegalArgumentException $r2;
        byte[][] $r3;
        int[] $r4;
        byte[] $r5;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: java.io.OutputStream;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("out == null");

        throw $r2;

     label1:
        i3 = 0;

        i4 = 0;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i1 = lengthof $r3;

     label2:
        if i4 >= i1 goto label3;

        $r4 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = i1 + i4;

        i2 = $r4[i0];

        $r4 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = $r4[i4];

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r5 = $r3[i4];

        i3 = i0 - i3;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, i2, i3);

        i3 = i0;

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }
    void write(okio.Buffer)
    {
        okio.SegmentedByteString r0;
        okio.Buffer $r1;
        int i0, i1, i2, i4, i5, $i6;
        okio.Segment r2, $r6;
        long $l3, $l7;
        byte[][] $r3;
        int[] $r4;
        byte[] $r5;

        r0 := @this: okio.SegmentedByteString;

        $r1 := @parameter0: okio.Buffer;

        i4 = 0;

        i5 = 0;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        i1 = lengthof $r3;

     label1:
        if i5 >= i1 goto label4;

        $r4 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = i1 + i5;

        i2 = $r4[i0];

        $r4 = r0.<okio.SegmentedByteString: int[] directory>;

        i0 = $r4[i5];

        r2 = new okio.Segment;

        $r3 = r0.<okio.SegmentedByteString: byte[][] segments>;

        $r5 = $r3[i5];

        $i6 = i2 + i0;

        i4 = $i6 - i4;

        specialinvoke r2.<okio.Segment: void <init>(byte[],int,int)>($r5, i2, i4);

        $r6 = $r1.<okio.Buffer: okio.Segment head>;

        if $r6 != null goto label3;

        r2.<okio.Segment: okio.Segment prev> = r2;

        r2.<okio.Segment: okio.Segment next> = r2;

        $r1.<okio.Buffer: okio.Segment head> = r2;

     label2:
        i4 = i0;

        i5 = i5 + 1;

        goto label1;

     label3:
        $r6 = $r1.<okio.Buffer: okio.Segment head>;

        $r6 = $r6.<okio.Segment: okio.Segment prev>;

        virtualinvoke $r6.<okio.Segment: okio.Segment push(okio.Segment)>(r2);

        goto label2;

     label4:
        $l7 = $r1.<okio.Buffer: long size>;

        $l3 = (long) i4;

        $l3 = $l7 + $l3;

        $r1.<okio.Buffer: long size> = $l3;

        return;
    }
