okio.Pipe extends java.lang.Object
final okio.Buffer buffer
final long maxBufferSize
private final okio.Sink sink
boolean sinkClosed
private final okio.Source source
boolean sourceClosed
    public void <init>(long)
    {
        okio.Pipe r0;
        long $l0;
        okio.Buffer $r1;
        okio.Pipe$PipeSink $r2;
        okio.Pipe$PipeSource $r3;
        byte $b1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        r0 := @this: okio.Pipe;

        $l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new okio.Buffer;

        specialinvoke $r1.<okio.Buffer: void <init>()>();

        r0.<okio.Pipe: okio.Buffer buffer> = $r1;

        $r2 = new okio.Pipe$PipeSink;

        specialinvoke $r2.<okio.Pipe$PipeSink: void <init>(okio.Pipe)>(r0);

        r0.<okio.Pipe: okio.Sink sink> = $r2;

        $r3 = new okio.Pipe$PipeSource;

        specialinvoke $r3.<okio.Pipe$PipeSource: void <init>(okio.Pipe)>(r0);

        r0.<okio.Pipe: okio.Source source> = $r3;

        $b1 = $l0 cmp 1L;

        if $b1 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxBufferSize < 1: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        r0.<okio.Pipe: long maxBufferSize> = $l0;

        return;
    }
    public okio.Sink sink()
    {
        okio.Pipe r0;
        okio.Sink r1;

        r0 := @this: okio.Pipe;

        r1 = r0.<okio.Pipe: okio.Sink sink>;

        return r1;
    }
    public okio.Source source()
    {
        okio.Pipe r0;
        okio.Source r1;

        r0 := @this: okio.Pipe;

        r1 = r0.<okio.Pipe: okio.Source source>;

        return r1;
    }
