okio.ForwardingTimeout extends okio.Timeout
private okio.Timeout delegate
    public void <init>(okio.Timeout)
    {
        okio.ForwardingTimeout r0;
        okio.Timeout $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: okio.ForwardingTimeout;

        $r1 := @parameter0: okio.Timeout;

        specialinvoke r0.<okio.Timeout: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("delegate == null");

        throw $r2;

     label1:
        r0.<okio.ForwardingTimeout: okio.Timeout delegate> = $r1;

        return;
    }
    public okio.Timeout clearDeadline()
    {
        okio.ForwardingTimeout r0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $r1 = virtualinvoke $r1.<okio.Timeout: okio.Timeout clearDeadline()>();

        return $r1;
    }
    public okio.Timeout clearTimeout()
    {
        okio.ForwardingTimeout r0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $r1 = virtualinvoke $r1.<okio.Timeout: okio.Timeout clearTimeout()>();

        return $r1;
    }
    public long deadlineNanoTime()
    {
        okio.ForwardingTimeout r0;
        long $l0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $l0 = virtualinvoke $r1.<okio.Timeout: long deadlineNanoTime()>();

        return $l0;
    }
    public okio.Timeout deadlineNanoTime(long)
    {
        okio.ForwardingTimeout r0;
        long $l0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $l0 := @parameter0: long;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $r1 = virtualinvoke $r1.<okio.Timeout: okio.Timeout deadlineNanoTime(long)>($l0);

        return $r1;
    }
    public final okio.Timeout delegate()
    {
        okio.ForwardingTimeout r0;
        okio.Timeout r1;

        r0 := @this: okio.ForwardingTimeout;

        r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        return r1;
    }
    public boolean hasDeadline()
    {
        okio.ForwardingTimeout r0;
        boolean $z0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $z0 = virtualinvoke $r1.<okio.Timeout: boolean hasDeadline()>();

        return $z0;
    }
    public final okio.ForwardingTimeout setDelegate(okio.Timeout)
    {
        okio.ForwardingTimeout r0;
        okio.Timeout $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: okio.ForwardingTimeout;

        $r1 := @parameter0: okio.Timeout;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("delegate == null");

        throw $r2;

     label1:
        r0.<okio.ForwardingTimeout: okio.Timeout delegate> = $r1;

        return r0;
    }
    public void throwIfReached() throws java.io.IOException
    {
        okio.ForwardingTimeout r0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        virtualinvoke $r1.<okio.Timeout: void throwIfReached()>();

        return;
    }
    public okio.Timeout timeout(long, java.util.concurrent.TimeUnit)
    {
        okio.ForwardingTimeout r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        okio.Timeout $r2;

        r0 := @this: okio.ForwardingTimeout;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $r2 = virtualinvoke $r2.<okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l0, $r1);

        return $r2;
    }
    public long timeoutNanos()
    {
        okio.ForwardingTimeout r0;
        long $l0;
        okio.Timeout $r1;

        r0 := @this: okio.ForwardingTimeout;

        $r1 = r0.<okio.ForwardingTimeout: okio.Timeout delegate>;

        $l0 = virtualinvoke $r1.<okio.Timeout: long timeoutNanos()>();

        return $l0;
    }
