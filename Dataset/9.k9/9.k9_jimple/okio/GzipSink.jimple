okio.GzipSink extends java.lang.Object implements okio.Sink
private boolean closed
private final java.util.zip.CRC32 crc
private final java.util.zip.Deflater deflater
private final okio.DeflaterSink deflaterSink
private final okio.BufferedSink sink
    public void <init>(okio.Sink)
    {
        okio.GzipSink r0;
        okio.Sink $r1;
        okio.BufferedSink $r2;
        java.util.zip.CRC32 $r3;
        java.lang.IllegalArgumentException $r4;
        java.util.zip.Deflater $r5;
        okio.DeflaterSink $r6;

        r0 := @this: okio.GzipSink;

        $r1 := @parameter0: okio.Sink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.zip.CRC32;

        specialinvoke $r3.<java.util.zip.CRC32: void <init>()>();

        r0.<okio.GzipSink: java.util.zip.CRC32 crc> = $r3;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sink == null");

        throw $r4;

     label1:
        $r5 = new java.util.zip.Deflater;

        specialinvoke $r5.<java.util.zip.Deflater: void <init>(int,boolean)>(-1, 1);

        r0.<okio.GzipSink: java.util.zip.Deflater deflater> = $r5;

        $r2 = staticinvoke <okio.Okio: okio.BufferedSink buffer(okio.Sink)>($r1);

        r0.<okio.GzipSink: okio.BufferedSink sink> = $r2;

        $r6 = new okio.DeflaterSink;

        $r2 = r0.<okio.GzipSink: okio.BufferedSink sink>;

        $r5 = r0.<okio.GzipSink: java.util.zip.Deflater deflater>;

        specialinvoke $r6.<okio.DeflaterSink: void <init>(okio.BufferedSink,java.util.zip.Deflater)>($r2, $r5);

        r0.<okio.GzipSink: okio.DeflaterSink deflaterSink> = $r6;

        specialinvoke r0.<okio.GzipSink: void writeHeader()>();

        return;
    }
    private void updateCrc(okio.Buffer, long)
    {
        okio.GzipSink r0;
        okio.Buffer $r1;
        int i0, $i1;
        long $l2, $l3;
        okio.Segment r2;
        byte $b4;
        java.util.zip.CRC32 $r3;
        byte[] $r4;

        r0 := @this: okio.GzipSink;

        $r1 := @parameter0: okio.Buffer;

        $l3 := @parameter1: long;

        r2 = $r1.<okio.Buffer: okio.Segment head>;

     label1:
        $b4 = $l3 cmp 0L;

        if $b4 <= 0 goto label2;

        i0 = r2.<okio.Segment: int limit>;

        $i1 = r2.<okio.Segment: int pos>;

        i0 = i0 - $i1;

        $l2 = (long) i0;

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l3, $l2);

        i0 = (int) $l2;

        $r3 = r0.<okio.GzipSink: java.util.zip.CRC32 crc>;

        $r4 = r2.<okio.Segment: byte[] data>;

        $i1 = r2.<okio.Segment: int pos>;

        virtualinvoke $r3.<java.util.zip.CRC32: void update(byte[],int,int)>($r4, $i1, i0);

        $l2 = (long) i0;

        $l3 = $l3 - $l2;

        r2 = r2.<okio.Segment: okio.Segment next>;

        goto label1;

     label2:
        return;
    }
    private void writeFooter() throws java.io.IOException
    {
        okio.GzipSink r0;
        okio.BufferedSink $r1;
        java.util.zip.CRC32 $r2;
        long $l0;
        int $i1;
        java.util.zip.Deflater $r3;

        r0 := @this: okio.GzipSink;

        $r1 = r0.<okio.GzipSink: okio.BufferedSink sink>;

        $r2 = r0.<okio.GzipSink: java.util.zip.CRC32 crc>;

        $l0 = virtualinvoke $r2.<java.util.zip.CRC32: long getValue()>();

        $i1 = (int) $l0;

        interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink writeIntLe(int)>($i1);

        $r1 = r0.<okio.GzipSink: okio.BufferedSink sink>;

        $r3 = r0.<okio.GzipSink: java.util.zip.Deflater deflater>;

        $l0 = virtualinvoke $r3.<java.util.zip.Deflater: long getBytesRead()>();

        $i1 = (int) $l0;

        interfaceinvoke $r1.<okio.BufferedSink: okio.BufferedSink writeIntLe(int)>($i1);

        return;
    }
    private void writeHeader()
    {
        okio.GzipSink r0;
        okio.Buffer $r1;
        okio.BufferedSink $r2;

        r0 := @this: okio.GzipSink;

        $r2 = r0.<okio.GzipSink: okio.BufferedSink sink>;

        $r1 = interfaceinvoke $r2.<okio.BufferedSink: okio.Buffer buffer()>();

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeShort(int)>(8075);

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>(8);

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>(0);

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>(0);

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>(0);

        virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>(0);

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.GzipSink r0;
        boolean $z0;
        java.lang.Throwable r1, r5, r6;
        okio.DeflaterSink $r2;
        java.util.zip.Deflater $r3;
        okio.BufferedSink $r4;

        r0 := @this: okio.GzipSink;

        $z0 = r0.<okio.GzipSink: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = null;

     label2:
        $r2 = r0.<okio.GzipSink: okio.DeflaterSink deflaterSink>;

        virtualinvoke $r2.<okio.DeflaterSink: void finishDeflate()>();

        specialinvoke r0.<okio.GzipSink: void writeFooter()>();

     label3:
        $r3 = r0.<okio.GzipSink: java.util.zip.Deflater deflater>;

        virtualinvoke $r3.<java.util.zip.Deflater: void end()>();

     label4:
        $r4 = r0.<okio.GzipSink: okio.BufferedSink sink>;

        interfaceinvoke $r4.<okio.BufferedSink: void close()>();

     label5:
        r0.<okio.GzipSink: boolean closed> = 1;

        if r1 == null goto label9;

        staticinvoke <okio.Util: void sneakyRethrow(java.lang.Throwable)>(r1);

        return;

     label6:
        r1 := @caughtexception;

        goto label3;

     label7:
        r5 := @caughtexception;

        if r1 != null goto label4;

        r1 = r5;

        goto label4;

     label8:
        r6 := @caughtexception;

        if r1 != null goto label5;

        r1 = r6;

        goto label5;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label8;
    }
    public java.util.zip.Deflater deflater()
    {
        okio.GzipSink r0;
        java.util.zip.Deflater r1;

        r0 := @this: okio.GzipSink;

        r1 = r0.<okio.GzipSink: java.util.zip.Deflater deflater>;

        return r1;
    }
    public void flush() throws java.io.IOException
    {
        okio.GzipSink r0;
        okio.DeflaterSink $r1;

        r0 := @this: okio.GzipSink;

        $r1 = r0.<okio.GzipSink: okio.DeflaterSink deflaterSink>;

        virtualinvoke $r1.<okio.DeflaterSink: void flush()>();

        return;
    }
    public okio.Timeout timeout()
    {
        okio.GzipSink r0;
        okio.Timeout $r1;
        okio.BufferedSink $r2;

        r0 := @this: okio.GzipSink;

        $r2 = r0.<okio.GzipSink: okio.BufferedSink sink>;

        $r1 = interfaceinvoke $r2.<okio.BufferedSink: okio.Timeout timeout()>();

        return $r1;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okio.GzipSink r0;
        okio.Buffer $r1;
        long $l0;
        byte $b1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        okio.DeflaterSink $r5;

        r0 := @this: okio.GzipSink;

        $r1 := @parameter0: okio.Buffer;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("byteCount < 0: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<okio.GzipSink: void updateCrc(okio.Buffer,long)>($r1, $l0);

        $r5 = r0.<okio.GzipSink: okio.DeflaterSink deflaterSink>;

        virtualinvoke $r5.<okio.DeflaterSink: void write(okio.Buffer,long)>($r1, $l0);

        return;
    }
