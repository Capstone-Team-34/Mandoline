okio.Pipe$PipeSink extends java.lang.Object implements okio.Sink
final okio.Pipe this$0
final okio.Timeout timeout
    void <init>(okio.Pipe)
    {
        okio.Pipe$PipeSink r0;
        okio.Pipe $r1;
        okio.Timeout $r2;

        r0 := @this: okio.Pipe$PipeSink;

        $r1 := @parameter0: okio.Pipe;

        r0.<okio.Pipe$PipeSink: okio.Pipe this$0> = $r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new okio.Timeout;

        specialinvoke $r2.<okio.Timeout: void <init>()>();

        r0.<okio.Pipe$PipeSink: okio.Timeout timeout> = $r2;

        return;
    }
    public void close() throws java.io.IOException
    {
        okio.Pipe$PipeSink r0;
        okio.Buffer $r1, $r3;
        okio.Pipe $r2;
        boolean $z0;
        java.lang.Throwable $r4, $r5;

        r0 := @this: okio.Pipe$PipeSink;

        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r1 = $r2.<okio.Pipe: okio.Buffer buffer>;

        entermonitor $r1;

     label01:
        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $z0 = $r2.<okio.Pipe: boolean sinkClosed>;

        if $z0 == 0 goto label03;

        exitmonitor $r1;

     label02:
        return;

     label03:
        virtualinvoke r0.<okio.Pipe$PipeSink: void flush()>();

     label04:
        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r2.<okio.Pipe: boolean sinkClosed> = 1;

        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r3 = $r2.<okio.Pipe: okio.Buffer buffer>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label07:
        throw $r4;

     label08:
        $r5 := @caughtexception;

     label09:
        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r2.<okio.Pipe: boolean sinkClosed> = 1;

        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r3 = $r2.<okio.Pipe: okio.Buffer buffer>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        throw $r5;

     label10:
        nop;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }
    public void flush() throws java.io.IOException
    {
        okio.Pipe$PipeSink r0;
        okio.Buffer $r1, $r6;
        long $l0;
        okio.Pipe $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;
        okio.Timeout $r5;
        byte $b1;
        java.io.IOException $r7;

        r0 := @this: okio.Pipe$PipeSink;

        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r1 = $r2.<okio.Pipe: okio.Buffer buffer>;

        entermonitor $r1;

     label1:
        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $z0 = $r2.<okio.Pipe: boolean sinkClosed>;

        if $z0 == 0 goto label5;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label3:
        throw $r4;

     label4:
        $r5 = r0.<okio.Pipe$PipeSink: okio.Timeout timeout>;

        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r6 = $r2.<okio.Pipe: okio.Buffer buffer>;

        virtualinvoke $r5.<okio.Timeout: void waitUntilNotified(java.lang.Object)>($r6);

     label5:
        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r6 = $r2.<okio.Pipe: okio.Buffer buffer>;

        $l0 = virtualinvoke $r6.<okio.Buffer: long size()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label6;

        $r2 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $z0 = $r2.<okio.Pipe: boolean sourceClosed>;

        if $z0 == 0 goto label4;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r7;

     label6:
        exitmonitor $r1;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label7 with label2;
    }
    public okio.Timeout timeout()
    {
        okio.Pipe$PipeSink r0;
        okio.Timeout r1;

        r0 := @this: okio.Pipe$PipeSink;

        r1 = r0.<okio.Pipe$PipeSink: okio.Timeout timeout>;

        return r1;
    }
    public void write(okio.Buffer, long) throws java.io.IOException
    {
        okio.Pipe$PipeSink r0;
        okio.Buffer $r1, $r2, $r6;
        long l0, $l1, $l2;
        okio.Pipe $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;
        byte $b3;
        okio.Timeout $r7;
        java.io.IOException $r8;

        r0 := @this: okio.Pipe$PipeSink;

        $r1 := @parameter0: okio.Buffer;

        $l1 := @parameter1: long;

        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r2 = $r3.<okio.Pipe: okio.Buffer buffer>;

        entermonitor $r2;

     label1:
        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $z0 = $r3.<okio.Pipe: boolean sinkClosed>;

        if $z0 == 0 goto label5;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("closed");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r5;

     label4:
        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        l0 = $r3.<okio.Pipe: long maxBufferSize>;

        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r6 = $r3.<okio.Pipe: okio.Buffer buffer>;

        $l2 = virtualinvoke $r6.<okio.Buffer: long size()>();

        l0 = l0 - $l2;

        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label6;

        $r7 = r0.<okio.Pipe$PipeSink: okio.Timeout timeout>;

        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r6 = $r3.<okio.Pipe: okio.Buffer buffer>;

        virtualinvoke $r7.<okio.Timeout: void waitUntilNotified(java.lang.Object)>($r6);

     label5:
        $b3 = $l1 cmp 0L;

        if $b3 <= 0 goto label7;

        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $z0 = $r3.<okio.Pipe: boolean sourceClosed>;

        if $z0 == 0 goto label4;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("source is closed");

        throw $r8;

     label6:
        l0 = staticinvoke <java.lang.Math: long min(long,long)>(l0, $l1);

        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r6 = $r3.<okio.Pipe: okio.Buffer buffer>;

        virtualinvoke $r6.<okio.Buffer: void write(okio.Buffer,long)>($r1, l0);

        $l1 = $l1 - l0;

        $r3 = r0.<okio.Pipe$PipeSink: okio.Pipe this$0>;

        $r6 = $r3.<okio.Pipe: okio.Buffer buffer>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        goto label5;

     label7:
        exitmonitor $r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label8 with label2;
    }
