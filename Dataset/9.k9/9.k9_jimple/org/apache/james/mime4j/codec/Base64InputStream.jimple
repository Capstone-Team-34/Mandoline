org.apache.james.mime4j.codec.Base64InputStream extends java.io.InputStream
static final boolean $assertionsDisabled
private static final int[] BASE64_DECODE
private static final byte BASE64_PAD
private static final int ENCODED_BUFFER_SIZE
private static final int EOF
private boolean closed
private final org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf
private final byte[] encoded
private boolean eof
private final java.io.InputStream in
private final org.apache.james.mime4j.codec.DecodeMonitor monitor
private int position
private final byte[] singleByte
private int size
    static void <clinit>()
    {
        boolean $z0;
        java.lang.Class $r0;
        int[] $r1;
        int i0, $i1;
        byte[] $r2;
        byte $b2;

        $r0 = class "Lorg/apache/james/mime4j/codec/Base64InputStream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z0 = 1;

     label1:
        <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled> = $z0;

        $r1 = newarray (int)[256];

        <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE> = $r1;

        i0 = 0;

     label2:
        if i0 >= 256 goto label4;

        $r1 = <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE>;

        $r1[i0] = -1;

        i0 = i0 + 1;

        goto label2;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        i0 = 0;

     label5:
        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label6;

        $r1 = <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE>;

        $r2 = <org.apache.james.mime4j.codec.Base64OutputStream: byte[] BASE64_TABLE>;

        $b2 = $r2[i0];

        $i1 = $b2 & 255;

        $r1[$i1] = i0;

        i0 = i0 + 1;

        goto label5;

     label6:
        return;
    }
    protected void <init>(int, java.io.InputStream, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        int $i0;
        java.io.InputStream $r1;
        org.apache.james.mime4j.codec.DecodeMonitor $r2;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.james.mime4j.util.ByteArrayBuffer $r5;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.InputStream;

        $r2 := @parameter2: org.apache.james.mime4j.codec.DecodeMonitor;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r3 = newarray (byte)[1];

        r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] singleByte> = $r3;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int size> = 0;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed> = 0;

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r3 = newarray (byte)[$i0];

        r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded> = $r3;

        $r5 = new org.apache.james.mime4j.util.ByteArrayBuffer;

        specialinvoke $r5.<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>(512);

        r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf> = $r5;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: java.io.InputStream in> = $r1;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor> = $r2;

        return;
    }
    public void <init>(java.io.InputStream)
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(java.io.InputStream,boolean)>($r1, 0);

        return;
    }
    public void <init>(java.io.InputStream, org.apache.james.mime4j.codec.DecodeMonitor)
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream $r1;
        org.apache.james.mime4j.codec.DecodeMonitor $r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: org.apache.james.mime4j.codec.DecodeMonitor;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(int,java.io.InputStream,org.apache.james.mime4j.codec.DecodeMonitor)>(1536, $r1, $r2);

        return;
    }
    public void <init>(java.io.InputStream, boolean)
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        java.io.InputStream $r1;
        boolean $z0;
        org.apache.james.mime4j.codec.DecodeMonitor $r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $r1 := @parameter0: java.io.InputStream;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        $r2 = <org.apache.james.mime4j.codec.DecodeMonitor: org.apache.james.mime4j.codec.DecodeMonitor STRICT>;

     label1:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void <init>(int,java.io.InputStream,org.apache.james.mime4j.codec.DecodeMonitor)>(1536, $r1, $r2);

        return;

     label2:
        $r2 = <org.apache.james.mime4j.codec.DecodeMonitor: org.apache.james.mime4j.codec.DecodeMonitor SILENT>;

        goto label1;
    }
    private int decodePad(int, int, byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        int $i0, $i1, $i2, i5;
        byte[] $r1;
        byte b3, b4;
        org.apache.james.mime4j.util.ByteArrayBuffer $r2;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: byte[];

        i5 := @parameter3: int;

        $i2 := @parameter4: int;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean eof> = 1;

        if $i1 != 2 goto label2;

        $i0 = $i0 >>> 4;

        b3 = (byte) $i0;

        if i5 >= $i2 goto label1;

        $i0 = i5 + 1;

        $r1[i5] = b3;

        return $i0;

     label1:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b3);

        return i5;

     label2:
        if $i1 != 3 goto label5;

        $i1 = $i0 >>> 10;

        b3 = (byte) $i1;

        $i0 = $i0 >>> 2;

        $i0 = $i0 & 255;

        b4 = (byte) $i0;

        $i0 = $i2 + -1;

        if i5 >= $i0 goto label3;

        $i0 = i5 + 1;

        $r1[i5] = b3;

        $i1 = $i0 + 1;

        $r1[$i0] = b4;

        return $i1;

     label3:
        if i5 >= $i2 goto label4;

        $i0 = i5 + 1;

        $r1[i5] = b3;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b4);

        return $i0;

     label4:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b3);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b4);

        return i5;

     label5:
        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpecedPad(int)>($i1);

        return i5;
    }
    private void handleUnexpecedPad(int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        int $i0;
        org.apache.james.mime4j.codec.DecodeMonitor $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;
        java.io.IOException $r4;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dropping ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sextet(s)");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>("Unexpected padding character", $r3);

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Unexpected padding character");

        throw $r4;

     label1:
        return;
    }
    private void handleUnexpectedEof(int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        int $i0;
        org.apache.james.mime4j.codec.DecodeMonitor $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;
        java.io.IOException $r4;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dropping ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sextet(s)");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r1.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>("Unexpected end of BASE64 stream", $r3);

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Unexpected end of BASE64 stream");

        throw $r4;

     label1:
        return;
    }
    private int read0(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        byte[] $r1, $r3, $r5;
        int $i0, $i1, i2, i6, i7, i8, $i9;
        byte b3, b4, b5;
        org.apache.james.mime4j.util.ByteArrayBuffer $r2;
        boolean $z0;
        java.io.InputStream $r4;
        java.lang.AssertionError $r6;
        int[] $r7;
        org.apache.james.mime4j.codec.DecodeMonitor $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.io.IOException $r11;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i0 + $i1;

        i8 = $i0;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $i9 = virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: int length()>();

        if $i9 <= 0 goto label01;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        i8 = virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(i8, $i1);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        $r3 = virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, $i0, $i1);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void remove(int,int)>(0, $i1);

        i8 = $i0 + $i1;

     label01:
        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean eof>;

        if $z0 == 0 goto label03;

        if i8 != $i0 goto label02;

        return -1;

     label02:
        $i0 = i8 - $i0;

        return $i0;

     label03:
        $i9 = 0;

        $i1 = 0;

     label04:
        if i8 >= i2 goto label18;

     label05:
        i6 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int position>;

        i7 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int size>;

        if i6 != i7 goto label11;

        $r4 = r0.<org.apache.james.mime4j.codec.Base64InputStream: java.io.InputStream in>;

        $r3 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded>;

        $r5 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded>;

        i6 = lengthof $r5;

        i6 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>($r3, 0, i6);

        if i6 != -1 goto label08;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean eof> = 1;

        if $i1 == 0 goto label06;

        specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: void handleUnexpectedEof(int)>($i1);

     label06:
        if i8 != $i0 goto label07;

        return -1;

     label07:
        $i0 = i8 - $i0;

        return $i0;

     label08:
        if i6 <= 0 goto label09;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int position> = 0;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int size> = i6;

        goto label05;

     label09:
        $z0 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label05;

        if i6 == 0 goto label05;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label10:
        $i9 = $i9 << 6;

        $i9 = $i9 | i6;

        $i1 = $i1 + 1;

        if $i1 != 4 goto label11;

        $i1 = 0;

        i6 = $i9 >>> 16;

        b3 = (byte) i6;

        i6 = $i9 >>> 8;

        b4 = (byte) i6;

        b5 = (byte) $i9;

        i6 = i2 + -2;

        if i8 >= i6 goto label13;

        i6 = i8 + 1;

        $r1[i8] = b3;

        i8 = i6 + 1;

        $r1[i6] = b4;

        $r1[i8] = b5;

        i8 = i8 + 1;

     label11:
        i6 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int position>;

        i7 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int size>;

        if i6 >= i7 goto label04;

        if i8 >= i2 goto label04;

        $r3 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] encoded>;

        i6 = r0.<org.apache.james.mime4j.codec.Base64InputStream: int position>;

        i7 = i6 + 1;

        r0.<org.apache.james.mime4j.codec.Base64InputStream: int position> = i7;

        b3 = $r3[i6];

        i7 = b3 & 255;

        if i7 != 61 goto label12;

        $i1 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int decodePad(int,int,byte[],int,int)>($i9, $i1, $r1, i8, i2);

        $i0 = $i1 - $i0;

        return $i0;

     label12:
        $r7 = <org.apache.james.mime4j.codec.Base64InputStream: int[] BASE64_DECODE>;

        i6 = $r7[i7];

        if i6 >= 0 goto label10;

        if i7 == 13 goto label11;

        if i7 == 10 goto label11;

        if i7 == 32 goto label11;

        $r8 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.codec.DecodeMonitor monitor>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected base64 byte: ");

        b3 = (byte) i7;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r8.<org.apache.james.mime4j.codec.DecodeMonitor: boolean warn(java.lang.String,java.lang.String)>($r10, "ignoring.");

        if $z0 == 0 goto label11;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Unexpected base64 byte");

        throw $r11;

     label13:
        $i1 = i2 + -1;

        if i8 >= $i1 goto label15;

        $i1 = i8 + 1;

        $r1[i8] = b3;

        i8 = $i1 + 1;

        $r1[$i1] = b4;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b5);

     label14:
        $z0 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label17;

        if i8 == i2 goto label17;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label15:
        if i8 >= i2 goto label16;

        $r1[i8] = b3;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b4);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b5);

        i8 = i8 + 1;

        goto label14;

     label16:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b3);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b4);

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: org.apache.james.mime4j.util.ByteArrayBuffer decodedBuf>;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>(b5);

        goto label14;

     label17:
        $i0 = i2 - $i0;

        return $i0;

     label18:
        $z0 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label19;

        if $i1 == 0 goto label19;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label19:
        $z0 = <org.apache.james.mime4j.codec.Base64InputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label20;

        if i8 == i2 goto label20;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label20:
        $i0 = i2 - $i0;

        return $i0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed> = 1;

        return;
    }
    public int read() throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        int $i0;
        boolean $z0;
        java.io.IOException $r1;
        byte[] $r2;
        byte $b1;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r1;

     label1:
        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] singleByte>;

        $i0 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>($r2, 0, 1);

        if $i0 != -1 goto label2;

        return -1;

     label2:
        if $i0 != 1 goto label1;

        $r2 = r0.<org.apache.james.mime4j.codec.Base64InputStream: byte[] singleByte>;

        $b1 = $r2[0];

        $i0 = $b1 & 255;

        return $i0;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        byte[] $r1;
        int $i0;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $r1 := @parameter0: byte[];

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof $r1;

        if $i0 != 0 goto label3;

        return 0;

     label3:
        $i0 = lengthof $r1;

        $i0 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.codec.Base64InputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.james.mime4j.codec.Base64InputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = r0.<org.apache.james.mime4j.codec.Base64InputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream has been closed");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        if $i0 < 0 goto label3;

        if $i1 < 0 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label4:
        if $i1 != 0 goto label5;

        return 0;

     label5:
        $i0 = specialinvoke r0.<org.apache.james.mime4j.codec.Base64InputStream: int read0(byte[],int,int)>($r1, $i0, $i1);

        return $i0;
    }
