org.apache.james.mime4j.io.BinaryInputStream extends java.io.InputStream
private final java.nio.ByteBuffer bbuf
    void <init>(java.nio.ByteBuffer)
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        $r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf> = $r1;

        return;
    }
    public int available() throws java.io.IOException
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;
        int $i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        $r1 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        return $i0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        return;
    }
    public int read() throws java.io.IOException
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        byte $b0;
        int $i1;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        $r1 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        $b0 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $i1 = $b0 & 255;

        return $i1;

     label1:
        return -1;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.apache.james.mime4j.io.BinaryInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.nio.ByteBuffer $r4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        if $i0 < 0 goto label2;

        if $i1 < 0 goto label2;

        $i3 = $i0 + $i1;

        $i2 = lengthof $r1;

        if $i3 <= $i2 goto label3;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        if $i1 != 0 goto label4;

        return 0;

     label4:
        $r4 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        $i2 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $r4 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r1, $i0, $i1);

        return $i1;

     label5:
        return -1;
    }
    public long skip(long) throws java.io.IOException
    {
        org.apache.james.mime4j.io.BinaryInputStream r0;
        boolean $z0;
        long $l0;
        int i1;
        byte $b2;
        java.nio.ByteBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.BinaryInputStream;

        $l0 := @parameter0: long;

        i1 = 0;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label2;

        $r1 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<org.apache.james.mime4j.io.BinaryInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $l0 = $l0 - 1L;

        i1 = i1 + 1;

        goto label1;

     label2:
        $l0 = (long) i1;

        return $l0;
    }
