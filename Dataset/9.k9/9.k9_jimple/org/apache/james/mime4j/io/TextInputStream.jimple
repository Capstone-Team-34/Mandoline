org.apache.james.mime4j.io.TextInputStream extends java.io.InputStream
private final java.nio.ByteBuffer bbuf
private final java.nio.CharBuffer cbuf
private final java.nio.charset.CharsetEncoder encoder
private int mark
    void <init>(java.lang.CharSequence, java.nio.charset.Charset, int)
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        java.lang.CharSequence $r1;
        java.nio.charset.Charset $r2;
        int $i0;
        java.nio.charset.CharsetEncoder $r3;
        java.nio.charset.CodingErrorAction $r4;
        java.nio.ByteBuffer $r5;
        java.nio.CharBuffer $r6;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.james.mime4j.io.TextInputStream: int mark> = -1;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.charset.CharsetEncoder encoder> = $r3;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf> = $r5;

        $r5 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>($r1);

        r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf> = $r6;

        return;
    }
    private void fillBuffer() throws java.nio.charset.CharacterCodingException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        java.nio.CharBuffer $r1;
        java.nio.ByteBuffer $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.nio.charset.CoderResult $r4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $r2 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r3 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.charset.CharsetEncoder encoder>;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $r2 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $r4 = virtualinvoke $r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r1, $r2, 1);

        $z0 = virtualinvoke $r4.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r4.<java.nio.charset.CoderResult: void throwException()>();

     label1:
        $r2 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return;
    }
    public int available() throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        int $i0;
        java.nio.CharBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int remaining()>();

        return $i0;
    }
    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        return;
    }
    public void mark(int)
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        int $i0;
        java.nio.CharBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        r0.<org.apache.james.mime4j.io.TextInputStream: int mark> = $i0;

        return;
    }
    public boolean markSupported()
    {
        org.apache.james.mime4j.io.TextInputStream r0;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        return 1;
    }
    public int read() throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        byte $b0;
        int $i1;
        java.nio.CharBuffer $r2;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

     label1:
        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $b0 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $i1 = $b0 & 255;

        return $i1;

     label2:
        specialinvoke r0.<org.apache.james.mime4j.io.TextInputStream: void fillBuffer()>();

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $z0 = virtualinvoke $r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return -1;
    }
    public int read(byte[]) throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke r0.<org.apache.james.mime4j.io.TextInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }
    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.NullPointerException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.nio.ByteBuffer $r4;
        boolean $z0;
        java.nio.CharBuffer $r5;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        if $i1 < 0 goto label2;

        if $i2 < 0 goto label2;

        $i3 = $i1 + $i2;

        $i0 = lengthof $r1;

        if $i3 <= $i0 goto label3;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $r4 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label4;

        $r5 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $z0 = virtualinvoke $r5.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label4;

        return -1;

     label4:
        $i0 = 0;

     label5:
        if $i2 <= 0 goto label7;

        $r4 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $i3 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $r4 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r1, $i1, $i3);

        $i1 = $i1 + $i3;

        $i2 = $i2 - $i3;

        $i0 = $i0 + $i3;

        goto label5;

     label6:
        specialinvoke r0.<org.apache.james.mime4j.io.TextInputStream: void fillBuffer()>();

        $r4 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label5;

        $r5 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $z0 = virtualinvoke $r5.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label5;

     label7:
        if $i0 > 0 goto label8;

        $r4 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.ByteBuffer bbuf>;

        $z0 = virtualinvoke $r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label8;

        $r5 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $z0 = virtualinvoke $r5.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label8;

        return -1;

     label8:
        return $i0;
    }
    public void reset() throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        int $i0;
        java.nio.CharBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $i0 = r0.<org.apache.james.mime4j.io.TextInputStream: int mark>;

        if $i0 == -1 goto label1;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $i0 = r0.<org.apache.james.mime4j.io.TextInputStream: int mark>;

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.Buffer position(int)>($i0);

        r0.<org.apache.james.mime4j.io.TextInputStream: int mark> = -1;

     label1:
        return;
    }
    public long skip(long) throws java.io.IOException
    {
        org.apache.james.mime4j.io.TextInputStream r0;
        boolean $z0;
        long $l0;
        int i1;
        byte $b2;
        java.nio.CharBuffer $r1;

        r0 := @this: org.apache.james.mime4j.io.TextInputStream;

        $l0 := @parameter0: long;

        i1 = 0;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 <= 0 goto label2;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        $z0 = virtualinvoke $r1.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<org.apache.james.mime4j.io.TextInputStream: java.nio.CharBuffer cbuf>;

        virtualinvoke $r1.<java.nio.CharBuffer: char get()>();

        $l0 = $l0 - 1L;

        i1 = i1 + 1;

        goto label1;

     label2:
        $l0 = (long) i1;

        return $l0;
    }
