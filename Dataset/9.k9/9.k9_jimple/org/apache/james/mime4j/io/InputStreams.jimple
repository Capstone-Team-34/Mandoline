org.apache.james.mime4j.io.InputStreams extends java.lang.Object
    private void <init>()
    {
        org.apache.james.mime4j.io.InputStreams r0;

        r0 := @this: org.apache.james.mime4j.io.InputStreams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.io.InputStream create(java.lang.CharSequence, java.nio.charset.Charset)
    {
        java.lang.CharSequence $r0;
        java.nio.charset.Charset r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.james.mime4j.io.TextInputStream $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.nio.charset.Charset;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CharSequence may not be null");

        throw $r2;

     label1:
        $r3 = new org.apache.james.mime4j.io.TextInputStream;

        if r1 == null goto label3;

     label2:
        specialinvoke $r3.<org.apache.james.mime4j.io.TextInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>($r0, r1, 1024);

        return $r3;

     label3:
        r1 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label2;
    }
    public static java.io.InputStream create(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer $r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.james.mime4j.io.BinaryInputStream $r2;

        $r0 := @parameter0: java.nio.ByteBuffer;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array may not be null");

        throw $r1;

     label1:
        $r2 = new org.apache.james.mime4j.io.BinaryInputStream;

        specialinvoke $r2.<org.apache.james.mime4j.io.BinaryInputStream: void <init>(java.nio.ByteBuffer)>($r0);

        return $r2;
    }
    public static java.io.InputStream create(org.apache.james.mime4j.util.ByteArrayBuffer)
    {
        org.apache.james.mime4j.util.ByteArrayBuffer $r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.james.mime4j.io.BinaryInputStream $r2;
        byte[] $r3;
        int $i0;
        java.nio.ByteBuffer $r4;

        $r0 := @parameter0: org.apache.james.mime4j.util.ByteArrayBuffer;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array may not be null");

        throw $r1;

     label1:
        $r2 = new org.apache.james.mime4j.io.BinaryInputStream;

        $r3 = virtualinvoke $r0.<org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>();

        $i0 = virtualinvoke $r0.<org.apache.james.mime4j.util.ByteArrayBuffer: int length()>();

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r3, 0, $i0);

        specialinvoke $r2.<org.apache.james.mime4j.io.BinaryInputStream: void <init>(java.nio.ByteBuffer)>($r4);

        return $r2;
    }
    public static java.io.InputStream create(byte[])
    {
        byte[] $r0;
        java.nio.ByteBuffer $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.james.mime4j.io.BinaryInputStream $r3;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array may not be null");

        throw $r2;

     label1:
        $r3 = new org.apache.james.mime4j.io.BinaryInputStream;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r0);

        specialinvoke $r3.<org.apache.james.mime4j.io.BinaryInputStream: void <init>(java.nio.ByteBuffer)>($r1);

        return $r3;
    }
    public static java.io.InputStream create(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.james.mime4j.io.BinaryInputStream $r3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte array may not be null");

        throw $r2;

     label1:
        $r3 = new org.apache.james.mime4j.io.BinaryInputStream;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r0, $i0, $i1);

        specialinvoke $r3.<org.apache.james.mime4j.io.BinaryInputStream: void <init>(java.nio.ByteBuffer)>($r1);

        return $r3;
    }
    public static java.io.InputStream createAscii(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        java.lang.IllegalArgumentException $r1;
        org.apache.james.mime4j.io.TextInputStream $r2;
        java.nio.charset.Charset $r3;

        $r0 := @parameter0: java.lang.CharSequence;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CharSequence may not be null");

        throw $r1;

     label1:
        $r2 = new org.apache.james.mime4j.io.TextInputStream;

        $r3 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r2.<org.apache.james.mime4j.io.TextInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>($r0, $r3, 1024);

        return $r2;
    }
