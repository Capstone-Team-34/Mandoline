org.apache.james.mime4j.stream.RawFieldParser extends java.lang.Object
static final java.util.BitSet COLON
public static final org.apache.james.mime4j.stream.RawFieldParser DEFAULT
static final java.util.BitSet EQUAL_OR_SEMICOLON
static final java.util.BitSet SEMICOLON
    static void <clinit>()
    {
        int[] $r0;
        java.util.BitSet $r1;
        org.apache.james.mime4j.stream.RawFieldParser $r2;

        $r0 = newarray (int)[1];

        $r0[0] = 58;

        $r1 = staticinvoke <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet INIT_BITSET(int[])>($r0);

        <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet COLON> = $r1;

        $r0 = newarray (int)[2];

        $r0[0] = 61;

        $r0[1] = 59;

        $r1 = staticinvoke <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet INIT_BITSET(int[])>($r0);

        <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet EQUAL_OR_SEMICOLON> = $r1;

        $r0 = newarray (int)[1];

        $r0[0] = 59;

        $r1 = staticinvoke <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet INIT_BITSET(int[])>($r0);

        <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet SEMICOLON> = $r1;

        $r2 = new org.apache.james.mime4j.stream.RawFieldParser;

        specialinvoke $r2.<org.apache.james.mime4j.stream.RawFieldParser: void <init>()>();

        <org.apache.james.mime4j.stream.RawFieldParser: org.apache.james.mime4j.stream.RawFieldParser DEFAULT> = $r2;

        return;
    }
    public void <init>()
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static transient java.util.BitSet INIT_BITSET(int[])
    {
        int[] $r0;
        int i0, $i1, $i2;
        java.util.BitSet r1;

        $r0 := @parameter0: int[];

        r1 = new java.util.BitSet;

        i0 = lengthof $r0;

        specialinvoke r1.<java.util.BitSet: void <init>(int)>(i0);

        $i1 = lengthof $r0;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        i0 = $r0[$i2];

        virtualinvoke r1.<java.util.BitSet: void set(int)>(i0);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return r1;
    }
    public void copyContent(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet, java.lang.StringBuilder)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.BitSet $r3;
        java.lang.StringBuilder $r4;
        char c0;
        int $i1, $i2, $i3, $i5;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 := @parameter2: java.util.BitSet;

        $r4 := @parameter3: java.lang.StringBuilder;

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i3 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

     label1:
        if $i2 >= $i3 goto label3;

        $b4 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i2);

        $i5 = $b4 & 255;

        c0 = (char) $i5;

        if $r3 == null goto label2;

        $z0 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>(c0);

        if $z0 != 0 goto label3;

     label2:
        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c0);

        if $z0 != 0 goto label3;

        if c0 != 40 goto label4;

     label3:
        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i1);

        return;

     label4:
        $i1 = $i1 + 1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $i2 = $i2 + 1;

        goto label1;
    }
    public void copyQuotedContent(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.lang.StringBuilder)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.lang.StringBuilder $r3;
        boolean $z0;
        int $i0, $i1, $i2, $i4;
        byte $b3;
        char c5;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 := @parameter2: java.lang.StringBuilder;

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

        $b3 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $i4 = $b3 & 255;

        c5 = (char) $i4;

        if c5 != 34 goto label9;

        $i0 = $i0 + 1;

        $z0 = 0;

        $i1 = $i1 + 1;

     label2:
        if $i1 >= $i2 goto label6;

        $b3 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i1);

        $i4 = $b3 & 255;

        c5 = (char) $i4;

        if $z0 == 0 goto label5;

        if c5 == 34 goto label3;

        if c5 == 92 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

        $z0 = 0;

     label4:
        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label2;

     label5:
        if c5 != 34 goto label7;

        $i0 = $i0 + 1;

     label6:
        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i0);

        return;

     label7:
        if c5 != 92 goto label8;

        $z0 = 1;

        goto label4;

     label8:
        if c5 == 13 goto label4;

        if c5 == 10 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

        goto label4;

     label9:
        return;
    }
    public void copyUnquotedContent(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet, java.lang.StringBuilder)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.BitSet $r3;
        java.lang.StringBuilder $r4;
        char c0;
        int $i1, $i2, $i3, $i5;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 := @parameter2: java.util.BitSet;

        $r4 := @parameter3: java.lang.StringBuilder;

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i3 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

     label1:
        if $i2 >= $i3 goto label3;

        $b4 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i2);

        $i5 = $b4 & 255;

        c0 = (char) $i5;

        if $r3 == null goto label2;

        $z0 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>(c0);

        if $z0 != 0 goto label3;

     label2:
        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c0);

        if $z0 != 0 goto label3;

        if c0 == 40 goto label3;

        if c0 != 34 goto label4;

     label3:
        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i1);

        return;

     label4:
        $i1 = $i1 + 1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $i2 = $i2 + 1;

        goto label1;
    }
    public org.apache.james.mime4j.stream.RawField parseField(org.apache.james.mime4j.util.ByteSequence) throws org.apache.james.mime4j.MimeException
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor r2;
        int $i0;
        java.util.BitSet $r3;
        java.lang.String $r4;
        boolean $z0;
        org.apache.james.mime4j.MimeException $r5;
        java.lang.StringBuilder $r6;
        org.apache.james.mime4j.stream.RawField $r7;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        if $r1 != null goto label1;

        return null;

     label1:
        r2 = new org.apache.james.mime4j.stream.ParserCursor;

        $i0 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        specialinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: void <init>(int,int)>(0, $i0);

        $r3 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet COLON>;

        $r4 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>($r1, r2, $r3);

        $z0 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label2;

        $r5 = new org.apache.james.mime4j.MimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid MIME field: no name/value separator found: ");

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>($r4);

        throw $r5;

     label2:
        $r7 = new org.apache.james.mime4j.stream.RawField;

        $i0 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        specialinvoke $r7.<org.apache.james.mime4j.stream.RawField: void <init>(org.apache.james.mime4j.util.ByteSequence,int,java.lang.String,java.lang.String)>($r1, $i0, $r4, null);

        return $r7;
    }
    public org.apache.james.mime4j.stream.NameValuePair parseParameter(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.BitSet $r3;
        java.lang.String $r4, $r6;
        boolean $z0;
        org.apache.james.mime4j.stream.NameValuePair $r5;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet EQUAL_OR_SEMICOLON>;

        $r4 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>($r1, $r2, $r3);

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        $r5 = new org.apache.james.mime4j.stream.NameValuePair;

        specialinvoke $r5.<org.apache.james.mime4j.stream.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r4, null);

        return $r5;

     label1:
        $i0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b1 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $i0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i0 = $i0 + 1;

        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i0);

        if $b1 != 59 goto label2;

        $r5 = new org.apache.james.mime4j.stream.NameValuePair;

        specialinvoke $r5.<org.apache.james.mime4j.stream.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r4, null);

        return $r5;

     label2:
        $r3 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet SEMICOLON>;

        $r6 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseValue(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>($r1, $r2, $r3);

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i0 = $i0 + 1;

        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i0);

     label3:
        $r5 = new org.apache.james.mime4j.stream.NameValuePair;

        specialinvoke $r5.<org.apache.james.mime4j.stream.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r4, $r6);

        return $r5;
    }
    public java.util.List parseParameters(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.ArrayList r3;
        boolean $z0;
        org.apache.james.mime4j.stream.NameValuePair $r4;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

     label1:
        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: org.apache.james.mime4j.stream.NameValuePair parseParameter(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return r3;
    }
    public org.apache.james.mime4j.stream.RawBody parseRawBody(org.apache.james.mime4j.stream.RawField)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.stream.RawField $r1;
        org.apache.james.mime4j.stream.ParserCursor r2;
        org.apache.james.mime4j.util.ByteSequence $r3, r4;
        int $i0, $i1;
        java.lang.String $r5;
        org.apache.james.mime4j.stream.RawBody $r6;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.stream.RawField;

        $r3 = virtualinvoke $r1.<org.apache.james.mime4j.stream.RawField: org.apache.james.mime4j.util.ByteSequence getRaw()>();

        r4 = $r3;

        $i0 = virtualinvoke $r1.<org.apache.james.mime4j.stream.RawField: int getDelimiterIdx()>();

        $i0 = $i0 + 1;

        if $r3 != null goto label2;

        $r5 = virtualinvoke $r1.<org.apache.james.mime4j.stream.RawField: java.lang.String getBody()>();

        if $r5 != null goto label1;

        $r6 = new org.apache.james.mime4j.stream.RawBody;

        specialinvoke $r6.<org.apache.james.mime4j.stream.RawBody: void <init>(java.lang.String,java.util.List)>("", null);

        return $r6;

     label1:
        r4 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.CharSequence)>($r5);

        $i0 = 0;

     label2:
        r2 = new org.apache.james.mime4j.stream.ParserCursor;

        $i1 = interfaceinvoke r4.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        specialinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: void <init>(int,int)>($i0, $i1);

        $r6 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: org.apache.james.mime4j.stream.RawBody parseRawBody(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r4, r2);

        return $r6;
    }
    public org.apache.james.mime4j.stream.RawBody parseRawBody(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.ArrayList $r3;
        java.util.BitSet $r4;
        java.lang.String $r5;
        boolean $z0;
        org.apache.james.mime4j.stream.RawBody $r6;
        int $i0;
        java.util.List $r7;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r4 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet SEMICOLON>;

        $r5 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>($r1, $r2, $r4);

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        $r6 = new org.apache.james.mime4j.stream.RawBody;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        specialinvoke $r6.<org.apache.james.mime4j.stream.RawBody: void <init>(java.lang.String,java.util.List)>($r5, $r3);

        return $r6;

     label1:
        $i0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i0 = $i0 + 1;

        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i0);

        $r7 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.util.List parseParameters(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        $r6 = new org.apache.james.mime4j.stream.RawBody;

        specialinvoke $r6.<org.apache.james.mime4j.stream.RawBody: void <init>(java.lang.String,java.util.List)>($r5, $r7);

        return $r6;
    }
    public java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.BitSet $r3;
        char c0;
        java.lang.StringBuilder r4;
        boolean z0, $z1;
        int $i1;
        byte $b2;
        java.lang.String $r5;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 := @parameter2: java.util.BitSet;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        z0 = 0;

     label1:
        $z1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z1 != 0 goto label2;

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b2 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i1);

        $i1 = $b2 & 255;

        c0 = (char) $i1;

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>(c0);

        if $z1 == 0 goto label3;

     label2:
        $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label3:
        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c0);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        z0 = 1;

        goto label1;

     label4:
        if c0 != 40 goto label5;

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipComment(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        goto label1;

     label5:
        $i1 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label6;

        if z0 == 0 goto label6;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label6:
        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void copyContent(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet,java.lang.StringBuilder)>($r1, $r2, $r3, r4);

        z0 = 0;

        goto label1;
    }
    public java.lang.String parseValue(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        java.util.BitSet $r3;
        char c0;
        java.lang.StringBuilder r4;
        boolean z0, $z1;
        int $i1;
        byte $b2;
        java.lang.String $r5;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 := @parameter2: java.util.BitSet;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        z0 = 0;

     label1:
        $z1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z1 != 0 goto label2;

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b2 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i1);

        $i1 = $b2 & 255;

        c0 = (char) $i1;

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<java.util.BitSet: boolean get(int)>(c0);

        if $z1 == 0 goto label3;

     label2:
        $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label3:
        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c0);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        z0 = 1;

        goto label1;

     label4:
        if c0 != 40 goto label5;

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipComment(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        goto label1;

     label5:
        if c0 != 34 goto label7;

        $i1 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label6;

        if z0 == 0 goto label6;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label6:
        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void copyQuotedContent(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.lang.StringBuilder)>($r1, $r2, r4);

        z0 = 0;

        goto label1;

     label7:
        $i1 = virtualinvoke r4.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label8;

        if z0 == 0 goto label8;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label8:
        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void copyUnquotedContent(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet,java.lang.StringBuilder)>($r1, $r2, $r3, r4);

        z0 = 0;

        goto label1;
    }
    public void skipAllWhiteSpace(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        char c0;
        boolean $z0;
        int $i1;
        byte $b2;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

     label1:
        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label3;

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b2 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i1);

        $i1 = $b2 & 255;

        c0 = (char) $i1;

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c0);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        goto label1;

     label2:
        if c0 != 40 goto label3;

        virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: void skipComment(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>($r1, $r2);

        goto label1;

     label3:
        return;
    }
    public void skipComment(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i4, $i6;
        byte $b3;
        char c5;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $z0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

        $b3 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $i4 = $b3 & 255;

        c5 = (char) $i4;

        if c5 != 40 goto label9;

        $i0 = $i0 + 1;

        $i4 = $i1 + 1;

        $i1 = 1;

        $z0 = 0;

     label2:
        if $i4 >= $i2 goto label4;

        $b3 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i4);

        $i6 = $b3 & 255;

        c5 = (char) $i6;

        if $z0 == 0 goto label5;

        $z0 = 0;

     label3:
        if $i1 > 0 goto label8;

        $i0 = $i0 + 1;

     label4:
        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i0);

        return;

     label5:
        if c5 != 92 goto label6;

        $z0 = 1;

        goto label3;

     label6:
        if c5 != 40 goto label7;

        $i1 = $i1 + 1;

        goto label3;

     label7:
        if c5 != 41 goto label3;

        $i1 = $i1 + -1;

        goto label3;

     label8:
        $i4 = $i4 + 1;

        $i0 = $i0 + 1;

        goto label2;

     label9:
        return;
    }
    public void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        char c0;
        int $i1, $i2, $i3, $i5;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        $r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $i1 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i3 = virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

     label1:
        if $i2 >= $i3 goto label2;

        $b4 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i2);

        $i5 = $b4 & 255;

        c0 = (char) $i5;

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c0);

        if $z0 != 0 goto label3;

     label2:
        virtualinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i1);

        return;

     label3:
        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;
    }
