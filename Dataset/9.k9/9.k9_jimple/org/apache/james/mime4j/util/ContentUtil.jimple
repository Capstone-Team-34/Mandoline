org.apache.james.mime4j.util.ContentUtil extends java.lang.Object
static final int DEFAULT_COPY_BUFFER_SIZE
    private void <init>()
    {
        org.apache.james.mime4j.util.ContentUtil r0;

        r0 := @this: org.apache.james.mime4j.util.ContentUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String buffer(java.io.Reader) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.StringWriter r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: java.io.Reader;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Reader may not be null");

        throw $r3;

     label1:
        r1 = new java.io.StringWriter;

        specialinvoke r1.<java.io.StringWriter: void <init>()>();

        staticinvoke <org.apache.james.mime4j.util.ContentUtil: void copy(java.io.Reader,java.io.Writer)>($r0, r1);

        $r2 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        return $r2;
    }
    public static byte[] buffer(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.ByteArrayOutputStream r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @parameter0: java.io.InputStream;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r3;

     label1:
        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.james.mime4j.util.ContentUtil: void copy(java.io.InputStream,java.io.OutputStream)>($r0, r1);

        $r2 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }
    public static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        byte[] r2;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        r2 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r2);

        if -1 == $i0 goto label2;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

        goto label1;

     label2:
        return;
    }
    public static void copy(java.io.Reader, java.io.Writer) throws java.io.IOException
    {
        java.io.Reader $r0;
        java.io.Writer $r1;
        char[] r2;
        int $i0;

        $r0 := @parameter0: java.io.Reader;

        $r1 := @parameter1: java.io.Writer;

        r2 = newarray (char)[1024];

     label1:
        $i0 = virtualinvoke $r0.<java.io.Reader: int read(char[])>(r2);

        if -1 == $i0 goto label2;

        virtualinvoke $r1.<java.io.Writer: void write(char[],int,int)>(r2, 0, $i0);

        goto label1;

     label2:
        return;
    }
    public static java.lang.String decode(java.nio.charset.Charset, org.apache.james.mime4j.util.ByteSequence)
    {
        java.nio.charset.Charset $r0;
        org.apache.james.mime4j.util.ByteSequence $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @parameter0: java.nio.charset.Charset;

        $r1 := @parameter1: org.apache.james.mime4j.util.ByteSequence;

        $i0 = interfaceinvoke $r1.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        $r2 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)>($r0, $r1, 0, $i0);

        return $r2;
    }
    public static java.lang.String decode(java.nio.charset.Charset, org.apache.james.mime4j.util.ByteSequence, int, int)
    {
        org.apache.james.mime4j.util.ByteSequence $r0;
        int $i0, $i1;
        java.nio.charset.Charset $r1;
        boolean $z0;
        org.apache.james.mime4j.util.ByteArrayBuffer r2;
        byte[] $r3;
        java.lang.String $r4;

        $r1 := @parameter0: java.nio.charset.Charset;

        $r0 := @parameter1: org.apache.james.mime4j.util.ByteSequence;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $r0 != null goto label1;

        return null;

     label1:
        if $r1 != null goto label2;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

     label2:
        $z0 = $r0 instanceof org.apache.james.mime4j.util.ByteArrayBuffer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.james.mime4j.util.ByteArrayBuffer) $r0;

        $r3 = virtualinvoke r2.<org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>();

        $r4 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,byte[],int,int)>($r1, $r3, $i0, $i1);

        return $r4;

     label3:
        $r3 = interfaceinvoke $r0.<org.apache.james.mime4j.util.ByteSequence: byte[] toByteArray()>();

        $r4 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,byte[],int,int)>($r1, $r3, $i0, $i1);

        return $r4;
    }
    private static java.lang.String decode(java.nio.charset.Charset, byte[], int, int)
    {
        java.nio.charset.Charset $r0;
        byte[] $r1;
        int $i0, $i1;
        java.nio.ByteBuffer $r2;
        java.nio.CharBuffer $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.nio.charset.Charset;

        $r1 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r1, $i0, $i1);

        $r3 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r2);

        $r4 = virtualinvoke $r3.<java.nio.CharBuffer: java.lang.String toString()>();

        return $r4;
    }
    public static java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)
    {
        org.apache.james.mime4j.util.ByteSequence $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r0.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        $r1 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence,int,int)>($r0, 0, $i0);

        return $r1;
    }
    public static java.lang.String decode(org.apache.james.mime4j.util.ByteSequence, int, int)
    {
        org.apache.james.mime4j.util.ByteSequence $r0;
        int $i0, $i1, i2, $i3;
        java.lang.StringBuilder r1;
        byte $b4;
        char $c5;
        java.lang.String $r2;

        $r0 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r0 != null goto label1;

        return null;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>(int)>($i1);

        i2 = $i0;

     label2:
        $i3 = $i0 + $i1;

        if i2 >= $i3 goto label3;

        $b4 = interfaceinvoke $r0.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>(i2);

        $i3 = $b4 & 255;

        $c5 = (char) $i3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
    public static org.apache.james.mime4j.util.ByteSequence encode(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        org.apache.james.mime4j.util.ByteArrayBuffer r1;
        int $i0, $i1;
        char $c2;
        byte $b3;

        $r0 := @parameter0: java.lang.CharSequence;

        if $r0 != null goto label1;

        return null;

     label1:
        r1 = new org.apache.james.mime4j.util.ByteArrayBuffer;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        specialinvoke r1.<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 >= $i1 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        $b3 = (byte) $c2;

        virtualinvoke r1.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($b3);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return r1;
    }
    public static org.apache.james.mime4j.util.ByteSequence encode(java.nio.charset.Charset, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        java.nio.charset.Charset $r1;
        java.nio.CharBuffer $r2;
        java.nio.ByteBuffer $r3;
        org.apache.james.mime4j.util.ByteArrayBuffer r4;
        int $i0, $i1;
        byte[] $r5;

        $r1 := @parameter0: java.nio.charset.Charset;

        $r0 := @parameter1: java.lang.CharSequence;

        if $r0 != null goto label1;

        return null;

     label1:
        if $r1 != null goto label2;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

     label2:
        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>($r0);

        $r3 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r2);

        r4 = new org.apache.james.mime4j.util.ByteArrayBuffer;

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke r4.<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r5 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r4.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>($r5, $i0, $i1);

        return r4;
    }
    public static byte[] toAsciiByteArray(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset US_ASCII>;

        $r1 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: byte[] toByteArray(java.lang.String,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String toAsciiString(org.apache.james.mime4j.util.ByteArrayBuffer)
    {
        org.apache.james.mime4j.util.ByteArrayBuffer $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: org.apache.james.mime4j.util.ByteArrayBuffer;

        $r2 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset US_ASCII>;

        $r1 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String toString(org.apache.james.mime4j.util.ByteArrayBuffer,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String toAsciiString(byte[])
    {
        byte[] $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $r2 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset US_ASCII>;

        $r1 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String toString(byte[],java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String toAsciiString(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset US_ASCII>;

        $r1 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String toString(byte[],int,int,java.nio.charset.Charset)>($r0, $i0, $i1, $r2);

        return $r1;
    }
    public static byte[] toByteArray(java.lang.String, java.nio.charset.Charset)
    {
        java.lang.String $r0, $r3;
        java.io.UnsupportedEncodingException r1;
        java.nio.charset.Charset r2;
        byte[] $r4;
        java.lang.Error $r5;

        $r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.charset.Charset;

        if $r0 != null goto label1;

        return null;

     label1:
        if r2 == null goto label4;

     label2:
        $r3 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>($r3);

     label3:
        return $r4;

     label4:
        r2 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label2;

     label5:
        r1 := @caughtexception;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label5;
    }
    public static java.lang.String toString(org.apache.james.mime4j.util.ByteArrayBuffer, java.nio.charset.Charset)
    {
        org.apache.james.mime4j.util.ByteArrayBuffer $r0;
        java.io.UnsupportedEncodingException r1;
        java.nio.charset.Charset r2;
        java.lang.String $r3, $r5;
        byte[] $r4;
        int $i0;
        java.lang.Error $r6;

        $r0 := @parameter0: org.apache.james.mime4j.util.ByteArrayBuffer;

        r2 := @parameter1: java.nio.charset.Charset;

        if $r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.String;

     label2:
        $r4 = virtualinvoke $r0.<org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>();

        $i0 = virtualinvoke $r0.<org.apache.james.mime4j.util.ByteArrayBuffer: int length()>();

     label3:
        if r2 == null goto label7;

     label4:
        $r5 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r4, 0, $i0, $r5);

     label5:
        return $r3;

     label6:
        r1 := @caughtexception;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

     label7:
        r2 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label4;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label6;
        catch java.io.UnsupportedEncodingException from label4 to label5 with label6;
    }
    public static java.lang.String toString(byte[], int, int, java.nio.charset.Charset)
    {
        byte[] $r0;
        int $i0, $i1;
        java.io.UnsupportedEncodingException r1;
        java.lang.String $r2, $r4;
        java.nio.charset.Charset r3;
        java.lang.Error $r5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        r3 := @parameter3: java.nio.charset.Charset;

        if $r0 != null goto label1;

        return null;

     label1:
        $r4 = new java.lang.String;

        if r3 == null goto label5;

     label2:
        $r2 = virtualinvoke r3.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r0, $i0, $i1, $r2);

     label3:
        return $r4;

     label4:
        r1 := @caughtexception;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

     label5:
        r3 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label2;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }
    public static java.lang.String toString(byte[], java.nio.charset.Charset)
    {
        byte[] $r0;
        java.io.UnsupportedEncodingException r1;
        java.lang.String $r2, $r4;
        java.nio.charset.Charset r3;
        java.lang.Error $r5;

        $r0 := @parameter0: byte[];

        r3 := @parameter1: java.nio.charset.Charset;

        if $r0 != null goto label1;

        return null;

     label1:
        $r4 = new java.lang.String;

        if r3 == null goto label5;

     label2:
        $r2 = virtualinvoke r3.<java.nio.charset.Charset: java.lang.String name()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r0, $r2);

     label3:
        return $r4;

     label4:
        r1 := @caughtexception;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

     label5:
        r3 = <org.apache.james.mime4j.Charsets: java.nio.charset.Charset DEFAULT_CHARSET>;

        goto label2;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }
