org.apache.commons.io.input.CountingInputStream extends org.apache.commons.io.input.ProxyInputStream
private long count
    public void <init>(java.io.InputStream)
    {
        org.apache.commons.io.input.CountingInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>($r1);

        return;
    }
    protected void afterRead(int)
    {
        org.apache.commons.io.input.CountingInputStream r0;
        int $i0;
        long $l1, $l2;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        $i0 := @parameter0: int;

        entermonitor r0;

        if $i0 == -1 goto label2;

     label1:
        $l2 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        $l1 = (long) $i0;

        $l1 = $l2 + $l1;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = $l1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public long getByteCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        java.lang.Throwable $r1;
        long l0;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        entermonitor r0;

     label1:
        l0 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int getCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long $l0;
        byte $b1;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int $i2;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.io.input.CountingInputStream: long getByteCount()>();

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The byte count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large to be converted to an int");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }
    public long resetByteCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        java.lang.Throwable $r1;
        long l0;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        entermonitor r0;

     label1:
        l0 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = 0L;

     label2:
        exitmonitor r0;

        return l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public int resetCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long $l0;
        byte $b1;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int $i2;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.io.input.CountingInputStream: long resetByteCount()>();

        $b1 = $l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The byte count ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large to be converted to an int");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $i2 = (int) $l0;

        return $i2;
    }
    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long $l0, $l1;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        $l0 := @parameter0: long;

        entermonitor r0;

     label1:
        $l0 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: long skip(long)>($l0);

        $l1 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        $l1 = $l1 + $l0;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = $l1;

     label2:
        exitmonitor r0;

        return $l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
