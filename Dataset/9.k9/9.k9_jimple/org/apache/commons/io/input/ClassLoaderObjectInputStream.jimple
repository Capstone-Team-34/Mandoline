org.apache.commons.io.input.ClassLoaderObjectInputStream extends java.io.ObjectInputStream
private final java.lang.ClassLoader classLoader
    public void <init>(java.lang.ClassLoader, java.io.InputStream) throws java.io.IOException, java.io.StreamCorruptedException
    {
        org.apache.commons.io.input.ClassLoaderObjectInputStream r0;
        java.lang.ClassLoader $r1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        $r1 := @parameter0: java.lang.ClassLoader;

        $r2 := @parameter1: java.io.InputStream;

        specialinvoke r0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r2);

        r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader> = $r1;

        return;
    }
    protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.io.input.ClassLoaderObjectInputStream r0;
        java.io.ObjectStreamClass $r1;
        java.lang.ClassLoader $r2;
        java.lang.String $r3;
        java.lang.Class $r4;

        r0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        $r1 := @parameter0: java.io.ObjectStreamClass;

        $r3 = virtualinvoke $r1.<java.io.ObjectStreamClass: java.lang.String getName()>();

        $r2 = r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r2);

        if $r4 == null goto label1;

        return $r4;

     label1:
        $r4 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>($r1);

        return $r4;
    }
    protected java.lang.Class resolveProxyClass(java.lang.String[]) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.io.input.ClassLoaderObjectInputStream r0;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException r2;
        java.lang.Class[] r3;
        java.lang.ClassLoader $r4;
        int $i0, $i1;
        java.lang.String $r5;
        java.lang.Class $r6;

        r0 := @this: org.apache.commons.io.input.ClassLoaderObjectInputStream;

        $r1 := @parameter0: java.lang.String[];

        $i0 = lengthof $r1;

        r3 = newarray (java.lang.Class)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r5 = $r1[$i0];

        $r4 = r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r5, 0, $r4);

        r3[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.commons.io.input.ClassLoaderObjectInputStream: java.lang.ClassLoader classLoader>;

     label3:
        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>($r4, r3);

     label4:
        return $r6;

     label5:
        r2 := @caughtexception;

        $r6 = specialinvoke r0.<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>($r1);

        return $r6;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }
