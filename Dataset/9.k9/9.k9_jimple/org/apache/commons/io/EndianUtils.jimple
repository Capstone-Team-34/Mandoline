org.apache.commons.io.EndianUtils extends java.lang.Object
    public void <init>()
    {
        org.apache.commons.io.EndianUtils r0;

        r0 := @this: org.apache.commons.io.EndianUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static int read(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        java.io.EOFException $r1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if -1 != $i0 goto label1;

        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected EOF reached");

        throw $r1;

     label1:
        return $i0;
    }
    public static double readSwappedDouble(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        long $l0;
        double $d0;

        $r0 := @parameter0: java.io.InputStream;

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>($r0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }
    public static double readSwappedDouble(byte[], int)
    {
        byte[] $r0;
        int $i0;
        long $l1;
        double $d0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>($r0, $i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }
    public static float readSwappedFloat(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0;
        float $f0;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>($r0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }
    public static float readSwappedFloat(byte[], int)
    {
        byte[] $r0;
        int $i0;
        float $f0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(byte[],int)>($r0, $i0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }
    public static int readSwappedInteger(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i2 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i0 = $i0 & 255;

        $i0 = $i0 << 0;

        $i1 = $i1 & 255;

        $i1 = $i1 << 8;

        $i1 = $i0 + $i1;

        $i2 = $i2 & 255;

        $i2 = $i2 << 16;

        $i2 = $i1 + $i2;

        $i3 = $i3 & 255;

        $i3 = $i3 << 24;

        $i3 = $i2 + $i3;

        return $i3;
    }
    public static int readSwappedInteger(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1, $i3;
        byte $b2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b2 = $r0[$i0];

        $i1 = $b2 & 255;

        $i1 = $i1 << 0;

        $i3 = $i0 + 1;

        $b2 = $r0[$i3];

        $i3 = $b2 & 255;

        $i3 = $i3 << 8;

        $i1 = $i1 + $i3;

        $i3 = $i0 + 2;

        $b2 = $r0[$i3];

        $i3 = $b2 & 255;

        $i3 = $i3 << 16;

        $i1 = $i1 + $i3;

        $i0 = $i0 + 3;

        $b2 = $r0[$i0];

        $i0 = $b2 & 255;

        $i0 = $i0 << 24;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public static long readSwappedLong(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] r1;
        int i0, $i1;
        byte $b2;
        long $l3;

        $r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[8];

        i0 = 0;

     label1:
        if i0 >= 8 goto label2;

        $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $b2 = (byte) $i1;

        r1[i0] = $b2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $l3 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(byte[],int)>(r1, 0);

        return $l3;
    }
    public static long readSwappedLong(byte[], int)
    {
        byte[] $r0;
        int $i0, $i3, $i5;
        long l1, l2;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b4 = $r0[$i0];

        $i3 = $b4 & 255;

        $i3 = $i3 << 0;

        $i5 = $i0 + 1;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 8;

        $i3 = $i3 + $i5;

        $i5 = $i0 + 2;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 16;

        $i3 = $i3 + $i5;

        $i5 = $i0 + 3;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 24;

        $i3 = $i3 + $i5;

        l2 = (long) $i3;

        $i3 = $i0 + 4;

        $b4 = $r0[$i3];

        $i3 = $b4 & 255;

        $i3 = $i3 << 0;

        $i5 = $i0 + 5;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 8;

        $i3 = $i3 + $i5;

        $i5 = $i0 + 6;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 16;

        $i3 = $i3 + $i5;

        $i0 = $i0 + 7;

        $b4 = $r0[$i0];

        $i0 = $b4 & 255;

        $i0 = $i0 << 24;

        $i0 = $i3 + $i0;

        l1 = (long) $i0;

        l1 = l1 << 32;

        l2 = 4294967295L & l2;

        l2 = l1 + l2;

        return l2;
    }
    public static short readSwappedShort(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        short $s2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i0 = $i0 & 255;

        $i0 = $i0 << 0;

        $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i1 = $i1 & 255;

        $i1 = $i1 << 8;

        $i0 = $i0 + $i1;

        $s2 = (short) $i0;

        return $s2;
    }
    public static short readSwappedShort(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        byte $b2;
        short $s3;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b2 = $r0[$i0];

        $i1 = $b2 & 255;

        $i1 = $i1 << 0;

        $i0 = $i0 + 1;

        $b2 = $r0[$i0];

        $i0 = $b2 & 255;

        $i0 = $i0 << 8;

        $i0 = $i1 + $i0;

        $s3 = (short) $i0;

        return $s3;
    }
    public static long readSwappedUnsignedInteger(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        long l0, l1;
        int $i2, $i3, $i4, $i5;

        $r0 := @parameter0: java.io.InputStream;

        $i2 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i3 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i4 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i5 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i2 = $i2 & 255;

        $i2 = $i2 << 0;

        $i3 = $i3 & 255;

        $i3 = $i3 << 8;

        $i3 = $i2 + $i3;

        $i4 = $i4 & 255;

        $i4 = $i4 << 16;

        $i4 = $i3 + $i4;

        l1 = (long) $i4;

        $i5 = $i5 & 255;

        l0 = (long) $i5;

        l0 = l0 << 24;

        l1 = 4294967295L & l1;

        l1 = l0 + l1;

        return l1;
    }
    public static long readSwappedUnsignedInteger(byte[], int)
    {
        byte[] $r0;
        int $i0, $i3, $i5;
        long l1, l2;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b4 = $r0[$i0];

        $i3 = $b4 & 255;

        $i3 = $i3 << 0;

        $i5 = $i0 + 1;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 8;

        $i3 = $i3 + $i5;

        $i5 = $i0 + 2;

        $b4 = $r0[$i5];

        $i5 = $b4 & 255;

        $i5 = $i5 << 16;

        $i3 = $i3 + $i5;

        l2 = (long) $i3;

        $i0 = $i0 + 3;

        $b4 = $r0[$i0];

        $i0 = $b4 & 255;

        l1 = (long) $i0;

        l1 = l1 << 24;

        l2 = 4294967295L & l2;

        l2 = l1 + l2;

        return l2;
    }
    public static int readSwappedUnsignedShort(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i1 = staticinvoke <org.apache.commons.io.EndianUtils: int read(java.io.InputStream)>($r0);

        $i0 = $i0 & 255;

        $i0 = $i0 << 0;

        $i1 = $i1 & 255;

        $i1 = $i1 << 8;

        $i1 = $i0 + $i1;

        return $i1;
    }
    public static int readSwappedUnsignedShort(byte[], int)
    {
        byte[] $r0;
        int $i0, $i1;
        byte $b2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b2 = $r0[$i0];

        $i1 = $b2 & 255;

        $i1 = $i1 << 0;

        $i0 = $i0 + 1;

        $b2 = $r0[$i0];

        $i0 = $b2 & 255;

        $i0 = $i0 << 8;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public static double swapDouble(double)
    {
        double $d0;
        long $l0;

        $d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long swapLong(long)>($l0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }
    public static float swapFloat(float)
    {
        float $f0;
        int $i0;

        $f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int swapInteger(int)>($i0);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }
    public static int swapInteger(int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 = $i0 >> 0;

        $i1 = $i1 & 255;

        $i1 = $i1 << 24;

        $i2 = $i0 >> 8;

        $i2 = $i2 & 255;

        $i2 = $i2 << 16;

        $i1 = $i1 + $i2;

        $i2 = $i0 >> 16;

        $i2 = $i2 & 255;

        $i2 = $i2 << 8;

        $i1 = $i1 + $i2;

        $i0 = $i0 >> 24;

        $i0 = $i0 & 255;

        $i0 = $i0 << 0;

        $i0 = $i1 + $i0;

        return $i0;
    }
    public static long swapLong(long)
    {
        long $l0, $l1, $l2;

        $l0 := @parameter0: long;

        $l1 = $l0 >> 0;

        $l1 = $l1 & 255L;

        $l1 = $l1 << 56;

        $l2 = $l0 >> 8;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 48;

        $l1 = $l1 + $l2;

        $l2 = $l0 >> 16;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 40;

        $l1 = $l1 + $l2;

        $l2 = $l0 >> 24;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 32;

        $l1 = $l1 + $l2;

        $l2 = $l0 >> 32;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 24;

        $l1 = $l1 + $l2;

        $l2 = $l0 >> 40;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 16;

        $l1 = $l1 + $l2;

        $l2 = $l0 >> 48;

        $l2 = $l2 & 255L;

        $l2 = $l2 << 8;

        $l1 = $l1 + $l2;

        $l0 = $l0 >> 56;

        $l0 = $l0 & 255L;

        $l0 = $l0 << 0;

        $l0 = $l1 + $l0;

        return $l0;
    }
    public static short swapShort(short)
    {
        short $s0;
        int $i1, $i2;

        $s0 := @parameter0: short;

        $i1 = $s0 >> 0;

        $i1 = $i1 & 255;

        $i1 = $i1 << 8;

        $i2 = $s0 >> 8;

        $i2 = $i2 & 255;

        $i2 = $i2 << 0;

        $i1 = $i1 + $i2;

        $s0 = (short) $i1;

        return $s0;
    }
    public static void writeSwappedDouble(java.io.OutputStream, double) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        double $d0;
        long $l0;

        $r0 := @parameter0: java.io.OutputStream;

        $d0 := @parameter1: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)>($r0, $l0);

        return;
    }
    public static void writeSwappedDouble(byte[], int, double)
    {
        byte[] $r0;
        int $i0;
        double $d0;
        long $l1;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $d0 := @parameter2: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedLong(byte[],int,long)>($r0, $i0, $l1);

        return;
    }
    public static void writeSwappedFloat(java.io.OutputStream, float) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        float $f0;
        int $i0;

        $r0 := @parameter0: java.io.OutputStream;

        $f0 := @parameter1: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)>($r0, $i0);

        return;
    }
    public static void writeSwappedFloat(byte[], int, float)
    {
        byte[] $r0;
        int $i0, $i1;
        float $f0;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $f0 := @parameter2: float;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        staticinvoke <org.apache.commons.io.EndianUtils: void writeSwappedInteger(byte[],int,int)>($r0, $i0, $i1);

        return;
    }
    public static void writeSwappedInteger(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        int $i0, $i1;
        byte $b2;

        $r0 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $i1 = $i0 >> 0;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        $i1 = $i0 >> 8;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        $i1 = $i0 >> 16;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        $i0 = $i0 >> 24;

        $i0 = $i0 & 255;

        $b2 = (byte) $i0;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        return;
    }
    public static void writeSwappedInteger(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = $i1 >> 0;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $i2 = $i0 + 1;

        $i3 = $i1 >> 8;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r0[$i2] = $b4;

        $i2 = $i0 + 2;

        $i3 = $i1 >> 16;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r0[$i2] = $b4;

        $i0 = $i0 + 3;

        $i1 = $i1 >> 24;

        $i1 = $i1 & 255;

        $b4 = (byte) $i1;

        $r0[$i0] = $b4;

        return;
    }
    public static void writeSwappedLong(java.io.OutputStream, long) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        long $l0, $l1;
        int $i2;
        byte $b3;

        $r0 := @parameter0: java.io.OutputStream;

        $l0 := @parameter1: long;

        $l1 = $l0 >> 0;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >> 8;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >> 16;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >> 24;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >> 32;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >> 40;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l1 = $l0 >> 48;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $l0 = $l0 >> 56;

        $l0 = $l0 & 255L;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        return;
    }
    public static void writeSwappedLong(byte[], int, long)
    {
        byte[] $r0;
        int $i0, $i2, $i4;
        long $l1, $l3;
        byte $b5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $l3 = $l1 >> 0;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i0] = $b5;

        $i2 = $i0 + 1;

        $l3 = $l1 >> 8;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i2] = $b5;

        $i2 = $i0 + 2;

        $l3 = $l1 >> 16;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i2] = $b5;

        $i2 = $i0 + 3;

        $l3 = $l1 >> 24;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i2] = $b5;

        $i2 = $i0 + 4;

        $l3 = $l1 >> 32;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i2] = $b5;

        $i2 = $i0 + 5;

        $l3 = $l1 >> 40;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i2] = $b5;

        $i2 = $i0 + 6;

        $l3 = $l1 >> 48;

        $l3 = $l3 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        $r0[$i2] = $b5;

        $i0 = $i0 + 7;

        $l1 = $l1 >> 56;

        $l1 = $l1 & 255L;

        $i2 = (int) $l1;

        $b5 = (byte) $i2;

        $r0[$i0] = $b5;

        return;
    }
    public static void writeSwappedShort(java.io.OutputStream, short) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        short $s0;
        int $i1;
        byte $b2;

        $r0 := @parameter0: java.io.OutputStream;

        $s0 := @parameter1: short;

        $i1 = $s0 >> 0;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        $i1 = $s0 >> 8;

        $i1 = $i1 & 255;

        $b2 = (byte) $i1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b2);

        return;
    }
    public static void writeSwappedShort(byte[], int, short)
    {
        byte[] $r0;
        int $i0, $i2, $i3;
        short $s1;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $s1 := @parameter2: short;

        $i3 = $s1 >> 0;

        $i3 = $i3 & 255;

        $b4 = (byte) $i3;

        $r0[$i0] = $b4;

        $i0 = $i0 + 1;

        $i2 = $s1 >> 8;

        $i2 = $i2 & 255;

        $b4 = (byte) $i2;

        $r0[$i0] = $b4;

        return;
    }
