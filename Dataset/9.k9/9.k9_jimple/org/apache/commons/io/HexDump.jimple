org.apache.commons.io.HexDump extends java.lang.Object
public static final java.lang.String EOL
private static final char[] _hexcodes
private static final int[] _shifts
    static void <clinit>()
    {
        java.lang.String $r0;
        char[] $r1;
        int[] $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.apache.commons.io.HexDump: java.lang.String EOL> = $r0;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <org.apache.commons.io.HexDump: char[] _hexcodes> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 28;

        $r2[1] = 24;

        $r2[2] = 20;

        $r2[3] = 16;

        $r2[4] = 12;

        $r2[5] = 8;

        $r2[6] = 4;

        $r2[7] = 0;

        <org.apache.commons.io.HexDump: int[] _shifts> = $r2;

        return;
    }
    public void <init>()
    {
        org.apache.commons.io.HexDump r0;

        r0 := @this: org.apache.commons.io.HexDump;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    private static java.lang.StringBuilder dump(java.lang.StringBuilder, byte)
    {
        java.lang.StringBuilder $r0;
        byte $b0;
        int $i1, i2;
        char[] $r1;
        int[] $r2;
        char $c3;

        $r0 := @parameter0: java.lang.StringBuilder;

        $b0 := @parameter1: byte;

        i2 = 0;

     label1:
        if i2 >= 2 goto label2;

        $r1 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r2 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i1 = i2 + 6;

        $i1 = $r2[$i1];

        $i1 = $b0 >> $i1;

        $i1 = $i1 & 15;

        $c3 = $r1[$i1];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r0;
    }
    private static java.lang.StringBuilder dump(java.lang.StringBuilder, long)
    {
        java.lang.StringBuilder $r0;
        long $l0, $l3;
        int i1, $i2;
        char[] $r1;
        int[] $r2;
        char $c4;

        $r0 := @parameter0: java.lang.StringBuilder;

        $l0 := @parameter1: long;

        i1 = 0;

     label1:
        if i1 >= 8 goto label2;

        $r1 = <org.apache.commons.io.HexDump: char[] _hexcodes>;

        $r2 = <org.apache.commons.io.HexDump: int[] _shifts>;

        $i2 = $r2[i1];

        $l3 = $l0 >> $i2;

        $i2 = (int) $l3;

        $i2 = $i2 & 15;

        $c4 = $r1[$i2];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }
    public static void dump(byte[], long, java.io.OutputStream, int) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException
    {
        byte[] $r0, $r7;
        long $l0, $l3;
        java.io.OutputStream $r1;
        int $i1, $i2, i4, $i5;
        java.lang.StringBuilder r2, $r6;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;
        byte $b6;
        char $c7;

        $r0 := @parameter0: byte[];

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.io.OutputStream;

        $i1 := @parameter3: int;

        if $i1 < 0 goto label01;

        $i2 = lengthof $r0;

        if $i1 < $i2 goto label02;

     label01:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal index: ");

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into array of length ");

        $i1 = lengthof $r0;

        r2 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label02:
        if $r1 != null goto label03;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot write to nullstream");

        throw $r5;

     label03:
        $l3 = (long) $i1;

        $l0 = $l0 + $l3;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>(74);

     label04:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label14;

        $i2 = lengthof $r0;

        $i2 = $i2 - $i1;

        if $i2 <= 16 goto label05;

        $i2 = 16;

     label05:
        $r6 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,long)>(r2, $l0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i4 = 0;

     label06:
        if i4 >= 16 goto label09;

        if i4 >= $i2 goto label08;

        $i5 = i4 + $i1;

        $b6 = $r0[$i5];

        staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,byte)>(r2, $b6);

     label07:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i4 = i4 + 1;

        goto label06;

     label08:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        goto label07;

     label09:
        i4 = 0;

     label10:
        if i4 >= $i2 goto label13;

        $i5 = i4 + $i1;

        $b6 = $r0[$i5];

        if $b6 < 32 goto label12;

        $i5 = i4 + $i1;

        $b6 = $r0[$i5];

        if $b6 >= 127 goto label12;

        $i5 = i4 + $i1;

        $b6 = $r0[$i5];

        $c7 = (char) $b6;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

     label11:
        i4 = i4 + 1;

        goto label10;

     label12:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        goto label11;

     label13:
        $r4 = <org.apache.commons.io.HexDump: java.lang.String EOL>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[])>($r7);

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        virtualinvoke r2.<java.lang.StringBuilder: void setLength(int)>(0);

        $l3 = (long) $i2;

        $l0 = $l0 + $l3;

        $i1 = $i1 + 16;

        goto label04;

     label14:
        return;
    }
