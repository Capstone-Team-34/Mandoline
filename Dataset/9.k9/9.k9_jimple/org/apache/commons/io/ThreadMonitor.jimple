org.apache.commons.io.ThreadMonitor extends java.lang.Object implements java.lang.Runnable
private final java.lang.Thread thread
private final long timeout
    private void <init>(java.lang.Thread, long)
    {
        org.apache.commons.io.ThreadMonitor r0;
        java.lang.Thread $r1;
        long $l0;

        r0 := @this: org.apache.commons.io.ThreadMonitor;

        $r1 := @parameter0: java.lang.Thread;

        $l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.io.ThreadMonitor: java.lang.Thread thread> = $r1;

        r0.<org.apache.commons.io.ThreadMonitor: long timeout> = $l0;

        return;
    }
    public static java.lang.Thread start(long)
    {
        long $l0;
        java.lang.Thread $r0;

        $l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r0 = staticinvoke <org.apache.commons.io.ThreadMonitor: java.lang.Thread start(java.lang.Thread,long)>($r0, $l0);

        return $r0;
    }
    public static java.lang.Thread start(java.lang.Thread, long)
    {
        java.lang.Thread $r0;
        long $l0;
        org.apache.commons.io.ThreadMonitor r1;
        java.lang.String $r2;
        byte $b1;
        java.lang.Class $r3;

        $r0 := @parameter0: java.lang.Thread;

        $l0 := @parameter1: long;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        r1 = new org.apache.commons.io.ThreadMonitor;

        specialinvoke r1.<org.apache.commons.io.ThreadMonitor: void <init>(java.lang.Thread,long)>($r0, $l0);

        $r0 = new java.lang.Thread;

        $r3 = class "Lorg/apache/commons/io/ThreadMonitor;";

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, $r2);

        virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        return $r0;

     label1:
        return null;
    }
    public static void stop(java.lang.Thread)
    {
        java.lang.Thread $r0;

        $r0 := @parameter0: java.lang.Thread;

        if $r0 == null goto label1;

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

     label1:
        return;
    }
    public void run()
    {
        org.apache.commons.io.ThreadMonitor r0;
        long $l0;
        java.lang.Thread $r1;
        java.lang.InterruptedException $r2;

        r0 := @this: org.apache.commons.io.ThreadMonitor;

        $l0 = r0.<org.apache.commons.io.ThreadMonitor: long timeout>;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>($l0);

     label2:
        $r1 = r0.<org.apache.commons.io.ThreadMonitor: java.lang.Thread thread>;

     label3:
        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }
