org.apache.commons.io.FilenameUtils extends java.lang.Object
public static final char EXTENSION_SEPARATOR
public static final java.lang.String EXTENSION_SEPARATOR_STR
private static final char OTHER_SEPARATOR
private static final char SYSTEM_SEPARATOR
private static final char UNIX_SEPARATOR
private static final char WINDOWS_SEPARATOR
    static void <clinit>()
    {
        java.lang.String $r0;
        char $c0;
        boolean $z0;

        $r0 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(46);

        <org.apache.commons.io.FilenameUtils: java.lang.String EXTENSION_SEPARATOR_STR> = $r0;

        $c0 = <java.io.File: char separatorChar>;

        <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR> = $c0;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();

        if $z0 == 0 goto label1;

        <org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR> = 47;

        return;

     label1:
        <org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR> = 92;

        return;
    }
    public void <init>()
    {
        org.apache.commons.io.FilenameUtils r0;

        r0 := @this: org.apache.commons.io.FilenameUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String concat(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>($r1);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        if $i0 <= 0 goto label2;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r1);

        return $r0;

     label2:
        if $r0 == null goto label5;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r1);

        return $r0;

     label3:
        $i0 = $i0 + -1;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c1);

        if $z0 == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r0);

        return $r0;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r0);

        return $r0;

     label5:
        return null;
    }
    public static boolean directoryContains(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.commons.io.IOCase $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Directory must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        return 0;

     label2:
        $r3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = virtualinvoke $r3.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>($r0, $r1);

        if $z0 != 0 goto label3;

        $r3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = virtualinvoke $r3.<org.apache.commons.io.IOCase: boolean checkStartsWith(java.lang.String,java.lang.String)>($r1, $r0);

        return $z0;

     label3:
        return 0;
    }
    private static java.lang.String doGetFullPath(java.lang.String, boolean)
    {
        boolean $z0;
        java.lang.String r0;
        int $i0, $i1;
        byte $b2;

        r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r0);

        if $i0 >= 0 goto label2;

        return null;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 < $i1 goto label3;

        if $z0 == 0 goto label8;

        r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getPrefix(java.lang.String)>(r0);

        return r0;

     label3:
        $i1 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>(r0);

        if $i1 >= 0 goto label4;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return r0;

     label4:
        if $z0 == 0 goto label7;

        $b2 = 1;

     label5:
        $i0 = $i1 + $b2;

        if $i0 != 0 goto label6;

        $i0 = $i0 + 1;

     label6:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return r0;

     label7:
        $b2 = 0;

        goto label5;

     label8:
        return r0;
    }
    private static java.lang.String doGetPath(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        return null;

     label1:
        $i1 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>($r0);

        if $i1 < 0 goto label4;

        $i2 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>($r0);

        $i0 = $i2 + $i0;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 >= $i3 goto label2;

        if $i2 < 0 goto label2;

        if $i1 < $i0 goto label3;

     label2:
        return "";

     label3:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        return $r0;

     label4:
        return null;
    }
    private static java.lang.String doNormalize(java.lang.String, char, boolean)
    {
        char $c0, $c5, $c7;
        boolean $z0, z1;
        char[] r0;
        int i1, $i2, $i3, $i4, $i6, $i8, $i9;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $c0 := @parameter1: char;

        $z0 := @parameter2: boolean;

        if r1 != null goto label01;

        return null;

     label01:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = $i2;

        if $i2 == 0 goto label29;

        $i3 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>(r1);

        if $i3 >= 0 goto label02;

        return null;

     label02:
        $i4 = $i2 + 2;

        r0 = newarray (char)[$i4];

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i4, r0, 0);

        $c5 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;

        if $c0 != $c5 goto label06;

        $c5 = <org.apache.commons.io.FilenameUtils: char OTHER_SEPARATOR>;

     label03:
        $i4 = 0;

     label04:
        $i6 = lengthof r0;

        if $i4 >= $i6 goto label07;

        $c7 = r0[$i4];

        if $c7 != $c5 goto label05;

        r0[$i4] = $c0;

     label05:
        $i4 = $i4 + 1;

        goto label04;

     label06:
        $c5 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;

        goto label03;

     label07:
        z1 = 1;

        $i4 = $i2 + -1;

        $c5 = r0[$i4];

        if $c5 == $c0 goto label08;

        r0[$i2] = $c0;

        z1 = 0;

        i1 = $i2 + 1;

     label08:
        $i2 = $i3 + 1;

     label09:
        if $i2 >= i1 goto label11;

        $c5 = r0[$i2];

        if $c5 != $c0 goto label10;

        $i4 = $i2 + -1;

        $c5 = r0[$i4];

        if $c5 != $c0 goto label10;

        $i4 = $i2 + -1;

        $i6 = i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i2, r0, $i4, $i6);

        i1 = i1 + -1;

        $i2 = $i2 + -1;

     label10:
        $i2 = $i2 + 1;

        goto label09;

     label11:
        $i2 = $i3 + 1;

     label12:
        if $i2 >= i1 goto label16;

        $c5 = r0[$i2];

        if $c5 != $c0 goto label15;

        $i4 = $i2 + -1;

        $c5 = r0[$i4];

        if $c5 != 46 goto label15;

        $i4 = $i3 + 1;

        if $i2 == $i4 goto label13;

        $i4 = $i2 + -2;

        $c5 = r0[$i4];

        if $c5 != $c0 goto label15;

     label13:
        $i4 = i1 + -1;

        if $i2 != $i4 goto label14;

        z1 = 1;

     label14:
        $i4 = $i2 + 1;

        $i6 = $i2 + -1;

        $i8 = i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i4, r0, $i6, $i8);

        i1 = i1 + -2;

        $i2 = $i2 + -1;

     label15:
        $i2 = $i2 + 1;

        goto label12;

     label16:
        $i2 = $i3 + 2;

     label17:
        if $i2 >= i1 goto label25;

        $c5 = r0[$i2];

        if $c5 != $c0 goto label22;

        $i4 = $i2 + -1;

        $c5 = r0[$i4];

        if $c5 != 46 goto label22;

        $i4 = $i2 + -2;

        $c5 = r0[$i4];

        if $c5 != 46 goto label22;

        $i4 = $i3 + 2;

        if $i2 == $i4 goto label18;

        $i4 = $i2 + -3;

        $c5 = r0[$i4];

        if $c5 != $c0 goto label22;

     label18:
        $i4 = $i3 + 2;

        if $i2 != $i4 goto label19;

        return null;

     label19:
        $i4 = i1 + -1;

        if $i2 != $i4 goto label20;

        z1 = 1;

     label20:
        $i4 = $i2 + -4;

     label21:
        if $i4 < $i3 goto label24;

        $c5 = r0[$i4];

        if $c5 != $c0 goto label23;

        $i6 = $i2 + 1;

        $i8 = $i4 + 1;

        $i9 = i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i6, r0, $i8, $i9);

        $i2 = $i2 - $i4;

        i1 = i1 - $i2;

        $i2 = $i4 + 1;

     label22:
        $i2 = $i2 + 1;

        goto label17;

     label23:
        $i4 = $i4 + -1;

        goto label21;

     label24:
        $i4 = $i2 + 1;

        $i6 = i1 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i4, r0, $i3, $i6);

        $i2 = $i2 + 1;

        $i2 = $i2 - $i3;

        i1 = i1 - $i2;

        $i2 = $i3 + 1;

        goto label22;

     label25:
        if i1 > 0 goto label26;

        return "";

     label26:
        if i1 > $i3 goto label27;

        r1 = new java.lang.String;

        specialinvoke r1.<java.lang.String: void <init>(char[],int,int)>(r0, 0, i1);

        return r1;

     label27:
        if z1 == 0 goto label28;

        if $z0 == 0 goto label28;

        r1 = new java.lang.String;

        specialinvoke r1.<java.lang.String: void <init>(char[],int,int)>(r0, 0, i1);

        return r1;

     label28:
        r1 = new java.lang.String;

        $i3 = i1 + -1;

        specialinvoke r1.<java.lang.String: void <init>(char[],int,int)>(r0, 0, $i3);

     label29:
        return r1;
    }
    public static boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.apache.commons.io.IOCase $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>($r0, $r1, 0, $r2);

        return $z0;
    }
    public static boolean equals(java.lang.String, java.lang.String, boolean, org.apache.commons.io.IOCase)
    {
        boolean $z0;
        java.lang.String $r0, $r1, $r3, $r4;
        org.apache.commons.io.IOCase $r2;
        java.lang.NullPointerException $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: org.apache.commons.io.IOCase;

        if $r0 == null goto label1;

        if $r1 != null goto label3;

     label1:
        if $r0 != null goto label2;

        if $r1 != null goto label2;

        return 1;

     label2:
        return 0;

     label3:
        if $z0 == 0 goto label5;

        $r3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r0);

        $r0 = $r3;

        $r4 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>($r1);

        $r1 = $r4;

        if $r3 == null goto label4;

        if $r4 != null goto label5;

     label4:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Error normalizing one or both of the file names");

        throw $r5;

     label5:
        if $r2 != null goto label6;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

     label6:
        $z0 = virtualinvoke $r2.<org.apache.commons.io.IOCase: boolean checkEquals(java.lang.String,java.lang.String)>($r0, $r1);

        return $z0;
    }
    public static boolean equalsNormalized(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.apache.commons.io.IOCase $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>($r0, $r1, 1, $r2);

        return $z0;
    }
    public static boolean equalsNormalizedOnSystem(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.apache.commons.io.IOCase $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>($r0, $r1, 1, $r2);

        return $z0;
    }
    public static boolean equalsOnSystem(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.apache.commons.io.IOCase $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean equals(java.lang.String,java.lang.String,boolean,org.apache.commons.io.IOCase)>($r0, $r1, 0, $r2);

        return $z0;
    }
    public static java.lang.String getBaseName(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getName(java.lang.String)>($r0);

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String removeExtension(java.lang.String)>($r0);

        return $r0;
    }
    public static java.lang.String getExtension(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>($r0);

        if $i0 != -1 goto label2;

        return "";

     label2:
        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r0;
    }
    public static java.lang.String getFullPath(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>($r0, 1);

        return $r0;
    }
    public static java.lang.String getFullPathNoEndSeparator(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetFullPath(java.lang.String,boolean)>($r0, 0);

        return $r0;
    }
    public static java.lang.String getName(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>($r0);

        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r0;
    }
    public static java.lang.String getPath(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>($r0, 1);

        return $r0;
    }
    public static java.lang.String getPathNoEndSeparator(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doGetPath(java.lang.String,int)>($r0, 0);

        return $r0;
    }
    public static java.lang.String getPrefix(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int getPrefixLength(java.lang.String)>($r0);

        if $i0 < 0 goto label3;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label2:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;

     label3:
        return null;
    }
    public static int getPrefixLength(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i2, i3, $i4, i5;
        char $c1, $c6;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label01;

        return -1;

     label01:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

        return 0;

     label02:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c1 != 58 goto label03;

        return -1;

     label03:
        if $i0 != 1 goto label05;

        if $c1 != 126 goto label04;

        return 2;

     label04:
        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c1);

        if $z0 != 0 goto label20;

        return 0;

     label05:
        if $c1 != 126 goto label09;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(47, 1);

        i3 = $i2;

        $i4 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(92, 1);

        i5 = $i4;

        if $i2 != -1 goto label06;

        if $i4 != -1 goto label06;

        $i0 = $i0 + 1;

        return $i0;

     label06:
        if $i2 != -1 goto label07;

        i3 = $i4;

     label07:
        if $i4 != -1 goto label08;

        i5 = i3;

     label08:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>(i3, i5);

        $i0 = $i0 + 1;

        return $i0;

     label09:
        $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        if $c6 != 58 goto label13;

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        if $c1 < 65 goto label12;

        if $c1 > 90 goto label12;

        if $i0 == 2 goto label10;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2);

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c1);

        if $z0 != 0 goto label11;

     label10:
        return 2;

     label11:
        return 3;

     label12:
        return -1;

     label13:
        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c1);

        if $z0 == 0 goto label19;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c6);

        if $z0 == 0 goto label19;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(47, 2);

        $i2 = $i0;

        i3 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(92, 2);

        $i4 = i3;

        if $i0 != -1 goto label14;

        if i3 == -1 goto label15;

     label14:
        if $i0 == 2 goto label15;

        if i3 != 2 goto label16;

     label15:
        return -1;

     label16:
        if $i0 != -1 goto label17;

        $i2 = i3;

     label17:
        if i3 != -1 goto label18;

        $i4 = $i2;

     label18:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i4);

        $i0 = $i0 + 1;

        return $i0;

     label19:
        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSeparator(char)>($c1);

        if $z0 != 0 goto label20;

        return 0;

     label20:
        return 1;
    }
    public static int indexOfExtension(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, i1, $i2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(46);

        i1 = $i0;

        $i2 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfLastSeparator(java.lang.String)>($r0);

        if $i2 <= $i0 goto label2;

        i1 = -1;

     label2:
        return i1;
    }
    public static int indexOfLastSeparator(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return -1;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(47);

        $i1 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(92);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        return $i0;
    }
    public static boolean isExtension(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        return 0;

     label1:
        if $r1 == null goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>($r0);

        if $i0 != -1 goto label4;

        return 1;

     label3:
        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>($r0);

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;

     label4:
        return 0;
    }
    public static boolean isExtension(java.lang.String, java.util.Collection)
    {
        java.lang.String $r0, r4;
        java.util.Collection r1;
        boolean $z0, $z1;
        int $i0;
        java.util.Iterator $r2;
        java.lang.Object $r3;

        $r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Collection;

        $z0 = 1;

        if $r0 != null goto label1;

        return 0;

     label1:
        if r1 == null goto label2;

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label5;

     label2:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>($r0);

        if $i0 != -1 goto label4;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>($r0);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label6;

        return 1;

     label7:
        return 0;
    }
    public static boolean isExtension(java.lang.String, java.lang.String[])
    {
        java.lang.String $r0, $r2;
        java.lang.String[] $r1;
        int i0, i1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String[];

        $z0 = 1;

        if $r0 != null goto label1;

        return 0;

     label1:
        if $r1 == null goto label2;

        i0 = lengthof $r1;

        if i0 != 0 goto label5;

     label2:
        i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>($r0);

        if i0 != -1 goto label4;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>($r0);

        i0 = lengthof $r1;

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        $r0 = $r1[i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label7;

        return 1;

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        return 0;
    }
    private static boolean isSeparator(char)
    {
        char $c0;

        $c0 := @parameter0: char;

        if $c0 == 47 goto label1;

        if $c0 != 92 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    static boolean isSystemWindows()
    {
        char $c0;

        $c0 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;

        if $c0 != 92 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static java.lang.String normalize(java.lang.String)
    {
        java.lang.String $r0;
        char $c0;

        $r0 := @parameter0: java.lang.String;

        $c0 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>($r0, $c0, 1);

        return $r0;
    }
    public static java.lang.String normalize(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;
        char c0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        c0 = 47;

     label1:
        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>($r0, c0, 1);

        return $r0;

     label2:
        c0 = 92;

        goto label1;
    }
    public static java.lang.String normalizeNoEndSeparator(java.lang.String)
    {
        java.lang.String $r0;
        char $c0;

        $r0 := @parameter0: java.lang.String;

        $c0 = <org.apache.commons.io.FilenameUtils: char SYSTEM_SEPARATOR>;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>($r0, $c0, 0);

        return $r0;
    }
    public static java.lang.String normalizeNoEndSeparator(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;
        char c0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        c0 = 47;

     label1:
        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String doNormalize(java.lang.String,char,boolean)>($r0, c0, 0);

        return $r0;

     label2:
        c0 = 92;

        goto label1;
    }
    public static java.lang.String removeExtension(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = staticinvoke <org.apache.commons.io.FilenameUtils: int indexOfExtension(java.lang.String)>(r0);

        if $i0 == -1 goto label2;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        return r0;
    }
    public static java.lang.String separatorsToSystem(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();

        if $z0 == 0 goto label2;

        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToWindows(java.lang.String)>($r0);

        return $r0;

     label2:
        $r0 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String separatorsToUnix(java.lang.String)>($r0);

        return $r0;
    }
    public static java.lang.String separatorsToUnix(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(92);

        if $i0 != -1 goto label1;

        return r0;

     label1:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

     label2:
        return r0;
    }
    public static java.lang.String separatorsToWindows(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(47);

        if $i0 != -1 goto label1;

        return r0;

     label1:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, 92);

     label2:
        return r0;
    }
    static java.lang.String[] splitOnTokens(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder r1;
        java.util.ArrayList r2;
        int $i0, $i1;
        java.lang.String[] $r3;
        char[] $r4;
        char $c2;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Object[] $r6;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(63);

        if $i0 != -1 goto label01;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(42);

        if $i0 != -1 goto label01;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r0;

        return $r3;

     label01:
        $r4 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

     label02:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label09;

        $c2 = $r4[$i0];

        if $c2 == 63 goto label03;

        $c2 = $r4[$i0];

        if $c2 != 42 goto label08;

     label03:
        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i1 == 0 goto label04;

        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(0);

     label04:
        $c2 = $r4[$i0];

        if $c2 != 63 goto label06;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>("?");

     label05:
        $i0 = $i0 + 1;

        goto label02;

     label06:
        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label07;

        if $i0 <= 0 goto label05;

        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $i1 = $i1 + -1;

        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r0 = (java.lang.String) $r5;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 != 0 goto label05;

     label07:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>("*");

        goto label05;

     label08:
        $c2 = $r4[$i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label05;

     label09:
        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 == 0 goto label10;

        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

     label10:
        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (java.lang.String[]) $r6;

        return $r3;
    }
    public static boolean wildcardMatch(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        org.apache.commons.io.IOCase $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>($r0, $r1, $r2);

        return $z0;
    }
    public static boolean wildcardMatch(java.lang.String, java.lang.String, org.apache.commons.io.IOCase)
    {
        java.lang.String $r0, $r1;
        java.util.Stack r2;
        org.apache.commons.io.IOCase $r3;
        java.lang.String[] $r4;
        boolean z0, $z1;
        int i0, i1, $i2;
        java.lang.Object $r5;
        int[] r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.commons.io.IOCase;

        if $r0 != null goto label01;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $r0 == null goto label02;

        if $r1 != null goto label03;

     label02:
        return 0;

     label03:
        if $r3 != null goto label04;

        $r3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

     label04:
        $r4 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String[] splitOnTokens(java.lang.String)>($r1);

        z0 = 0;

        i0 = 0;

        i1 = 0;

        r2 = new java.util.Stack;

        specialinvoke r2.<java.util.Stack: void <init>()>();

     label05:
        $i2 = virtualinvoke r2.<java.util.Stack: int size()>();

        if $i2 <= 0 goto label06;

        $r5 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>();

        r6 = (int[]) $r5;

        i1 = r6[0];

        i0 = r6[1];

        z0 = 1;

     label06:
        $i2 = lengthof $r4;

        if i1 >= $i2 goto label07;

        $r1 = $r4[i1];

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("?");

        if $z1 == 0 goto label11;

        i0 = i0 + 1;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 <= $i2 goto label09;

     label07:
        $i2 = lengthof $r4;

        if i1 != $i2 goto label08;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i0 == $i2 goto label15;

     label08:
        $i2 = virtualinvoke r2.<java.util.Stack: int size()>();

        if $i2 > 0 goto label05;

        return 0;

     label09:
        z0 = 0;

     label10:
        i1 = i1 + 1;

        goto label06;

     label11:
        $r1 = $r4[i1];

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z1 == 0 goto label12;

        z0 = 1;

        $i2 = lengthof $r4;

        $i2 = $i2 + -1;

        if i1 != $i2 goto label10;

        i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        goto label10;

     label12:
        if z0 == 0 goto label14;

        $r1 = $r4[i1];

        $i2 = virtualinvoke $r3.<org.apache.commons.io.IOCase: int checkIndexOf(java.lang.String,int,java.lang.String)>($r0, i0, $r1);

        i0 = $i2;

        if $i2 == -1 goto label07;

        $i2 = $i2 + 1;

        $r1 = $r4[i1];

        $i2 = virtualinvoke $r3.<org.apache.commons.io.IOCase: int checkIndexOf(java.lang.String,int,java.lang.String)>($r0, $i2, $r1);

        if $i2 < 0 goto label13;

        r6 = newarray (int)[2];

        r6[0] = i1;

        r6[1] = $i2;

        virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r6);

     label13:
        $r1 = $r4[i1];

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        i0 = i0 + $i2;

        z0 = 0;

        goto label10;

     label14:
        $r1 = $r4[i1];

        $z1 = virtualinvoke $r3.<org.apache.commons.io.IOCase: boolean checkRegionMatches(java.lang.String,int,java.lang.String)>($r0, i0, $r1);

        if $z1 != 0 goto label13;

        goto label07;

     label15:
        return 1;
    }
    public static boolean wildcardMatchOnSystem(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        org.apache.commons.io.IOCase $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String,org.apache.commons.io.IOCase)>($r0, $r1, $r2);

        return $z0;
    }
