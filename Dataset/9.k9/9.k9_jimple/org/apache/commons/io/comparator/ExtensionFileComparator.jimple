org.apache.commons.io.comparator.ExtensionFileComparator extends org.apache.commons.io.comparator.AbstractFileComparator implements java.io.Serializable
public static final java.util.Comparator EXTENSION_COMPARATOR
public static final java.util.Comparator EXTENSION_INSENSITIVE_COMPARATOR
public static final java.util.Comparator EXTENSION_INSENSITIVE_REVERSE
public static final java.util.Comparator EXTENSION_REVERSE
public static final java.util.Comparator EXTENSION_SYSTEM_COMPARATOR
public static final java.util.Comparator EXTENSION_SYSTEM_REVERSE
private final org.apache.commons.io.IOCase caseSensitivity
    static void <clinit>()
    {
        org.apache.commons.io.comparator.ExtensionFileComparator $r0;
        org.apache.commons.io.comparator.ReverseComparator $r1;
        java.util.Comparator $r2;
        org.apache.commons.io.IOCase $r3;

        $r0 = new org.apache.commons.io.comparator.ExtensionFileComparator;

        specialinvoke $r0.<org.apache.commons.io.comparator.ExtensionFileComparator: void <init>()>();

        <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_REVERSE> = $r1;

        $r0 = new org.apache.commons.io.comparator.ExtensionFileComparator;

        $r3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        specialinvoke $r0.<org.apache.commons.io.comparator.ExtensionFileComparator: void <init>(org.apache.commons.io.IOCase)>($r3);

        <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_INSENSITIVE_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_INSENSITIVE_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_INSENSITIVE_REVERSE> = $r1;

        $r0 = new org.apache.commons.io.comparator.ExtensionFileComparator;

        $r3 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        specialinvoke $r0.<org.apache.commons.io.comparator.ExtensionFileComparator: void <init>(org.apache.commons.io.IOCase)>($r3);

        <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_SYSTEM_COMPARATOR> = $r0;

        $r1 = new org.apache.commons.io.comparator.ReverseComparator;

        $r2 = <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_SYSTEM_COMPARATOR>;

        specialinvoke $r1.<org.apache.commons.io.comparator.ReverseComparator: void <init>(java.util.Comparator)>($r2);

        <org.apache.commons.io.comparator.ExtensionFileComparator: java.util.Comparator EXTENSION_SYSTEM_REVERSE> = $r1;

        return;
    }
    public void <init>()
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        org.apache.commons.io.IOCase $r1;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        $r1 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

        r0.<org.apache.commons.io.comparator.ExtensionFileComparator: org.apache.commons.io.IOCase caseSensitivity> = $r1;

        return;
    }
    public void <init>(org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        org.apache.commons.io.IOCase $r1;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        $r1 := @parameter0: org.apache.commons.io.IOCase;

        specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();

        if $r1 != null goto label1;

        $r1 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SENSITIVE>;

     label1:
        r0.<org.apache.commons.io.comparator.ExtensionFileComparator: org.apache.commons.io.IOCase caseSensitivity> = $r1;

        return;
    }
    public int compare(java.io.File, java.io.File)
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        java.io.File $r1, $r2;
        java.lang.String $r3, $r4;
        org.apache.commons.io.IOCase $r5;
        int $i0;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.File;

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $r3 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        $r4 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String getExtension(java.lang.String)>($r4);

        $r5 = r0.<org.apache.commons.io.comparator.ExtensionFileComparator: org.apache.commons.io.IOCase caseSensitivity>;

        $i0 = virtualinvoke $r5.<org.apache.commons.io.IOCase: int checkCompareTo(java.lang.String,java.lang.String)>($r3, $r4);

        return $i0;
    }
    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        int $i0;
        java.lang.Object $r1, $r2;
        java.io.File $r3, $r4;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = (java.io.File) $r1;

        $r4 = (java.io.File) $r2;

        $i0 = virtualinvoke r0.<org.apache.commons.io.comparator.ExtensionFileComparator: int compare(java.io.File,java.io.File)>($r3, $r4);

        return $i0;
    }
    public volatile java.util.List sort(java.util.List)
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        $r1 := @parameter0: java.util.List;

        $r1 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.util.List sort(java.util.List)>($r1);

        return $r1;
    }
    public volatile java.io.File[] sort(java.io.File[])
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        java.io.File[] $r1;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        $r1 := @parameter0: java.io.File[];

        $r1 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.io.File[] sort(java.io.File[])>($r1);

        return $r1;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.comparator.ExtensionFileComparator r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.apache.commons.io.IOCase $r3;

        r0 := @this: org.apache.commons.io.comparator.ExtensionFileComparator;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.apache.commons.io.comparator.AbstractFileComparator: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[caseSensitivity=");

        $r3 = r0.<org.apache.commons.io.comparator.ExtensionFileComparator: org.apache.commons.io.IOCase caseSensitivity>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
