org.apache.commons.io.filefilter.CanWriteFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
public static final org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE
public static final org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE
    static void <clinit>()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;
        org.apache.commons.io.filefilter.CanWriteFileFilter $r1;
        org.apache.commons.io.filefilter.NotFileFilter $r2;

        $r1 = new org.apache.commons.io.filefilter.CanWriteFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.CanWriteFileFilter: void <init>()>();

        <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE> = $r1;

        $r2 = new org.apache.commons.io.filefilter.NotFileFilter;

        $r0 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_WRITE>;

        specialinvoke $r2.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>($r0);

        <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE> = $r2;

        return;
    }
    protected void <init>()
    {
        org.apache.commons.io.filefilter.CanWriteFileFilter r0;

        r0 := @this: org.apache.commons.io.filefilter.CanWriteFileFilter;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        return;
    }
    public boolean accept(java.io.File)
    {
        org.apache.commons.io.filefilter.CanWriteFileFilter r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.filefilter.CanWriteFileFilter;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        return $z0;
    }
