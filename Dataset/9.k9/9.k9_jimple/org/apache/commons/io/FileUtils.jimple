org.apache.commons.io.FileUtils extends java.lang.Object
public static final java.io.File[] EMPTY_FILE_ARRAY
private static final long FILE_COPY_BUFFER_SIZE
public static final long ONE_EB
public static final java.math.BigInteger ONE_EB_BI
public static final long ONE_GB
public static final java.math.BigInteger ONE_GB_BI
public static final long ONE_KB
public static final java.math.BigInteger ONE_KB_BI
public static final long ONE_MB
public static final java.math.BigInteger ONE_MB_BI
public static final long ONE_PB
public static final java.math.BigInteger ONE_PB_BI
public static final long ONE_TB
public static final java.math.BigInteger ONE_TB_BI
public static final java.math.BigInteger ONE_YB
public static final java.math.BigInteger ONE_ZB
private static final java.nio.charset.Charset UTF8
    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1;
        java.io.File[] $r2;
        java.nio.charset.Charset $r3;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1024L);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI> = $r0;

        $r0 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI> = $r0;

        $r0 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI> = $r0;

        $r0 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI> = $r0;

        $r0 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI> = $r0;

        $r0 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_EB_BI> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1024L);

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1152921504606846976L);

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_ZB> = $r0;

        $r0 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_ZB>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_YB> = $r0;

        $r2 = newarray (java.io.File)[0];

        <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY> = $r2;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.apache.commons.io.FileUtils: java.nio.charset.Charset UTF8> = $r3;

        return;
    }
    public void <init>()
    {
        org.apache.commons.io.FileUtils r0;

        r0 := @this: org.apache.commons.io.FileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    public static java.lang.String byteCountToDisplaySize(long)
    {
        long $l0;
        java.math.BigInteger $r0;
        java.lang.String $r1;

        $l0 := @parameter0: long;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String byteCountToDisplaySize(java.math.BigInteger)>($r0);

        return $r1;
    }
    public static java.lang.String byteCountToDisplaySize(java.math.BigInteger)
    {
        java.math.BigInteger $r0, $r1, $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.math.BigInteger;

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_EB_BI>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_EB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EB");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 <= 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_PB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" PB");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 <= 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_TB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TB");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label3:
        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 <= 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_GB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" GB");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label4:
        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 <= 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_MB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" MB");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label5:
        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r1 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 <= 0 goto label6;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.commons.io.FileUtils: java.math.BigInteger ONE_KB_BI>;

        $r0 = virtualinvoke $r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KB");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
    private static void checkDirectory(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return;
    }
    public static java.util.zip.Checksum checksum(java.io.File, java.util.zip.Checksum) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.zip.Checksum $r1;
        java.util.zip.CheckedInputStream r2, r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.io.FileInputStream $r5;
        org.apache.commons.io.output.NullOutputStream $r6;
        java.lang.Throwable $r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.zip.Checksum;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Checksums can\'t be computed on directories");

        throw $r3;

     label1:
        r4 = null;

     label2:
        r2 = new java.util.zip.CheckedInputStream;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke r2.<java.util.zip.CheckedInputStream: void <init>(java.io.InputStream,java.util.zip.Checksum)>($r5, $r1);

     label3:
        $r6 = new org.apache.commons.io.output.NullOutputStream;

        specialinvoke $r6.<org.apache.commons.io.output.NullOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(r2, $r6);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        return $r1;

     label5:
        $r7 := @caughtexception;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        throw $r7;

     label7:
        $r7 := @caughtexception;

        r4 = r2;

        goto label6;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
    }
    public static long checksumCRC32(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.zip.CRC32 r1;
        long $l0;

        $r0 := @parameter0: java.io.File;

        r1 = new java.util.zip.CRC32;

        specialinvoke r1.<java.util.zip.CRC32: void <init>()>();

        staticinvoke <org.apache.commons.io.FileUtils: java.util.zip.Checksum checksum(java.io.File,java.util.zip.Checksum)>($r0, r1);

        $l0 = virtualinvoke r1.<java.util.zip.CRC32: long getValue()>();

        return $l0;
    }
    public static void cleanDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.IOException r1;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.File[] $r5;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label2:
        $r5 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r5 != null goto label3;

        r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw r1;

     label3:
        r1 = null;

        i0 = lengthof $r5;

        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        $r0 = $r5[i1];

     label5:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r0);

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        r1 := @caughtexception;

        goto label6;

     label8:
        if r1 == null goto label9;

        throw r1;

     label9:
        return;

        catch java.io.IOException from label5 to label6 with label7;
    }
    private static void cleanDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.IOException r1;
        int i0, i1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.File[] $r5;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label2:
        $r5 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r5 != null goto label3;

        r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw r1;

     label3:
        r1 = null;

        i0 = lengthof $r5;

        i1 = 0;

     label4:
        if i1 >= i0 goto label8;

        $r0 = $r5[i1];

     label5:
        staticinvoke <org.apache.commons.io.FileUtils: void forceDeleteOnExit(java.io.File)>($r0);

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        r1 := @caughtexception;

        goto label6;

     label8:
        if r1 == null goto label9;

        throw r1;

     label9:
        return;

        catch java.io.IOException from label5 to label6 with label7;
    }
    public static boolean contentEquals(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r5, $r6;
        java.io.FileInputStream r2, r3, r7;
        boolean $z0, $z1;
        java.io.IOException $r4;
        long $l0, $l1;
        byte $b2;
        java.lang.Throwable $r8;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == $z1 goto label01;

        return 0;

     label01:
        if $z0 != 0 goto label02;

        return 1;

     label02:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label04;

     label03:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files");

        throw $r4;

     label04:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label14;

        $r5 = virtualinvoke $r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r6 = virtualinvoke $r1.<java.io.File: java.io.File getCanonicalFile()>();

        $z0 = virtualinvoke $r5.<java.io.File: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label05;

        return 1;

     label05:
        r3 = null;

        r7 = null;

     label06:
        r2 = new java.io.FileInputStream;

        specialinvoke r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label07:
        r3 = new java.io.FileInputStream;

        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

     label08:
        $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>(r2, r3);

     label09:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3);

        return $z0;

     label10:
        $r8 := @caughtexception;

     label11:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r7);

        throw $r8;

     label12:
        $r8 := @caughtexception;

        r3 = r2;

        goto label11;

     label13:
        $r8 := @caughtexception;

        r7 = r3;

        r3 = r2;

        goto label11;

     label14:
        return 0;

        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label13;
    }
    public static boolean contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r4, $r5;
        java.lang.String $r2;
        boolean $z0, $z1;
        java.io.IOException $r3;
        java.io.InputStreamReader r6, r7, r8;
        java.io.FileInputStream $r9;
        java.lang.Throwable $r10;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.lang.String;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == $z1 goto label01;

        return 0;

     label01:
        if $z0 == 0 goto label15;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label02;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label03;

     label02:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Can\'t compare directories, only files");

        throw $r3;

     label03:
        $r4 = virtualinvoke $r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File getCanonicalFile()>();

        $z0 = virtualinvoke $r4.<java.io.File: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label15;

        r6 = null;

        r7 = null;

        if $r2 != null goto label09;

     label04:
        r8 = new java.io.InputStreamReader;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke r8.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9);

     label05:
        r6 = new java.io.InputStreamReader;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        specialinvoke r6.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9);

     label06:
        r7 = r6;

        r6 = r8;

     label07:
        $z0 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEqualsIgnoreEOL(java.io.Reader,java.io.Reader)>(r6, r7);

     label08:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r7);

        return $z0;

     label09:
        r8 = new java.io.InputStreamReader;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        specialinvoke r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r9, $r2);

     label10:
        r6 = new java.io.InputStreamReader;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        specialinvoke r6.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r9, $r2);

     label11:
        r7 = r6;

        r6 = r8;

        goto label07;

     label12:
        $r10 := @caughtexception;

     label13:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r7);

        throw $r10;

     label14:
        $r10 := @caughtexception;

        r6 = r8;

        goto label13;

     label15:
        return 1;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label14;
    }
    public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection)
    {
        java.util.Collection r0;
        int $i0;
        java.io.File[] $r1;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.io.File)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r1 = (java.io.File[]) $r2;

        return $r1;
    }
    public static void copyDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        return;
    }
    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.io.FileFilter $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.FileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>($r0, $r1, $r2, 1);

        return;
    }
    public static void copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, r4, r5;
        java.io.FileFilter $r2;
        boolean $z0, $z1;
        java.io.File[] r3, r13;
        int i0, i1;
        java.lang.NullPointerException $r6;
        java.io.FileNotFoundException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9, $r11;
        java.io.IOException $r10;
        java.util.ArrayList r12;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.FileFilter;

        $z0 := @parameter3: boolean;

        if $r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r6;

     label1:
        if $r1 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r6;

     label2:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r7 = new java.io.FileNotFoundException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label3:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label4;

        $r10 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label4:
        $r9 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r11 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label5;

        $r10 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r10;

     label5:
        r12 = null;

        $r9 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r11 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>($r11);

        if $z1 == 0 goto label9;

        if $r2 != null goto label8;

        r13 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

     label6:
        if r13 == null goto label9;

        i0 = lengthof r13;

        if i0 <= 0 goto label9;

        r12 = new java.util.ArrayList;

        i0 = lengthof r13;

        specialinvoke r12.<java.util.ArrayList: void <init>(int)>(i0);

        r3 = r13;

        i0 = lengthof r13;

        i1 = 0;

     label7:
        if i1 >= i0 goto label9;

        r5 = r3[i1];

        r4 = new java.io.File;

        $r9 = virtualinvoke r5.<java.io.File: java.lang.String getName()>();

        specialinvoke r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r9);

        $r9 = virtualinvoke r4.<java.io.File: java.lang.String getCanonicalPath()>();

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r9);

        i1 = i1 + 1;

        goto label7;

     label8:
        r13 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r2);

        goto label6;

     label9:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>($r0, $r1, $r2, $z0, r12);

        return;
    }
    public static void copyDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean)>($r0, $r1, null, $z0);

        return;
    }
    public static void copyDirectoryToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r6;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        if $r1 != null goto label3;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label3:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $r6 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File,boolean)>($r0, $r6, 1);

        return;
    }
    public static long copyFile(java.io.File, java.io.OutputStream) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.OutputStream $r1;
        java.io.FileInputStream r2;
        java.lang.Throwable $r3;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.OutputStream;

        r2 = new java.io.FileInputStream;

        specialinvoke r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label1:
        $l0 = staticinvoke <org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)>(r2, $r1);

     label2:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

        return $l0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r2.<java.io.FileInputStream: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public static void copyFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        return;
    }
    public static void copyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r8;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r7;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r7 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' are the same");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $r8 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        if $r8 == null goto label6;

        $z1 = virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label6;

        $z1 = virtualinvoke $r8.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label6;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label7;

        $z1 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z1 != 0 goto label7;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is read-only");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label7:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>($r0, $r1, $z0);

        return;
    }
    public static void copyFileToDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFileToDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, 1);

        return;
    }
    public static void copyFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, r2;
        boolean $z0, $z1;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r3;

     label1:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label2:
        r2 = new java.io.File;

        $r6 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r6);

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File,boolean)>($r0, r2, $z0);

        return;
    }
    public static void copyInputStreamToFile(java.io.InputStream, java.io.File) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.File $r1;
        java.io.FileOutputStream $r2;
        java.lang.Throwable $r3, $r4;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.File;

     label1:
        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r1);

     label2:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r0, $r2);

        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r2);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r0);

        return;

     label5:
        $r3 := @caughtexception;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r2);

        throw $r3;

     label7:
        $r4 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }
    public static void copyURLToFile(java.net.URL, java.io.File) throws java.io.IOException
    {
        java.net.URL $r0;
        java.io.File $r1;
        java.io.InputStream $r2;

        $r0 := @parameter0: java.net.URL;

        $r1 := @parameter1: java.io.File;

        $r2 = virtualinvoke $r0.<java.net.URL: java.io.InputStream openStream()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>($r2, $r1);

        return;
    }
    public static void copyURLToFile(java.net.URL, java.io.File, int, int) throws java.io.IOException
    {
        java.net.URL $r0;
        java.io.File $r1;
        int $i0, $i1;
        java.net.URLConnection $r2;
        java.io.InputStream $r3;

        $r0 := @parameter0: java.net.URL;

        $r1 := @parameter1: java.io.File;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = virtualinvoke $r0.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke $r2.<java.net.URLConnection: void setConnectTimeout(int)>($i0);

        virtualinvoke $r2.<java.net.URLConnection: void setReadTimeout(int)>($i1);

        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        staticinvoke <org.apache.commons.io.FileUtils: void copyInputStreamToFile(java.io.InputStream,java.io.File)>($r3, $r1);

        return;
    }
    static java.lang.String decodeUrl(java.lang.String)
    {
        java.lang.String $r0, $r3;
        java.lang.StringBuffer r1;
        int i0, $i2, i3, $i5;
        byte b1;
        java.nio.ByteBuffer $r2;
        char $c4;
        java.nio.charset.Charset $r4;
        java.nio.CharBuffer $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label15;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(37);

        if $i2 < 0 goto label15;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        r1 = new java.lang.StringBuffer;

        specialinvoke r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        i3 = 0;

     label01:
        if i3 >= $i2 goto label14;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i3);

        if $c4 != 37 goto label11;

     label02:
        i0 = i3 + 1;

        $i5 = i3 + 3;

     label03:
        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

     label04:
        b1 = (byte) i0;

     label05:
        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b1);

     label06:
        i3 = i3 + 3;

        if i3 >= $i2 goto label09;

     label07:
        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i3);

     label08:
        if $c4 == 37 goto label02;

     label09:
        i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        if i0 <= 0 goto label01;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r4 = <org.apache.commons.io.FileUtils: java.nio.charset.Charset UTF8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r2);

        $r3 = virtualinvoke $r5.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        goto label01;

     label10:
        $r6 := @caughtexception;

        i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        if i0 <= 0 goto label11;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r4 = <org.apache.commons.io.FileUtils: java.nio.charset.Charset UTF8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r2);

        $r3 = virtualinvoke $r5.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label11:
        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        i3 = i3 + 1;

        goto label01;

     label12:
        $r7 := @caughtexception;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        if $i2 <= 0 goto label13;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r4 = <org.apache.commons.io.FileUtils: java.nio.charset.Charset UTF8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r2);

        $r0 = virtualinvoke $r5.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label13:
        throw $r7;

     label14:
        $r0 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label15:
        return $r0;

        catch java.lang.RuntimeException from label03 to label04 with label10;
        catch java.lang.RuntimeException from label05 to label06 with label10;
        catch java.lang.RuntimeException from label07 to label08 with label10;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
    }
    public static void deleteDirectory(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.io.IOException $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r0);

        if $z0 != 0 goto label2;

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r0);

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete directory ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label3:
        return;
    }
    private static void deleteDirectoryOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r0);

        if $z0 != 0 goto label2;

        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectoryOnExit(java.io.File)>($r0);

     label2:
        return;
    }
    public static boolean deleteQuietly(java.io.File)
    {
        java.io.File $r0;
        java.lang.Exception r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

     label2:
        if $z0 == 0 goto label4;

     label3:
        staticinvoke <org.apache.commons.io.FileUtils: void cleanDirectory(java.io.File)>($r0);

     label4:
        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

     label5:
        return $z0;

     label6:
        r1 := @caughtexception;

        return 0;

     label7:
        $r2 := @caughtexception;

        goto label4;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label4 to label5 with label6;
    }
    public static boolean directoryContains(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Directory must not be null");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a directory: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        if $r1 != null goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $r4 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean directoryContains(java.lang.String,java.lang.String)>($r4, $r5);

        return $z0;

     label4:
        return 0;
    }
    private static void doCopyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean, java.util.List) throws java.io.IOException
    {
        java.io.File $r0, $r1, r5, r6;
        java.io.FileFilter $r2;
        boolean $z0, $z1;
        java.util.List r3;
        java.io.File[] r4, r7;
        int i0, i1;
        java.io.IOException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        long $l2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: java.io.FileFilter;

        $z0 := @parameter3: boolean;

        r3 := @parameter4: java.util.List;

        if $r2 != null goto label02;

        r7 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

     label01:
        if r7 != null goto label03;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to list contents of ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label02:
        r7 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r2);

        goto label01;

     label03:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label04;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label05;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is not a directory");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label04:
        $z1 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label05;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label05;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' directory cannot be created");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label05:
        $z1 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z1 != 0 goto label06;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label06:
        r4 = r7;

        i0 = lengthof r7;

        i1 = 0;

     label07:
        if i1 >= i0 goto label11;

        r6 = r4[i1];

        r5 = new java.io.File;

        $r10 = virtualinvoke r6.<java.io.File: java.lang.String getName()>();

        specialinvoke r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r10);

        if r3 == null goto label08;

        $r10 = virtualinvoke r6.<java.io.File: java.lang.String getCanonicalPath()>();

        $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r10);

        if $z1 != 0 goto label09;

     label08:
        $z1 = virtualinvoke r6.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label10;

        staticinvoke <org.apache.commons.io.FileUtils: void doCopyDirectory(java.io.File,java.io.File,java.io.FileFilter,boolean,java.util.List)>(r6, r5, $r2, $z0, r3);

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        staticinvoke <org.apache.commons.io.FileUtils: void doCopyFile(java.io.File,java.io.File,boolean)>(r6, r5, $z0);

        goto label09;

     label11:
        if $z0 == 0 goto label12;

        $l2 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        virtualinvoke $r1.<java.io.File: boolean setLastModified(long)>($l2);

     label12:
        return;
    }
    private static void doCopyFile(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0, $z1;
        java.io.FileInputStream r2, r7;
        java.io.FileOutputStream r3, r8;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.nio.channels.FileChannel r9, r10, $r11, $r12;
        long $l0, l1, $l3;
        byte $b2;
        java.lang.Throwable $r13;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label01;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label01:
        r7 = null;

        r8 = null;

        r9 = null;

        r10 = null;

     label02:
        r2 = new java.io.FileInputStream;

        specialinvoke r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label03:
        r3 = new java.io.FileOutputStream;

        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

     label04:
        $r11 = virtualinvoke r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

     label05:
        r9 = $r11;

     label06:
        $r12 = virtualinvoke r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

     label07:
        r10 = $r12;

     label08:
        $l0 = virtualinvoke $r11.<java.nio.channels.FileChannel: long size()>();

     label09:
        l1 = 0L;

     label10:
        $b2 = l1 cmp $l0;

        if $b2 >= 0 goto label14;

        $l3 = $l0 - l1;

        $b2 = $l3 cmp 31457280L;

        if $b2 <= 0 goto label13;

        $l3 = 31457280L;

     label11:
        $l3 = virtualinvoke $r12.<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>($r11, l1, $l3);

     label12:
        l1 = l1 + $l3;

        goto label10;

     label13:
        $l3 = $l0 - l1;

        goto label11;

     label14:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>($r12);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r3);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>($r11);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l0 cmp l1;

        if $b2 == 0 goto label17;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy full contents from \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label15:
        $r13 := @caughtexception;

     label16:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r10);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r8);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(r9);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r7);

        throw $r13;

     label17:
        if $z0 == 0 goto label20;

        $l0 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        virtualinvoke $r1.<java.io.File: boolean setLastModified(long)>($l0);

        return;

     label18:
        $r13 := @caughtexception;

        r7 = r2;

        goto label16;

     label19:
        $r13 := @caughtexception;

        r8 = r3;

        r7 = r2;

        goto label16;

     label20:
        return;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
    }
    public static void forceDelete(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0, $z1;
        java.io.FileNotFoundException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.IOException $r4;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r0);

        return;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        $z1 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label3;

        if $z0 != 0 goto label2;

        $r1 = new java.io.FileNotFoundException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File does not exist: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete file: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label3:
        return;
    }
    public static void forceDeleteOnExit(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectoryOnExit(java.io.File)>($r0);

        return;

     label1:
        virtualinvoke $r0.<java.io.File: void deleteOnExit()>();

        return;
    }
    public static void forceMkdir(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.io.IOException $r3;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists and is ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a directory. Unable to create directory.");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create directory ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label2:
        return;
    }
    public static transient java.io.File getFile(java.io.File, java.lang.String[])
    {
        java.io.File $r0, r4;
        java.lang.String[] $r1;
        int i0, i1;
        java.lang.String r2;
        java.lang.NullPointerException $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String[];

        if $r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("directorydirectory must not be null");

        throw $r3;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("names must not be null");

        throw $r3;

     label2:
        i0 = lengthof $r1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        r4 = new java.io.File;

        specialinvoke r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, r2);

        i1 = i1 + 1;

        $r0 = r4;

        goto label3;

     label4:
        return $r0;
    }
    public static transient java.io.File getFile(java.lang.String[])
    {
        java.lang.String[] $r0;
        int i0, i1;
        java.lang.String r1;
        java.lang.NullPointerException $r2;
        java.io.File r3, r4;

        $r0 := @parameter0: java.lang.String[];

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("names must not be null");

        throw $r2;

     label1:
        i0 = lengthof $r0;

        i1 = 0;

        r3 = null;

     label2:
        if i1 >= i0 goto label5;

        r1 = $r0[i1];

        if r3 != null goto label4;

        r4 = new java.io.File;

        specialinvoke r4.<java.io.File: void <init>(java.lang.String)>(r1);

     label3:
        i1 = i1 + 1;

        r3 = r4;

        goto label2;

     label4:
        r4 = new java.io.File;

        specialinvoke r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, r1);

        goto label3;

     label5:
        return r3;
    }
    public static java.io.File getTempDirectory()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String getTempDirectoryPath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r0;
    }
    public static java.lang.String getTempDirectoryPath()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        return $r0;
    }
    public static java.io.File getUserDirectory()
    {
        java.io.File $r0;
        java.lang.String $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String getUserDirectoryPath()>();

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r0;
    }
    public static java.lang.String getUserDirectoryPath()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        return $r0;
    }
    private static void innerListFiles(java.util.Collection, java.io.File, org.apache.commons.io.filefilter.IOFileFilter, boolean)
    {
        java.util.Collection r0;
        java.io.File $r1;
        org.apache.commons.io.filefilter.IOFileFilter $r2;
        boolean $z0, $z1;
        int i0, i1;
        java.io.File[] $r3;

        r0 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.io.File;

        $r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $z0 := @parameter3: boolean;

        $r3 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r2);

        if $r3 == null goto label5;

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r1 = $r3[i1];

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r1);

     label2:
        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)>(r0, $r1, $r2, $z0);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        goto label3;

     label5:
        return;
    }
    public static boolean isFileNewer(java.io.File, long)
    {
        java.io.File $r0;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        byte $b2;

        $r0 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp $l0;

        if $b2 <= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public static boolean isFileNewer(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The reference file \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>($r0, $l0);

        return $z0;
    }
    public static boolean isFileNewer(java.io.File, java.util.Date)
    {
        java.io.File $r0;
        java.util.Date $r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.Date;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileNewer(java.io.File,long)>($r0, $l0);

        return $z0;
    }
    public static boolean isFileOlder(java.io.File, long)
    {
        java.io.File $r0;
        long $l0, $l1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        byte $b2;

        $r0 := @parameter0: java.io.File;

        $l0 := @parameter1: long;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified file");

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $l1 = virtualinvoke $r0.<java.io.File: long lastModified()>();

        $b2 = $l1 cmp $l0;

        if $b2 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }
    public static boolean isFileOlder(java.io.File, java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified reference file");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The reference file \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $l0 = virtualinvoke $r1.<java.io.File: long lastModified()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>($r0, $l0);

        return $z0;
    }
    public static boolean isFileOlder(java.io.File, java.util.Date)
    {
        java.io.File $r0;
        java.util.Date $r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.util.Date;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No specified date");

        throw $r2;

     label1:
        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isFileOlder(java.io.File,long)>($r0, $l0);

        return $z0;
    }
    public static boolean isSymlink(java.io.File) throws java.io.IOException
    {
        java.io.File $r0, r3, $r4;
        java.lang.NullPointerException $r1;
        boolean $z0;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.File;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("File must not be null");

        throw $r1;

     label1:
        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean isSystemWindows()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getParent()>();

        if $r2 != null goto label4;

        r3 = $r0;

     label3:
        $r0 = virtualinvoke r3.<java.io.File: java.io.File getCanonicalFile()>();

        r3 = virtualinvoke r3.<java.io.File: java.io.File getAbsoluteFile()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label5;

        return 1;

     label4:
        r3 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        $r4 = virtualinvoke r3.<java.io.File: java.io.File getCanonicalFile()>();

        r3 = new java.io.File;

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r2);

        goto label3;

     label5:
        return 0;
    }
    public static java.util.Iterator iterateFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File $r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1, $r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        return $r4;
    }
    public static java.util.Iterator iterateFiles(java.io.File, java.lang.String[], boolean)
    {
        java.io.File $r0;
        java.lang.String[] $r1;
        boolean $z0;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,java.lang.String[],boolean)>($r0, $r1, $z0);

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }
    public static java.util.Iterator iterateFilesAndDirs(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File $r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFilesAndDirs(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1, $r2);

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        return $r4;
    }
    public static org.apache.commons.io.LineIterator lineIterator(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        org.apache.commons.io.LineIterator $r1;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.LineIterator lineIterator(java.io.File,java.lang.String)>($r0, null);

        return $r1;
    }
    public static org.apache.commons.io.LineIterator lineIterator(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.io.FileInputStream r2, $r3;
        org.apache.commons.io.LineIterator $r4;
        java.io.IOException r5;
        java.lang.RuntimeException r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r2 = null;

     label1:
        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

     label2:
        r2 = $r3;

     label3:
        $r4 = staticinvoke <org.apache.commons.io.IOUtils: org.apache.commons.io.LineIterator lineIterator(java.io.InputStream,java.lang.String)>($r3, $r1);

     label4:
        return $r4;

     label5:
        r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r5;

     label6:
        r6 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw r6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.RuntimeException from label1 to label2 with label6;
        catch java.lang.RuntimeException from label3 to label4 with label6;
    }
    public static java.util.Collection listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File $r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2;
        java.util.LinkedList r3;
        org.apache.commons.io.filefilter.IOFileFilter[] $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r1);

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        r3 = new java.util.LinkedList;

        specialinvoke r3.<java.util.LinkedList: void <init>()>();

        $r4 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r4);

        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)>(r3, $r0, $r1, 0);

        return r3;
    }
    public static java.util.Collection listFiles(java.io.File, java.lang.String[], boolean)
    {
        java.io.File $r0;
        java.lang.String[] $r1;
        boolean $z0;
        org.apache.commons.io.filefilter.IOFileFilter r2, $r3;
        java.util.Collection $r4;
        org.apache.commons.io.filefilter.SuffixFileFilter $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        if $r1 != null goto label3;

        r2 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

     label1:
        if $z0 == 0 goto label4;

        $r3 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

     label2:
        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.util.Collection listFiles(java.io.File,org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r0, r2, $r3);

        return $r4;

     label3:
        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String[] toSuffixes(java.lang.String[])>($r1);

        $r5 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        r2 = $r5;

        specialinvoke $r5.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String[])>($r1);

        goto label1;

     label4:
        $r3 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        goto label2;
    }
    public static java.util.Collection listFilesAndDirs(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File $r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2;
        java.util.LinkedList r3;
        boolean $z0;
        org.apache.commons.io.filefilter.IOFileFilter[] $r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 := @parameter2: org.apache.commons.io.filefilter.IOFileFilter;

        staticinvoke <org.apache.commons.io.FileUtils: void validateListFilesParameters(java.io.File,org.apache.commons.io.filefilter.IOFileFilter)>($r0, $r1);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r1);

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        r3 = new java.util.LinkedList;

        specialinvoke r3.<java.util.LinkedList: void <init>()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>($r0);

     label1:
        $r4 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r4);

        staticinvoke <org.apache.commons.io.FileUtils: void innerListFiles(java.util.Collection,java.io.File,org.apache.commons.io.filefilter.IOFileFilter,boolean)>(r3, $r0, $r1, 1);

        return r3;
    }
    public static void moveDirectory(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r8;
        java.io.IOException $r6;
        org.apache.commons.io.FileExistsException $r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label4;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $r7 = new org.apache.commons.io.FileExistsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.io.FileExistsException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label5:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label7;

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getCanonicalPath()>();

        $r8 = virtualinvoke $r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>($r8);

        if $z0 == 0 goto label6;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot move directory: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to a subdirectory of itself: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        staticinvoke <org.apache.commons.io.FileUtils: void copyDirectory(java.io.File,java.io.File)>($r0, $r1);

        staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r0);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label7;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete original directory \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label7:
        return;
    }
    public static void moveDirectoryToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r7;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination directory \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $r7 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectory(java.io.File,java.io.File)>($r0, $r7);

        return;
    }
    public static void moveFile(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;
        org.apache.commons.io.FileExistsException $r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label4;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $r7 = new org.apache.commons.io.FileExistsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' already exists");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.io.FileExistsException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label5:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label6;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label6:
        $z0 = virtualinvoke $r0.<java.io.File: boolean renameTo(java.io.File)>($r1);

        if $z0 != 0 goto label7;

        staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r0, $r1);

        $z0 = virtualinvoke $r0.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label7;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r1);

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete original file \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' after copy to \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label7:
        return;
    }
    public static void moveFileToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1, $r7;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination directory must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        if $z0 == 0 goto label3;

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

     label3:
        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination directory \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist [createDestDir=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label5;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a directory");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label5:
        $r7 = new java.io.File;

        $r5 = virtualinvoke $r0.<java.io.File: java.lang.String getName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r5);

        staticinvoke <org.apache.commons.io.FileUtils: void moveFile(java.io.File,java.io.File)>($r0, $r7);

        return;
    }
    public static void moveToDirectory(java.io.File, java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r1;
        boolean $z0, $z1;
        java.lang.NullPointerException $r2;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.io.File;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Source must not be null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination must not be null");

        throw $r2;

     label2:
        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label3;

        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Source \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label3:
        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        staticinvoke <org.apache.commons.io.FileUtils: void moveDirectoryToDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, $z0);

        return;

     label4:
        staticinvoke <org.apache.commons.io.FileUtils: void moveFileToDirectory(java.io.File,java.io.File,boolean)>($r0, $r1, $z0);

        return;
    }
    public static java.io.FileInputStream openInputStream(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.FileNotFoundException $r4;
        java.io.FileInputStream $r5;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean canRead()>();

        if $z0 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be read");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = new java.io.FileNotFoundException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label3:
        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

        return $r5;
    }
    public static java.io.FileOutputStream openOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.FileOutputStream $r1;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>($r0, 0);

        return $r1;
    }
    public static java.io.FileOutputStream openOutputStream(java.io.File, boolean) throws java.io.IOException
    {
        java.io.File $r0, $r4;
        boolean $z0, $z1;
        java.io.IOException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.io.FileOutputStream $r5;

        $r0 := @parameter0: java.io.File;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' exists but is a directory");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z1 = virtualinvoke $r0.<java.io.File: boolean canWrite()>();

        if $z1 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be written to");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r4 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        if $r4 == null goto label3;

        $z1 = virtualinvoke $r4.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label3;

        $z1 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label3;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory \'");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label3:
        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r0, $z0);

        return $r5;
    }
    public static byte[] readFileToByteArray(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.io.FileInputStream r1, $r2;
        long $l0;
        byte[] $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: java.io.File;

        r1 = null;

     label1:
        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

     label2:
        r1 = $r2;

     label3:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $r3 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream,long)>($r2, $l0);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        return $r3;

     label5:
        $r4 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static java.lang.String readFileToString(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        return $r2;
    }
    public static java.lang.String readFileToString(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>($r1);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File,java.nio.charset.Charset)>($r0, $r2);

        return $r1;
    }
    public static java.lang.String readFileToString(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.io.FileInputStream r2, $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        r2 = null;

     label1:
        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

     label2:
        r2 = $r3;

     label3:
        $r1 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>($r1);

        $r4 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>($r3, $r1);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return $r4;

     label5:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static java.util.List readLines(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.util.List $r2;

        $r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        $r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>($r0, $r1);

        return $r2;
    }
    public static java.util.List readLines(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;
        java.util.List $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>($r1);

        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.nio.charset.Charset)>($r0, $r2);

        return $r3;
    }
    public static java.util.List readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File $r0;
        java.nio.charset.Charset $r1;
        java.io.FileInputStream r2, $r3;
        java.util.List $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        r2 = null;

     label1:
        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileInputStream openInputStream(java.io.File)>($r0);

     label2:
        r2 = $r3;

     label3:
        $r1 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>($r1);

        $r4 = staticinvoke <org.apache.commons.io.IOUtils: java.util.List readLines(java.io.InputStream,java.nio.charset.Charset)>($r3, $r1);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        return $r4;

     label5:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveDirFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1;

        $r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if $r0 != null goto label1;

        $r0 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        return $r0;

     label1:
        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1[0] = $r0;

        $r0 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r1[1] = $r0;

        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

        return $r0;
    }
    private static org.apache.commons.io.filefilter.IOFileFilter setUpEffectiveFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;
        org.apache.commons.io.filefilter.IOFileFilter[] $r1;

        $r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r1 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r1[0] = $r0;

        $r0 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;

        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r0);

        $r1[1] = $r0;

        $r0 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>($r1);

        return $r0;
    }
    public static long sizeOf(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $l0 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>($r0);

        return $l0;

     label2:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        return $l0;
    }
    public static java.math.BigInteger sizeOfAsBigInteger(java.io.File)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        java.math.BigInteger $r4;
        long $l0;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)>($r0);

        return $r4;

     label2:
        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r4;
    }
    public static long sizeOfDirectory(java.io.File)
    {
        java.io.File $r0;
        int i0, i2;
        java.io.File[] $r1;
        long l1, $l3;
        boolean $z0;
        byte $b4;
        java.io.IOException $r2;

        $r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void checkDirectory(java.io.File)>($r0);

        $r1 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label1;

        return 0L;

     label1:
        l1 = 0L;

        i0 = lengthof $r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label9;

        $r0 = $r1[i2];

     label3:
        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r0);

     label4:
        if $z0 != 0 goto label7;

     label5:
        $l3 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r0);

     label6:
        l1 = l1 + $l3;

        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label9;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        $r2 := @caughtexception;

        goto label7;

     label9:
        return l1;

        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }
    public static java.math.BigInteger sizeOfDirectoryAsBigInteger(java.io.File)
    {
        java.io.File $r0;
        int i0, i1;
        java.io.File[] $r1;
        java.math.BigInteger r2, $r3;
        boolean $z0;
        long $l2;
        java.io.IOException $r4;

        $r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.commons.io.FileUtils: void checkDirectory(java.io.File)>($r0);

        $r1 = virtualinvoke $r0.<java.io.File: java.io.File[] listFiles()>();

        if $r1 != null goto label1;

        r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return r2;

     label1:
        r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label9;

        $r0 = $r1[i1];

     label3:
        $z0 = staticinvoke <org.apache.commons.io.FileUtils: boolean isSymlink(java.io.File)>($r0);

     label4:
        if $z0 != 0 goto label7;

     label5:
        $l2 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOf(java.io.File)>($r0);

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r3 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

     label6:
        r2 = $r3;

     label7:
        i1 = i1 + 1;

        goto label2;

     label8:
        $r4 := @caughtexception;

        goto label7;

     label9:
        return r2;

        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }
    public static java.io.File toFile(java.net.URL)
    {
        java.net.URL $r0;
        char $c0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.io.File $r3;

        $r0 := @parameter0: java.net.URL;

        if $r0 == null goto label1;

        $r1 = "file";

        $r2 = virtualinvoke $r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = virtualinvoke $r0.<java.net.URL: java.lang.String getFile()>();

        $c0 = <java.io.File: char separatorChar>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, $c0);

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String decodeUrl(java.lang.String)>($r1);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        return $r3;
    }
    public static java.io.File[] toFiles(java.net.URL[])
    {
        java.net.URL[] $r0;
        java.net.URL r1;
        int $i0, $i1;
        java.io.File[] r2;
        java.lang.String $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.io.File $r6;

        $r0 := @parameter0: java.net.URL[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        r2 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        return r2;

     label2:
        $i0 = lengthof $r0;

        r2 = newarray (java.io.File)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label6;

        r1 = $r0[$i0];

        if r1 == null goto label5;

        $r3 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 != 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URL could not be converted to a File: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label4:
        $r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.File toFile(java.net.URL)>(r1);

        r2[$i0] = $r6;

     label5:
        $i0 = $i0 + 1;

        goto label3;

     label6:
        return r2;
    }
    private static java.lang.String[] toSuffixes(java.lang.String[])
    {
        java.lang.String[] $r0, r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.String[];

        $i0 = lengthof $r0;

        r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r3 = $r0[$i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static java.net.URL[] toURLs(java.io.File[]) throws java.io.IOException
    {
        java.io.File[] $r0;
        java.net.URL[] r1;
        int $i0, $i1;
        java.io.File $r2;
        java.net.URI $r3;
        java.net.URL $r4;

        $r0 := @parameter0: java.io.File[];

        $i0 = lengthof $r0;

        r1 = newarray (java.net.URL)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof r1;

        if $i0 >= $i1 goto label2;

        $r2 = $r0[$i0];

        $r3 = virtualinvoke $r2.<java.io.File: java.net.URI toURI()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.net.URL toURL()>();

        r1[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return r1;
    }
    public static void touch(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        boolean $z0;
        java.io.FileOutputStream $r1;
        long $l0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File)>($r0);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r1);

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean setLastModified(long)>($l0);

        if $z0 != 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set the last modification time for ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return;
    }
    private static void validateListFilesParameters(java.io.File, org.apache.commons.io.filefilter.IOFileFilter)
    {
        java.io.File $r0;
        org.apache.commons.io.filefilter.IOFileFilter $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.NullPointerException $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $z0 = virtualinvoke $r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'directory\' is not a directory");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Parameter \'fileFilter\' is null");

        throw $r3;

     label2:
        return;
    }
    public static boolean waitFor(java.io.File, int)
    {
        java.io.File $r0;
        int $i0, i1, i2;
        java.lang.Exception $r1;
        boolean $z0;
        java.lang.InterruptedException $r2;

        $r0 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        i1 = 0;

        i2 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label7;

        if i2 < 10 goto label8;

        i2 = 0;

        if i1 <= $i0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

     label3:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label4:
        goto label1;

     label5:
        $r2 := @caughtexception;

        goto label1;

     label6:
        $r1 := @caughtexception;

     label7:
        return 1;

     label8:
        i2 = i2 + 1;

        goto label3;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.lang.Exception from label3 to label4 with label6;
    }
    public static void write(java.io.File, java.lang.CharSequence) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.CharSequence $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>($r0, $r1, $r2, 0);

        return;
    }
    public static void write(java.io.File, java.lang.CharSequence, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String,boolean)>($r0, $r1, $r2, 0);

        return;
    }
    public static void write(java.io.File, java.lang.CharSequence, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;
        boolean $z0;
        java.nio.charset.Charset $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>($r2);

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>($r0, $r1, $r3, $z0);

        return;
    }
    public static void write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.CharSequence $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>($r0, $r1, $r2, 0);

        return;
    }
    public static void write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.CharSequence $r1;
        java.nio.charset.Charset $r2;
        boolean $z0;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.CharSequence;

        $r2 := @parameter2: java.nio.charset.Charset;

        $z0 := @parameter3: boolean;

        if $r1 != null goto label2;

        $r3 = null;

     label1:
        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>($r0, $r3, $r2, $z0);

        return;

     label2:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        goto label1;
    }
    public static void write(java.io.File, java.lang.CharSequence, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.CharSequence;

        $z0 := @parameter2: boolean;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.nio.charset.Charset,boolean)>($r0, $r1, $r2, $z0);

        return;
    }
    public static void writeByteArrayToFile(java.io.File, byte[]) throws java.io.IOException
    {
        java.io.File $r0;
        byte[] $r1;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: byte[];

        staticinvoke <org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[],boolean)>($r0, $r1, 0);

        return;
    }
    public static void writeByteArrayToFile(java.io.File, byte[], boolean) throws java.io.IOException
    {
        java.io.File $r0;
        byte[] $r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.io.FileOutputStream $r3, r4;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        r4 = null;

     label1:
        $r3 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>($r0, $z0);

     label2:
        r4 = $r3;

     label3:
        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r1);

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r3);

        return;

     label5:
        $r2 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static void writeLines(java.io.File, java.lang.String, java.util.Collection) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.util.Collection r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, $r1, r2, null, 0);

        return;
    }
    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r3;
        java.util.Collection r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        $r3 := @parameter3: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, $r1, r2, $r3, 0);

        return;
    }
    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r3;
        java.util.Collection r2;
        boolean $z0;
        java.io.BufferedOutputStream r4;
        java.lang.Throwable $r5;
        java.io.FileOutputStream $r6, r7;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        $r3 := @parameter3: java.lang.String;

        $z0 := @parameter4: boolean;

        r7 = null;

     label1:
        $r6 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>($r0, $z0);

     label2:
        r7 = $r6;

     label3:
        r4 = new java.io.BufferedOutputStream;

        specialinvoke r4.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r6);

        staticinvoke <org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)>(r2, $r3, r4, $r1);

        virtualinvoke r4.<java.io.BufferedOutputStream: void flush()>();

        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r6);

        return;

     label5:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r7);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static void writeLines(java.io.File, java.lang.String, java.util.Collection, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.util.Collection r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Collection;

        $z0 := @parameter3: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, $r1, r2, null, $z0);

        return;
    }
    public static void writeLines(java.io.File, java.util.Collection) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.Collection r1;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, null, r1, null, 0);

        return;
    }
    public static void writeLines(java.io.File, java.util.Collection, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.Collection r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, null, r1, $r2, 0);

        return;
    }
    public static void writeLines(java.io.File, java.util.Collection, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.Collection r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        $r2 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, null, r1, $r2, $z0);

        return;
    }
    public static void writeLines(java.io.File, java.util.Collection, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.util.Collection r1;
        boolean $z0;

        $r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Collection;

        $z0 := @parameter2: boolean;

        staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String,boolean)>($r0, null, r1, null, $z0);

        return;
    }
    public static void writeStringToFile(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>($r0, $r1, $r2, 0);

        return;
    }
    public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String,boolean)>($r0, $r1, $r2, 0);

        return;
    }
    public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.nio.charset.Charset $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>($r2);

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>($r0, $r1, $r3, $z0);

        return;
    }
    public static void writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>($r0, $r1, $r2, 0);

        return;
    }
    public static void writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        java.io.FileOutputStream $r4, r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.nio.charset.Charset;

        $z0 := @parameter3: boolean;

        r5 = null;

     label1:
        $r4 = staticinvoke <org.apache.commons.io.FileUtils: java.io.FileOutputStream openOutputStream(java.io.File,boolean)>($r0, $z0);

     label2:
        r5 = $r4;

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)>($r1, $r4, $r2);

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r4);

        return;

     label5:
        $r3 := @caughtexception;

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
    public static void writeStringToFile(java.io.File, java.lang.String, boolean) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1;
        boolean $z0;
        java.nio.charset.Charset $r2;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.nio.charset.Charset,boolean)>($r0, $r1, $r2, $z0);

        return;
    }
