org.apache.commons.io.DirectoryWalker extends java.lang.Object
private final int depthLimit
private final java.io.FileFilter filter
    protected void <init>()
    {
        org.apache.commons.io.DirectoryWalker r0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void <init>(java.io.FileFilter,int)>(null, -1);

        return;
    }
    protected void <init>(java.io.FileFilter, int)
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.FileFilter $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.FileFilter;

        $i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = $r1;

        r0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = $i0;

        return;
    }
    protected void <init>(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter, int)
    {
        org.apache.commons.io.DirectoryWalker r0;
        int $i0;
        org.apache.commons.io.filefilter.IOFileFilter $r1, $r2;
        org.apache.commons.io.filefilter.IOFileFilter[] $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label2;

        if $r2 != null goto label2;

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = null;

     label1:
        r0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = $i0;

        return;

     label2:
        if $r1 == null goto label5;

     label3:
        if $r2 == null goto label6;

     label4:
        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>($r1);

        $r2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>($r2);

        $r3 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];

        $r3[0] = $r1;

        $r3[1] = $r2;

        $r1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])>($r3);

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = $r1;

        goto label1;

     label5:
        $r1 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

        goto label3;

     label6:
        $r2 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

        goto label4;
    }
    private void walk(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1, r3;
        int $i0, i1, i2, i3;
        java.util.Collection r2;
        boolean $z0;
        java.io.FileFilter $r4;
        java.io.File[] $r5;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

        $z0 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: boolean handleDirectory(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

        if $z0 == 0 goto label4;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryStart(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

        i1 = $i0 + 1;

        i2 = r0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;

        if i2 < 0 goto label1;

        i2 = r0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;

        if i1 > i2 goto label3;

     label1:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

        $r4 = r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;

        if $r4 != null goto label5;

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

     label2:
        $r5 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: java.io.File[] filterDirectoryContents(java.io.File,int,java.io.File[])>($r1, $i0, $r5);

        if $r5 != null goto label6;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleRestricted(java.io.File,int,java.util.Collection)>($r1, i1, r2);

     label3:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryEnd(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

     label4:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

        return;

     label5:
        $r4 = r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r4);

        goto label2;

     label6:
        i2 = lengthof $r5;

        i3 = 0;

     label7:
        if i3 >= i2 goto label3;

        r3 = $r5[i3];

        $z0 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label9;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(r3, i1, r2);

     label8:
        i3 = i3 + 1;

        goto label7;

     label9:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r3, i1, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleFile(java.io.File,int,java.util.Collection)>(r3, i1, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r3, i1, r2);

        goto label8;
    }
    protected final void checkIfCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;
        boolean $z0;
        org.apache.commons.io.DirectoryWalker$CancelException $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        $z0 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: boolean handleIsCancelled(java.io.File,int,java.util.Collection)>($r1, $i0, r2);

        if $z0 == 0 goto label1;

        $r3 = new org.apache.commons.io.DirectoryWalker$CancelException;

        specialinvoke $r3.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)>($r1, $i0);

        throw $r3;

     label1:
        return;
    }
    protected java.io.File[] filterDirectoryContents(java.io.File, int, java.io.File[]) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.io.File[] $r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.io.File[];

        return $r2;
    }
    protected void handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        java.util.Collection r2;
        org.apache.commons.io.DirectoryWalker$CancelException $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: org.apache.commons.io.DirectoryWalker$CancelException;

        throw $r3;
    }
    protected boolean handleDirectory(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return 1;
    }
    protected void handleDirectoryEnd(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }
    protected void handleDirectoryStart(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }
    protected void handleEnd(java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.util.Collection;

        return;
    }
    protected void handleFile(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }
    protected boolean handleIsCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return 0;
    }
    protected void handleRestricted(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        int $i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }
    protected void handleStart(java.io.File, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        return;
    }
    protected final void walk(java.io.File, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File $r1;
        java.util.Collection r2;
        org.apache.commons.io.DirectoryWalker$CancelException r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        $r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        if $r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Start Directory is null");

        throw $r4;

     label1:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleStart(java.io.File,java.util.Collection)>($r1, r2);

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>($r1, 0, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleEnd(java.util.Collection)>(r2);

     label2:
        return;

     label3:
        r3 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)>($r1, r2, r3);

        return;

        catch org.apache.commons.io.DirectoryWalker$CancelException from label1 to label2 with label3;
    }
