org.apache.commons.io.monitor.FileAlterationMonitor extends java.lang.Object implements java.lang.Runnable
private final long interval
private final java.util.List observers
private volatile boolean running
private java.lang.Thread thread
private java.util.concurrent.ThreadFactory threadFactory
    public void <init>()
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationMonitor: void <init>(long)>(10000L);

        return;
    }
    public void <init>(long)
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        long $l0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        $l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers> = $r1;

        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread> = null;

        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> = 0;

        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval> = $l0;

        return;
    }
    public transient void <init>(long, org.apache.commons.io.monitor.FileAlterationObserver[])
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        long $l0;
        org.apache.commons.io.monitor.FileAlterationObserver[] $r1;
        int i1, i2;
        org.apache.commons.io.monitor.FileAlterationObserver r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        $l0 := @parameter0: long;

        $r1 := @parameter1: org.apache.commons.io.monitor.FileAlterationObserver[];

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationMonitor: void <init>(long)>($l0);

        if $r1 == null goto label2;

        i1 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = $r1[i2];

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationMonitor: void addObserver(org.apache.commons.io.monitor.FileAlterationObserver)>(r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public void addObserver(org.apache.commons.io.monitor.FileAlterationObserver)
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        org.apache.commons.io.monitor.FileAlterationObserver $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileAlterationObserver;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }
    public long getInterval()
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        long l0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        l0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval>;

        return l0;
    }
    public java.lang.Iterable getObservers()
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        r1 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;

        return r1;
    }
    public void removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        org.apache.commons.io.monitor.FileAlterationObserver $r1;
        boolean $z0;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileAlterationObserver;

        if $r1 == null goto label2;

     label1:
        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

     label2:
        return;
    }
    public void run()
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        boolean $z0;
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        org.apache.commons.io.monitor.FileAlterationObserver r4;
        long $l0;
        java.lang.InterruptedException $r5;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

     label1:
        $z0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;

        if $z0 == 0 goto label8;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.io.monitor.FileAlterationObserver) $r3;

        virtualinvoke r4.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify()>();

        goto label2;

     label3:
        $z0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;

        if $z0 != 0 goto label4;

        return;

     label4:
        $l0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval>;

     label5:
        staticinvoke <java.lang.Thread: void sleep(long)>($l0);

     label6:
        goto label1;

     label7:
        $r5 := @caughtexception;

        goto label1;

     label8:
        return;

        catch java.lang.InterruptedException from label5 to label6 with label7;
    }
    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        java.util.concurrent.ThreadFactory $r1;
        java.lang.Throwable $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        $r1 := @parameter0: java.util.concurrent.ThreadFactory;

        entermonitor r0;

     label1:
        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.concurrent.ThreadFactory threadFactory> = $r1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void start() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.lang.Throwable $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.apache.commons.io.monitor.FileAlterationObserver r6;
        java.util.concurrent.ThreadFactory $r7;
        java.lang.Thread $r8;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        entermonitor r0;

     label1:
        $z0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Monitor is already running");

        throw $r1;

     label2:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label3:
        $r3 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.io.monitor.FileAlterationObserver) $r5;

        virtualinvoke r6.<org.apache.commons.io.monitor.FileAlterationObserver: void initialize()>();

        goto label4;

     label5:
        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> = 1;

        $r7 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.concurrent.ThreadFactory threadFactory>;

        if $r7 == null goto label8;

        $r7 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.concurrent.ThreadFactory threadFactory>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r0);

        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread> = $r8;

     label6:
        $r8 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread>;

        virtualinvoke $r8.<java.lang.Thread: void start()>();

     label7:
        exitmonitor r0;

        return;

     label8:
        $r8 = new java.lang.Thread;

        specialinvoke $r8.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread> = $r8;

     label9:
        goto label6;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label7 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }
    public void stop() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        long $l0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        entermonitor r0;

     label1:
        $l0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: long interval>;

        virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationMonitor: void stop(long)>($l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void stop(long) throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationMonitor r0;
        long $l0;
        java.lang.InterruptedException r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        java.lang.Thread $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        java.lang.Object $r7;
        org.apache.commons.io.monitor.FileAlterationObserver r8;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationMonitor;

        $l0 := @parameter0: long;

        entermonitor r0;

     label01:
        $z0 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running>;

        if $z0 != 0 goto label03;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Monitor is not running");

        throw $r2;

     label02:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

     label03:
        r0.<org.apache.commons.io.monitor.FileAlterationMonitor: boolean running> = 0;

     label04:
        $r4 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.lang.Thread thread>;

     label05:
        virtualinvoke $r4.<java.lang.Thread: void join(long)>($l0);

     label06:
        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationMonitor: java.util.List observers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.io.monitor.FileAlterationObserver) $r7;

        virtualinvoke r8.<org.apache.commons.io.monitor.FileAlterationObserver: void destroy()>();

        goto label07;

     label08:
        r1 := @caughtexception;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label09:
        goto label06;

     label10:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.InterruptedException from label05 to label06 with label08;
        catch java.lang.Throwable from label04 to label06 with label02;
        catch java.lang.Throwable from label06 to label09 with label02;
    }
