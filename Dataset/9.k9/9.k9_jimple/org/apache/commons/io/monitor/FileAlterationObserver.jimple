org.apache.commons.io.monitor.FileAlterationObserver extends java.lang.Object implements java.io.Serializable
private final java.util.Comparator comparator
private final java.io.FileFilter fileFilter
private final java.util.List listeners
private final org.apache.commons.io.monitor.FileEntry rootEntry
    public void <init>(java.io.File)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>($r1, null);

        return;
    }
    public void <init>(java.io.File, java.io.FileFilter)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r1;
        java.io.FileFilter $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.FileFilter;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>($r1, $r2, null);

        return;
    }
    public void <init>(java.io.File, java.io.FileFilter, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r1;
        java.io.FileFilter $r2;
        org.apache.commons.io.IOCase $r3;
        org.apache.commons.io.monitor.FileEntry $r4;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.io.FileFilter;

        $r3 := @parameter2: org.apache.commons.io.IOCase;

        $r4 = new org.apache.commons.io.monitor.FileEntry;

        specialinvoke $r4.<org.apache.commons.io.monitor.FileEntry: void <init>(java.io.File)>($r1);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(org.apache.commons.io.monitor.FileEntry,java.io.FileFilter,org.apache.commons.io.IOCase)>($r4, $r2, $r3);

        return;
    }
    public void <init>(java.lang.String)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.String $r1;
        java.io.File $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File)>($r2);

        return;
    }
    public void <init>(java.lang.String, java.io.FileFilter)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.String $r1;
        java.io.FileFilter $r2;
        java.io.File $r3;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.FileFilter;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter)>($r3, $r2);

        return;
    }
    public void <init>(java.lang.String, java.io.FileFilter, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.String $r1;
        java.io.FileFilter $r2;
        org.apache.commons.io.IOCase $r3;
        java.io.File $r4;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.FileFilter;

        $r3 := @parameter2: org.apache.commons.io.IOCase;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void <init>(java.io.File,java.io.FileFilter,org.apache.commons.io.IOCase)>($r4, $r2, $r3);

        return;
    }
    protected void <init>(org.apache.commons.io.monitor.FileEntry, java.io.FileFilter, org.apache.commons.io.IOCase)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1;
        java.io.FileFilter $r2;
        org.apache.commons.io.IOCase $r3, $r7;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.lang.IllegalArgumentException $r5;
        java.io.File $r6;
        boolean $z0;
        java.util.Comparator $r8;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r2 := @parameter1: java.io.FileFilter;

        $r3 := @parameter2: org.apache.commons.io.IOCase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners> = $r4;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root entry is missing");

        throw $r5;

     label1:
        $r6 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        if $r6 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root directory is missing");

        throw $r5;

     label2:
        r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry> = $r1;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter> = $r2;

        if $r3 == null goto label3;

        $r7 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase SYSTEM>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

     label3:
        $r8 = <org.apache.commons.io.comparator.NameFileComparator: java.util.Comparator NAME_SYSTEM_COMPARATOR>;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> = $r8;

        return;

     label4:
        $r7 = <org.apache.commons.io.IOCase: org.apache.commons.io.IOCase INSENSITIVE>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

        $r8 = <org.apache.commons.io.comparator.NameFileComparator: java.util.Comparator NAME_INSENSITIVE_COMPARATOR>;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> = $r8;

        return;

     label5:
        $r8 = <org.apache.commons.io.comparator.NameFileComparator: java.util.Comparator NAME_COMPARATOR>;

        r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator> = $r8;

        return;
    }
    private void checkAndNotify(org.apache.commons.io.monitor.FileEntry, org.apache.commons.io.monitor.FileEntry[], java.io.File[])
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1, r4, $r9;
        org.apache.commons.io.monitor.FileEntry[] $r2, r5, $r10;
        java.io.File[] $r3, $r11;
        int i0, i1, i2, $i3;
        java.util.Comparator $r6;
        java.io.File $r7, $r8;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r2 := @parameter1: org.apache.commons.io.monitor.FileEntry[];

        $r3 := @parameter2: java.io.File[];

        i1 = 0;

        i0 = lengthof $r3;

        if i0 <= 0 goto label4;

        i0 = lengthof $r3;

        r5 = newarray (org.apache.commons.io.monitor.FileEntry)[i0];

     label1:
        i0 = lengthof $r2;

        i2 = 0;

     label2:
        if i2 >= i0 goto label8;

        r4 = $r2[i2];

     label3:
        $i3 = lengthof $r3;

        if i1 >= $i3 goto label5;

        $r6 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        $r7 = virtualinvoke r4.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $r8 = $r3[i1];

        $i3 = interfaceinvoke $r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $i3 <= 0 goto label5;

        $r7 = $r3[i1];

        $r9 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>($r1, $r7);

        r5[i1] = $r9;

        $r9 = r5[i1];

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void doCreate(org.apache.commons.io.monitor.FileEntry)>($r9);

        i1 = i1 + 1;

        goto label3;

     label4:
        r5 = <org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] EMPTY_ENTRIES>;

        goto label1;

     label5:
        $i3 = lengthof $r3;

        if i1 >= $i3 goto label7;

        $r6 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        $r7 = virtualinvoke r4.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $r8 = $r3[i1];

        $i3 = interfaceinvoke $r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $i3 != 0 goto label7;

        $r7 = $r3[i1];

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void doMatch(org.apache.commons.io.monitor.FileEntry,java.io.File)>(r4, $r7);

        $r10 = virtualinvoke r4.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r7 = $r3[i1];

        $r11 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r7);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>(r4, $r10, $r11);

        r5[i1] = r4;

        i1 = i1 + 1;

     label6:
        i2 = i2 + 1;

        goto label2;

     label7:
        $r10 = virtualinvoke r4.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r11 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>(r4, $r10, $r11);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void doDelete(org.apache.commons.io.monitor.FileEntry)>(r4);

        goto label6;

     label8:
        i0 = lengthof $r3;

        if i1 >= i0 goto label9;

        $r7 = $r3[i1];

        r4 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>($r1, $r7);

        r5[i1] = r4;

        r4 = r5[i1];

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void doCreate(org.apache.commons.io.monitor.FileEntry)>(r4);

        i1 = i1 + 1;

        goto label8;

     label9:
        virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: void setChildren(org.apache.commons.io.monitor.FileEntry[])>(r5);

        return;
    }
    private org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry, java.io.File)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1, $r5;
        java.io.File $r2;
        java.io.File[] $r3;
        int $i0, $i1;
        org.apache.commons.io.monitor.FileEntry[] r4;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r2 := @parameter1: java.io.File;

        $r1 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry newChildInstance(java.io.File)>($r2);

        virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>($r2);

        $r3 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r2);

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label3;

        $i0 = lengthof $r3;

        r4 = newarray (org.apache.commons.io.monitor.FileEntry)[$i0];

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label4;

        $r2 = $r3[$i0];

        $r5 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>($r1, $r2);

        r4[$i0] = $r5;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        r4 = <org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] EMPTY_ENTRIES>;

        goto label1;

     label4:
        virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: void setChildren(org.apache.commons.io.monitor.FileEntry[])>(r4);

        return $r1;
    }
    private void doCreate(org.apache.commons.io.monitor.FileEntry)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1;
        int i0, i1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.io.monitor.FileAlterationListener r5;
        java.io.File $r6;
        org.apache.commons.io.monitor.FileEntry[] $r7;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.io.monitor.FileAlterationListener) $r4;

        $z0 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r5.<org.apache.commons.io.monitor.FileAlterationListener: void onDirectoryCreate(java.io.File)>($r6);

        goto label1;

     label2:
        $r6 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r5.<org.apache.commons.io.monitor.FileAlterationListener: void onFileCreate(java.io.File)>($r6);

        goto label1;

     label3:
        $r7 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        i0 = lengthof $r7;

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r1 = $r7[i1];

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void doCreate(org.apache.commons.io.monitor.FileEntry)>($r1);

        i1 = i1 + 1;

        goto label4;

     label5:
        return;
    }
    private void doDelete(org.apache.commons.io.monitor.FileEntry)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.io.monitor.FileAlterationListener r5;
        java.io.File $r6;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.io.monitor.FileAlterationListener) $r4;

        $z0 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r5.<org.apache.commons.io.monitor.FileAlterationListener: void onDirectoryDelete(java.io.File)>($r6);

        goto label1;

     label2:
        $r6 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        interfaceinvoke r5.<org.apache.commons.io.monitor.FileAlterationListener: void onFileDelete(java.io.File)>($r6);

        goto label1;

     label3:
        return;
    }
    private void doMatch(org.apache.commons.io.monitor.FileEntry, java.io.File)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1;
        java.io.File $r2;
        boolean $z0;
        java.util.List $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.apache.commons.io.monitor.FileAlterationListener r6;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileEntry;

        $r2 := @parameter1: java.io.File;

        $z0 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>($r2);

        if $z0 == 0 goto label3;

        $r3 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.io.monitor.FileAlterationListener) $r5;

        $z0 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r6.<org.apache.commons.io.monitor.FileAlterationListener: void onDirectoryChange(java.io.File)>($r2);

        goto label1;

     label2:
        interfaceinvoke r6.<org.apache.commons.io.monitor.FileAlterationListener: void onFileChange(java.io.File)>($r2);

        goto label1;

     label3:
        return;
    }
    private java.io.File[] listFiles(java.io.File)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r1;
        java.io.File[] r2;
        boolean $z0;
        java.io.FileFilter $r3;
        java.util.Comparator $r4;
        int $i0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: java.io.File;

        r2 = null;

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        if $r3 != null goto label3;

        r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

     label1:
        if r2 != null goto label2;

        r2 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

     label2:
        $r4 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        if $r4 == null goto label4;

        $i0 = lengthof r2;

        if $i0 <= 1 goto label4;

        $r4 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.Comparator comparator>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r2, $r4);

        return r2;

     label3:
        $r3 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r3);

        goto label1;

     label4:
        return r2;
    }
    public void addListener(org.apache.commons.io.monitor.FileAlterationListener)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileAlterationListener $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileAlterationListener;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

     label1:
        return;
    }
    public void checkAndNotify()
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.commons.io.monitor.FileAlterationListener r4;
        org.apache.commons.io.monitor.FileEntry $r5, $r7;
        java.io.File $r6;
        org.apache.commons.io.monitor.FileEntry[] $r8;
        java.io.File[] $r9;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.io.monitor.FileAlterationListener) $r3;

        interfaceinvoke r4.<org.apache.commons.io.monitor.FileAlterationListener: void onStart(org.apache.commons.io.monitor.FileAlterationObserver)>(r0);

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r6 = virtualinvoke $r5.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label5;

        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r7 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r8 = virtualinvoke $r7.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r9 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r6);

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>($r5, $r8, $r9);

     label3:
        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.io.monitor.FileAlterationListener) $r3;

        interfaceinvoke r4.<org.apache.commons.io.monitor.FileAlterationListener: void onStop(org.apache.commons.io.monitor.FileAlterationObserver)>(r0);

        goto label4;

     label5:
        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $z0 = virtualinvoke $r5.<org.apache.commons.io.monitor.FileEntry: boolean isExists()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r7 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r8 = virtualinvoke $r7.<org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] getChildren()>();

        $r9 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;

        specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: void checkAndNotify(org.apache.commons.io.monitor.FileEntry,org.apache.commons.io.monitor.FileEntry[],java.io.File[])>($r5, $r8, $r9);

        goto label3;

     label6:
        return;
    }
    public void destroy() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        return;
    }
    public java.io.File getDirectory()
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.File $r1;
        org.apache.commons.io.monitor.FileEntry $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r1 = virtualinvoke $r2.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        return $r1;
    }
    public java.io.FileFilter getFileFilter()
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.io.FileFilter r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        return r1;
    }
    public java.lang.Iterable getListeners()
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        return r1;
    }
    public void initialize() throws java.lang.Exception
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileEntry $r1, $r2;
        java.io.File $r3;
        java.io.File[] $r4;
        int $i0, $i1;
        org.apache.commons.io.monitor.FileEntry[] r5;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r3 = virtualinvoke $r2.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: boolean refresh(java.io.File)>($r3);

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r3 = virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: java.io.File getFile()>();

        $r4 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File[] listFiles(java.io.File)>($r3);

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label3;

        $i0 = lengthof $r4;

        r5 = newarray (org.apache.commons.io.monitor.FileEntry)[$i0];

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label4;

        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        $r3 = $r4[$i0];

        $r1 = specialinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry createFileEntry(org.apache.commons.io.monitor.FileEntry,java.io.File)>($r1, $r3);

        r5[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        r5 = <org.apache.commons.io.monitor.FileEntry: org.apache.commons.io.monitor.FileEntry[] EMPTY_ENTRIES>;

        goto label1;

     label4:
        $r1 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: org.apache.commons.io.monitor.FileEntry rootEntry>;

        virtualinvoke $r1.<org.apache.commons.io.monitor.FileEntry: void setChildren(org.apache.commons.io.monitor.FileEntry[])>(r5);

        return;
    }
    public void removeListener(org.apache.commons.io.monitor.FileAlterationListener)
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        org.apache.commons.io.monitor.FileAlterationListener $r1;
        boolean $z0;
        java.util.List $r2;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        $r1 := @parameter0: org.apache.commons.io.monitor.FileAlterationListener;

        if $r1 == null goto label2;

     label1:
        $r2 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

     label2:
        return;
    }
    public java.lang.String toString()
    {
        org.apache.commons.io.monitor.FileAlterationObserver r0;
        java.lang.StringBuilder r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.io.File $r4;
        java.io.FileFilter $r5;
        java.util.List $r6;
        int $i0;

        r0 := @this: org.apache.commons.io.monitor.FileAlterationObserver;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[file=\'");

        $r4 = virtualinvoke r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.File getDirectory()>();

        $r3 = virtualinvoke $r4.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        if $r5 == null goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.io.FileFilter fileFilter>;

        $r3 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", listeners=");

        $r6 = r0.<org.apache.commons.io.monitor.FileAlterationObserver: java.util.List listeners>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
