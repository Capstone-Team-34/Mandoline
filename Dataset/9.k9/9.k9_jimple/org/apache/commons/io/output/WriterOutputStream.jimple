org.apache.commons.io.output.WriterOutputStream extends java.io.OutputStream
private static final int DEFAULT_BUFFER_SIZE
private final java.nio.charset.CharsetDecoder decoder
private final java.nio.ByteBuffer decoderIn
private final java.nio.CharBuffer decoderOut
private final boolean writeImmediately
private final java.io.Writer writer
    public void <init>(java.io.Writer)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.nio.charset.Charset $r2;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>($r1, $r2, 1024, 0);

        return;
    }
    public void <init>(java.io.Writer, java.lang.String)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.lang.String,int,boolean)>($r1, $r2, 1024, 0);

        return;
    }
    public void <init>(java.io.Writer, java.lang.String, int, boolean)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r2);

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>($r1, $r3, $i0, $z0);

        return;
    }
    public void <init>(java.io.Writer, java.nio.charset.Charset)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.nio.charset.Charset $r2;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.Charset,int,boolean)>($r1, $r2, 1024, 0);

        return;
    }
    public void <init>(java.io.Writer, java.nio.charset.Charset, int, boolean)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.nio.charset.Charset $r2;
        int $i0;
        boolean $z0;
        java.nio.charset.CharsetDecoder $r3;
        java.nio.charset.CodingErrorAction $r4;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.nio.charset.Charset;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r4);

        $r3 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>("?");

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>($r1, $r3, $i0, $z0);

        return;
    }
    public void <init>(java.io.Writer, java.nio.charset.CharsetDecoder)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.nio.charset.CharsetDecoder $r2;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.nio.charset.CharsetDecoder;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void <init>(java.io.Writer,java.nio.charset.CharsetDecoder,int,boolean)>($r1, $r2, 1024, 0);

        return;
    }
    public void <init>(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean)
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;
        java.nio.charset.CharsetDecoder $r2;
        int $i0;
        boolean $z0;
        java.nio.ByteBuffer $r3;
        java.nio.CharBuffer $r4;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: java.io.Writer;

        $r2 := @parameter1: java.nio.charset.CharsetDecoder;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(128);

        r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn> = $r3;

        r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer> = $r1;

        r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.charset.CharsetDecoder decoder> = $r2;

        r0.<org.apache.commons.io.output.WriterOutputStream: boolean writeImmediately> = $z0;

        $r4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i0);

        r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut> = $r4;

        return;
    }
    private void flushOutput() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.nio.CharBuffer $r1;
        int $i0;
        java.io.Writer $r2;
        char[] $r3;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $r3 = virtualinvoke $r1.<java.nio.CharBuffer: char[] array()>();

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $i0 = virtualinvoke $r1.<java.nio.CharBuffer: int position()>();

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0);

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        virtualinvoke $r1.<java.nio.CharBuffer: java.nio.Buffer rewind()>();

     label1:
        return;
    }
    private void processInput(boolean) throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        boolean $z0, $z1;
        java.nio.CharBuffer $r1;
        java.nio.ByteBuffer $r2;
        java.nio.charset.CharsetDecoder $r3;
        java.nio.charset.CoderResult $r4;
        java.io.IOException $r5;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $z0 := @parameter0: boolean;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label1:
        $r3 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.charset.CharsetDecoder decoder>;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.CharBuffer decoderOut>;

        $r4 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>($r2, $r1, $z0);

        $z1 = virtualinvoke $r4.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

        goto label1;

     label2:
        $z0 = virtualinvoke $r4.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        return;

     label3:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Unexpected coder result");

        throw $r5;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>(1);

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        return;
    }
    public void flush() throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        java.io.Writer $r1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

        $r1 = r0.<org.apache.commons.io.output.WriterOutputStream: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void write(int) throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        int $i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        virtualinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }
    public void write(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }
    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.WriterOutputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.WriterOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        if $i1 <= 0 goto label2;

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r2 = r0.<org.apache.commons.io.output.WriterOutputStream: java.nio.ByteBuffer decoderIn>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r1, $i0, $i2);

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void processInput(boolean)>(0);

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i2;

        goto label1;

     label2:
        $z0 = r0.<org.apache.commons.io.output.WriterOutputStream: boolean writeImmediately>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<org.apache.commons.io.output.WriterOutputStream: void flushOutput()>();

     label3:
        return;
    }
