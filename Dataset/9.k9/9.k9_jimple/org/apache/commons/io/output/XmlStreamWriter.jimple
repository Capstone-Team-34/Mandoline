org.apache.commons.io.output.XmlStreamWriter extends java.io.Writer
private static final int BUFFER_SIZE
static final java.util.regex.Pattern ENCODING_PATTERN
private final java.lang.String defaultEncoding
private java.lang.String encoding
private final java.io.OutputStream out
private java.io.Writer writer
private java.io.StringWriter xmlPrologWriter
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN>;

        <org.apache.commons.io.output.XmlStreamWriter: java.util.regex.Pattern ENCODING_PATTERN> = $r0;

        return;
    }
    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.File,java.lang.String)>($r1, null);

        return;
    }
    public void <init>(java.io.File, java.lang.String) throws java.io.FileNotFoundException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.File $r1;
        java.lang.String $r2;
        java.io.FileOutputStream $r3;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r1);

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r3, $r2);

        return;
    }
    public void <init>(java.io.OutputStream)
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r1, null);

        return;
    }
    public void <init>(java.io.OutputStream, java.lang.String)
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.OutputStream $r1;
        java.io.StringWriter $r2;
        java.lang.String r3;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>(int)>(4096);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter> = $r2;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out> = $r1;

        if r3 == null goto label2;

     label1:
        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding> = r3;

        return;

     label2:
        r3 = "UTF-8";

        goto label1;
    }
    private void detectEncoding(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        char[] $r1;
        int $i0, $i1, i2, $i3;
        java.io.StringWriter $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4, $r7;
        boolean $z0;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;
        java.io.OutputStreamWriter $r8;
        java.io.OutputStream $r9;
        java.io.Writer $r10;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        i2 = $i1;

        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        $r3 = virtualinvoke $r2.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $i3 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        $i3 = $i3 + $i1;

        if $i3 <= 4096 goto label1;

        i2 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        i2 = 4096 - i2;

     label1:
        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        virtualinvoke $r2.<java.io.StringWriter: void write(char[],int,int)>($r1, $i0, i2);

        $i3 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        if $i3 < 5 goto label6;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, 5);

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("<?xml");

        if $z0 == 0 goto label5;

        $i3 = virtualinvoke $r3.<java.lang.StringBuffer: int indexOf(java.lang.String)>("?>");

        if $i3 <= 0 goto label4;

        $r5 = <org.apache.commons.io.output.XmlStreamWriter: java.util.regex.Pattern ENCODING_PATTERN>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i3);

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r4;

        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        $r7 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i3 = $i3 + -1;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r4;

     label2:
        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        if $r4 == null goto label6;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter> = null;

        $r8 = new java.io.OutputStreamWriter;

        $r9 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out>;

        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r9, $r4);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer> = $r8;

        $r10 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.Writer: void write(java.lang.String)>($r4);

        if $i1 <= i2 goto label6;

        $r10 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        $i0 = $i0 + i2;

        $i1 = $i1 - i2;

        virtualinvoke $r10.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1);

        return;

     label3:
        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r4;

        goto label2;

     label4:
        $i3 = virtualinvoke $r3.<java.lang.StringBuffer: int length()>();

        if $i3 < 4096 goto label2;

        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r4;

        goto label2;

     label5:
        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r4;

        goto label2;

     label6:
        return;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.lang.String $r1;
        java.io.Writer $r2;
        java.io.OutputStreamWriter $r3;
        java.io.OutputStream $r4;
        java.io.StringWriter $r5;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        if $r2 != null goto label1;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = $r1;

        $r3 = new java.io.OutputStreamWriter;

        $r4 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out>;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r4, $r1);

        r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer> = $r3;

        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        $r5 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        $r1 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

     label1:
        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void close()>();

        return;
    }
    public void flush() throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.io.Writer $r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        if $r1 == null goto label1;

        $r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

     label1:
        return;
    }
    public java.lang.String getDefaultEncoding()
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;

        return r1;
    }
    public java.lang.String getEncoding()
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        r1 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;

        return r1;
    }
    public void write(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.XmlStreamWriter r0;
        char[] $r1;
        int $i0, $i1;
        java.io.StringWriter $r2;
        java.io.Writer $r3;

        r0 := @this: org.apache.commons.io.output.XmlStreamWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;

        if $r2 == null goto label1;

        specialinvoke r0.<org.apache.commons.io.output.XmlStreamWriter: void detectEncoding(char[],int,int)>($r1, $i0, $i1);

        return;

     label1:
        $r3 = r0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1);

        return;
    }
