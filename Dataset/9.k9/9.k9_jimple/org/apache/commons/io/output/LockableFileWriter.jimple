org.apache.commons.io.output.LockableFileWriter extends java.io.Writer
private static final java.lang.String LCK
private final java.io.File lockFile
private final java.io.Writer out
    public void <init>(java.io.File) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>($r1, 0, null);

        return;
    }
    public void <init>(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.lang.String,boolean,java.lang.String)>($r1, $r2, 0, null);

        return;
    }
    public void <init>(java.io.File, java.lang.String, boolean, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.nio.charset.Charset $r4;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: java.lang.String;

        $r4 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>($r2);

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>($r1, $r4, $z0, $r3);

        return;
    }
    public void <init>(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        java.nio.charset.Charset $r2;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>($r1, $r2, 0, null);

        return;
    }
    public void <init>(java.io.File, java.nio.charset.Charset, boolean, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.nio.charset.Charset $r1;
        boolean $z0, $z1;
        java.io.File r2, $r3, $r6;
        java.lang.String $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r7;
        java.io.Writer $r8;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r3 := @parameter0: java.io.File;

        $r1 := @parameter1: java.nio.charset.Charset;

        $z0 := @parameter2: boolean;

        $r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.io.Writer: void <init>()>();

        $r3 = virtualinvoke $r3.<java.io.File: java.io.File getAbsoluteFile()>();

        r2 = virtualinvoke $r3.<java.io.File: java.io.File getParentFile()>();

        if r2 == null goto label1;

        r2 = virtualinvoke $r3.<java.io.File: java.io.File getParentFile()>();

        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>(r2);

     label1:
        $z1 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("File specified is a directory");

        throw $r5;

     label2:
        if $r4 != null goto label3;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

     label3:
        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>($r4);

        staticinvoke <org.apache.commons.io.FileUtils: void forceMkdir(java.io.File)>(r2);

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void testLockDir(java.io.File)>(r2);

        $r6 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r4);

        r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile> = $r6;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void createLock()>();

        $r8 = specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer initWriter(java.io.File,java.nio.charset.Charset,boolean)>($r3, $r1, $z0);

        r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out> = $r8;

        return;
    }
    public void <init>(java.io.File, boolean) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>($r1, $z0, null);

        return;
    }
    public void <init>(java.io.File, boolean, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        boolean $z0;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,java.nio.charset.Charset,boolean,java.lang.String)>($r1, $r3, $z0, $r2);

        return;
    }
    public void <init>(java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>($r1, 0, null);

        return;
    }
    public void <init>(java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.lang.String,boolean,java.lang.String)>($r1, $z0, null);

        return;
    }
    public void <init>(java.lang.String, boolean, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.io.File $r3;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        specialinvoke r0.<org.apache.commons.io.output.LockableFileWriter: void <init>(java.io.File,boolean,java.lang.String)>($r3, $z0, $r2);

        return;
    }
    private void createLock() throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        entermonitor class "Lorg/apache/commons/io/output/LockableFileWriter;";

     label1:
        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean createNewFile()>();

        if $z0 != 0 goto label4;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t write file, lock ");

        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r5 := @caughtexception;

        exitmonitor class "Lorg/apache/commons/io/output/LockableFileWriter;";

     label3:
        throw $r5;

     label4:
        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        virtualinvoke $r1.<java.io.File: void deleteOnExit()>();

        exitmonitor class "Lorg/apache/commons/io/output/LockableFileWriter;";

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
    private java.io.Writer initWriter(java.io.File, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1, $r8;
        java.nio.charset.Charset $r2;
        boolean $z0, $z1;
        java.io.FileOutputStream r3, r5;
        java.io.OutputStreamWriter r4;
        java.lang.String $r6;
        java.io.IOException r7;
        java.lang.RuntimeException r9;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.nio.charset.Charset;

        $z0 := @parameter2: boolean;

        $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        r5 = null;

        r3 = new java.io.FileOutputStream;

     label01:
        $r6 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r3.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r6, $z0);

     label02:
        r4 = new java.io.OutputStreamWriter;

     label03:
        $r2 = staticinvoke <org.apache.commons.io.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>($r2);

        specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r3, $r2);

     label04:
        return r4;

     label05:
        r7 := @caughtexception;

     label06:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        $r8 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r8);

        if $z1 != 0 goto label07;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r1);

     label07:
        throw r7;

     label08:
        r9 := @caughtexception;

     label09:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Writer)>(null);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        $r8 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r8);

        if $z1 != 0 goto label10;

        staticinvoke <org.apache.commons.io.FileUtils: boolean deleteQuietly(java.io.File)>($r1);

     label10:
        throw r9;

     label11:
        r9 := @caughtexception;

        r5 = r3;

        goto label09;

     label12:
        r7 := @caughtexception;

        r5 = r3;

        goto label06;

        catch java.io.IOException from label01 to label02 with label05;
        catch java.lang.RuntimeException from label01 to label02 with label08;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.lang.RuntimeException from label03 to label04 with label11;
    }
    private void testLockDir(java.io.File) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find lockDir: ");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.io.File: boolean canWrite()>();

        if $z0 != 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write to lockDir: ");

        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return;
    }
    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.File $r1;
        java.io.Writer $r2;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

     label1:
        $r2 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void close()>();

     label2:
        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.File lockFile>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
    public void flush() throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.io.Writer $r1;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }
    public void write(int) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        int $i0;
        java.io.Writer $r1;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(int)>($i0);

        return;
    }
    public void write(java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.lang.String $r1;
        java.io.Writer $r2;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r1);

        return;
    }
    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.io.Writer $r2;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String,int,int)>($r1, $i0, $i1);

        return;
    }
    public void write(char[]) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        char[] $r1;
        java.io.Writer $r2;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: char[];

        $r2 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(char[])>($r1);

        return;
    }
    public void write(char[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.LockableFileWriter r0;
        char[] $r1;
        int $i0, $i1;
        java.io.Writer $r2;

        r0 := @this: org.apache.commons.io.output.LockableFileWriter;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.io.output.LockableFileWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, $i0, $i1);

        return;
    }
