org.jsoup.helper.HttpConnection$Request extends org.jsoup.helper.HttpConnection$Base implements org.jsoup.Connection$Request
private java.lang.String body
private java.util.Collection data
private boolean followRedirects
private boolean ignoreContentType
private boolean ignoreHttpErrors
private int maxBodySizeBytes
private org.jsoup.parser.Parser parser
private boolean parserDefined
private java.lang.String postDataCharset
private java.net.Proxy proxy
private int timeoutMilliseconds
private boolean validateTSLCertificates
    private void <init>()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.parser.Parser $r1;
        java.util.ArrayList $r2;
        org.jsoup.Connection$Method $r3;
        java.util.Map $r4;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: void <init>(org.jsoup.helper.HttpConnection$1)>(null);

        r0.<org.jsoup.helper.HttpConnection$Request: java.lang.String body> = null;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean ignoreHttpErrors> = 0;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean ignoreContentType> = 0;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean parserDefined> = 0;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean validateTSLCertificates> = 1;

        r0.<org.jsoup.helper.HttpConnection$Request: java.lang.String postDataCharset> = "UTF-8";

        r0.<org.jsoup.helper.HttpConnection$Request: int timeoutMilliseconds> = 30000;

        r0.<org.jsoup.helper.HttpConnection$Request: int maxBodySizeBytes> = 1048576;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean followRedirects> = 1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.jsoup.helper.HttpConnection$Request: java.util.Collection data> = $r2;

        $r3 = <org.jsoup.Connection$Method: org.jsoup.Connection$Method GET>;

        r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.Connection$Method method> = $r3;

        $r4 = r0.<org.jsoup.helper.HttpConnection$Request: java.util.Map headers>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept-Encoding", "gzip");

        $r4 = r0.<org.jsoup.helper.HttpConnection$Request: java.util.Map headers>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");

        $r1 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>();

        r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.parser.Parser parser> = $r1;

        return;
    }
    void <init>(org.jsoup.helper.HttpConnection$1)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.helper.HttpConnection$1 $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: org.jsoup.helper.HttpConnection$1;

        specialinvoke r0.<org.jsoup.helper.HttpConnection$Request: void <init>()>();

        return;
    }
    static boolean access$300(org.jsoup.helper.HttpConnection$Request)
    {
        org.jsoup.helper.HttpConnection$Request $r0;
        boolean z0;

        $r0 := @parameter0: org.jsoup.helper.HttpConnection$Request;

        z0 = $r0.<org.jsoup.helper.HttpConnection$Request: boolean parserDefined>;

        return z0;
    }
    public volatile java.lang.String cookie(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: java.lang.String cookie(java.lang.String)>($r1);

        return $r1;
    }
    public volatile java.util.Map cookies()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.util.Map $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies()>();

        return $r1;
    }
    public java.util.Collection data()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.util.Collection r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        r1 = r0.<org.jsoup.helper.HttpConnection$Request: java.util.Collection data>;

        return r1;
    }
    public volatile org.jsoup.Connection$Request data(org.jsoup.Connection$KeyVal)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.Connection$KeyVal $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: org.jsoup.Connection$KeyVal;

        r0 = virtualinvoke r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.helper.HttpConnection$Request data(org.jsoup.Connection$KeyVal)>($r1);

        return r0;
    }
    public org.jsoup.helper.HttpConnection$Request data(org.jsoup.Connection$KeyVal)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.Connection$KeyVal $r1;
        java.util.Collection $r2;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: org.jsoup.Connection$KeyVal;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r1, "Key val must not be null");

        $r2 = r0.<org.jsoup.helper.HttpConnection$Request: java.util.Collection data>;

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r1);

        return r0;
    }
    public org.jsoup.Connection$Request followRedirects(boolean)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $z0 := @parameter0: boolean;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean followRedirects> = $z0;

        return r0;
    }
    public boolean followRedirects()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        z0 = r0.<org.jsoup.helper.HttpConnection$Request: boolean followRedirects>;

        return z0;
    }
    public volatile boolean hasCookie(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: boolean hasCookie(java.lang.String)>($r1);

        return $z0;
    }
    public volatile boolean hasHeader(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: boolean hasHeader(java.lang.String)>($r1);

        return $z0;
    }
    public volatile boolean hasHeaderWithValue(java.lang.String, java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: boolean hasHeaderWithValue(java.lang.String,java.lang.String)>($r1, $r2);

        return $z0;
    }
    public volatile java.lang.String header(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: java.lang.String header(java.lang.String)>($r1);

        return $r1;
    }
    public volatile java.util.Map headers()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.util.Map $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers()>();

        return $r1;
    }
    public org.jsoup.Connection$Request ignoreContentType(boolean)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $z0 := @parameter0: boolean;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean ignoreContentType> = $z0;

        return r0;
    }
    public boolean ignoreContentType()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        z0 = r0.<org.jsoup.helper.HttpConnection$Request: boolean ignoreContentType>;

        return z0;
    }
    public org.jsoup.Connection$Request ignoreHttpErrors(boolean)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $z0 := @parameter0: boolean;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean ignoreHttpErrors> = $z0;

        return r0;
    }
    public boolean ignoreHttpErrors()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        z0 = r0.<org.jsoup.helper.HttpConnection$Request: boolean ignoreHttpErrors>;

        return z0;
    }
    public int maxBodySize()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        int i0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        i0 = r0.<org.jsoup.helper.HttpConnection$Request: int maxBodySizeBytes>;

        return i0;
    }
    public org.jsoup.Connection$Request maxBodySize(int)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "maxSize must be 0 (unlimited) or larger");

        r0.<org.jsoup.helper.HttpConnection$Request: int maxBodySizeBytes> = $i0;

        return r0;

     label2:
        $z0 = 0;

        goto label1;
    }
    public volatile org.jsoup.Connection$Method method()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.Connection$Method $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method()>();

        return $r1;
    }
    public volatile org.jsoup.Connection$Request parser(org.jsoup.parser.Parser)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.parser.Parser $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: org.jsoup.parser.Parser;

        r0 = virtualinvoke r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.helper.HttpConnection$Request parser(org.jsoup.parser.Parser)>($r1);

        return r0;
    }
    public org.jsoup.helper.HttpConnection$Request parser(org.jsoup.parser.Parser)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.parser.Parser $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: org.jsoup.parser.Parser;

        r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.parser.Parser parser> = $r1;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean parserDefined> = 1;

        return r0;
    }
    public org.jsoup.parser.Parser parser()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        org.jsoup.parser.Parser r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        r1 = r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.parser.Parser parser>;

        return r1;
    }
    public java.lang.String postDataCharset()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        r1 = r0.<org.jsoup.helper.HttpConnection$Request: java.lang.String postDataCharset>;

        return r1;
    }
    public org.jsoup.Connection$Request postDataCharset(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;
        boolean $z0;
        java.nio.charset.IllegalCharsetNameException $r2;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r1, "Charset must not be null");

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.nio.charset.IllegalCharsetNameException;

        specialinvoke $r2.<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        r0.<org.jsoup.helper.HttpConnection$Request: java.lang.String postDataCharset> = $r1;

        return r0;
    }
    public java.net.Proxy proxy()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.net.Proxy r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        r1 = r0.<org.jsoup.helper.HttpConnection$Request: java.net.Proxy proxy>;

        return r1;
    }
    public volatile org.jsoup.Connection$Request proxy(java.lang.String, int)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        r0 = virtualinvoke r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.helper.HttpConnection$Request proxy(java.lang.String,int)>($r1, $i0);

        return r0;
    }
    public volatile org.jsoup.Connection$Request proxy(java.net.Proxy)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.net.Proxy $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.net.Proxy;

        r0 = virtualinvoke r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.helper.HttpConnection$Request proxy(java.net.Proxy)>($r1);

        return r0;
    }
    public org.jsoup.helper.HttpConnection$Request proxy(java.lang.String, int)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;
        int $i0;
        java.net.Proxy $r2;
        java.net.Proxy$Type $r3;
        java.net.InetSocketAddress $r4;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.net.Proxy;

        $r3 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        $r4 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>($r1, $i0);

        specialinvoke $r2.<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>($r3, $r4);

        r0.<org.jsoup.helper.HttpConnection$Request: java.net.Proxy proxy> = $r2;

        return r0;
    }
    public org.jsoup.helper.HttpConnection$Request proxy(java.net.Proxy)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.net.Proxy $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.net.Proxy;

        r0.<org.jsoup.helper.HttpConnection$Request: java.net.Proxy proxy> = $r1;

        return r0;
    }
    public java.lang.String requestBody()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        r1 = r0.<org.jsoup.helper.HttpConnection$Request: java.lang.String body>;

        return r1;
    }
    public org.jsoup.Connection$Request requestBody(java.lang.String)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 := @parameter0: java.lang.String;

        r0.<org.jsoup.helper.HttpConnection$Request: java.lang.String body> = $r1;

        return r0;
    }
    public int timeout()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        int i0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        i0 = r0.<org.jsoup.helper.HttpConnection$Request: int timeoutMilliseconds>;

        return i0;
    }
    public volatile org.jsoup.Connection$Request timeout(int)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        int $i0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $i0 := @parameter0: int;

        r0 = virtualinvoke r0.<org.jsoup.helper.HttpConnection$Request: org.jsoup.helper.HttpConnection$Request timeout(int)>($i0);

        return r0;
    }
    public org.jsoup.helper.HttpConnection$Request timeout(int)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "Timeout milliseconds must be 0 (infinite) or greater");

        r0.<org.jsoup.helper.HttpConnection$Request: int timeoutMilliseconds> = $i0;

        return r0;

     label2:
        $z0 = 0;

        goto label1;
    }
    public volatile java.net.URL url()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        java.net.URL $r1;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $r1 = specialinvoke r0.<org.jsoup.helper.HttpConnection$Base: java.net.URL url()>();

        return $r1;
    }
    public void validateTLSCertificates(boolean)
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean $z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        $z0 := @parameter0: boolean;

        r0.<org.jsoup.helper.HttpConnection$Request: boolean validateTSLCertificates> = $z0;

        return;
    }
    public boolean validateTLSCertificates()
    {
        org.jsoup.helper.HttpConnection$Request r0;
        boolean z0;

        r0 := @this: org.jsoup.helper.HttpConnection$Request;

        z0 = r0.<org.jsoup.helper.HttpConnection$Request: boolean validateTSLCertificates>;

        return z0;
    }
