org.jsoup.helper.DataUtil extends java.lang.Object
static final int boundaryLength
private static final int bufferSize
private static final java.util.regex.Pattern charsetPattern
static final java.lang.String defaultCharset
private static final char[] mimeBoundaryChars
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        java.lang.String $r1;
        char[] $r2;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)\\bcharset=\\s*(?:\"|\')?([^\\s,;\"\']*)");

        <org.jsoup.helper.DataUtil: java.util.regex.Pattern charsetPattern> = $r0;

        $r1 = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        <org.jsoup.helper.DataUtil: char[] mimeBoundaryChars> = $r2;

        return;
    }
    private void <init>()
    {
        org.jsoup.helper.DataUtil r0;

        r0 := @this: org.jsoup.helper.DataUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void crossStreams(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.OutputStream $r1;
        byte[] r2;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.io.OutputStream;

        r2 = newarray (byte)[60000];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r2);

        if $i0 == -1 goto label2;

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0);

        goto label1;

     label2:
        return;
    }
    private static java.lang.String detectCharsetFromBom(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer $r0;
        byte[] r1;
        int $i0, $i1;
        java.lang.String $r2;
        byte $b2;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r2 := @parameter1: java.lang.String;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer mark()>();

        r1 = newarray (byte)[4];

        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int remaining()>();

        $i1 = lengthof r1;

        if $i0 < $i1 goto label1;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

     label1:
        $b2 = r1[0];

        if $b2 != 0 goto label2;

        $b2 = r1[1];

        if $b2 != 0 goto label2;

        $b2 = r1[2];

        if $b2 != -2 goto label2;

        $b2 = r1[3];

        if $b2 == -1 goto label3;

     label2:
        $b2 = r1[0];

        if $b2 != -1 goto label4;

        $b2 = r1[1];

        if $b2 != -2 goto label4;

        $b2 = r1[2];

        if $b2 != 0 goto label4;

        $b2 = r1[3];

        if $b2 != 0 goto label4;

     label3:
        return "UTF-32";

     label4:
        $b2 = r1[0];

        if $b2 != -2 goto label5;

        $b2 = r1[1];

        if $b2 == -1 goto label6;

     label5:
        $b2 = r1[0];

        if $b2 != -1 goto label7;

        $b2 = r1[1];

        if $b2 != -2 goto label7;

     label6:
        return "UTF-16";

     label7:
        $b2 = r1[0];

        if $b2 != -17 goto label8;

        $b2 = r1[1];

        if $b2 != -69 goto label8;

        $b2 = r1[2];

        if $b2 != -65 goto label8;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(3);

        return "UTF-8";

     label8:
        return $r2;
    }
    static java.nio.ByteBuffer emptyByteBuffer()
    {
        java.nio.ByteBuffer $r0;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0);

        return $r0;
    }
    static java.lang.String getCharsetFromContentType(java.lang.String)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = <org.jsoup.helper.DataUtil: java.util.regex.Pattern charsetPattern>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        $r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("charset=", "");

        $r0 = staticinvoke <org.jsoup.helper.DataUtil: java.lang.String validateCharset(java.lang.String)>($r0);

        return $r0;

     label2:
        return null;
    }
    public static org.jsoup.nodes.Document load(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.File $r0;
        java.lang.String $r1, $r2;
        java.nio.ByteBuffer $r3;
        org.jsoup.parser.Parser $r4;
        org.jsoup.nodes.Document $r5;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readFileToByteBuffer(java.io.File)>($r0);

        $r4 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>();

        $r5 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>($r3, $r1, $r2, $r4);

        return $r5;
    }
    public static org.jsoup.nodes.Document load(java.io.InputStream, java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1, $r2;
        java.nio.ByteBuffer $r3;
        org.jsoup.parser.Parser $r4;
        org.jsoup.nodes.Document $r5;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream)>($r0);

        $r4 = staticinvoke <org.jsoup.parser.Parser: org.jsoup.parser.Parser htmlParser()>();

        $r5 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>($r3, $r1, $r2, $r4);

        return $r5;
    }
    public static org.jsoup.nodes.Document load(java.io.InputStream, java.lang.String, java.lang.String, org.jsoup.parser.Parser) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1, $r2;
        org.jsoup.parser.Parser $r3;
        java.nio.ByteBuffer $r4;
        org.jsoup.nodes.Document $r5;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: org.jsoup.parser.Parser;

        $r4 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream)>($r0);

        $r5 = staticinvoke <org.jsoup.helper.DataUtil: org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer,java.lang.String,java.lang.String,org.jsoup.parser.Parser)>($r4, $r1, $r2, $r3);

        return $r5;
    }
    static java.lang.String mimeBoundary()
    {
        java.lang.StringBuilder r0;
        java.util.Random r1;
        int i0, $i1;
        char[] $r2, $r3;
        char $c2;
        java.lang.String $r4;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>(int)>(32);

        r1 = new java.util.Random;

        specialinvoke r1.<java.util.Random: void <init>()>();

        i0 = 0;

     label1:
        if i0 >= 32 goto label2;

        $r2 = <org.jsoup.helper.DataUtil: char[] mimeBoundaryChars>;

        $r3 = <org.jsoup.helper.DataUtil: char[] mimeBoundaryChars>;

        $i1 = lengthof $r3;

        $i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i1);

        $c2 = $r2[$i1];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
    static org.jsoup.nodes.Document parseByteData(java.nio.ByteBuffer, java.lang.String, java.lang.String, org.jsoup.parser.Parser)
    {
        java.nio.ByteBuffer $r0;
        java.lang.String $r1, $r3, $r5, $r8, $r14;
        org.jsoup.parser.Parser $r2;
        org.jsoup.nodes.Document r4, $r9;
        java.nio.charset.Charset $r6;
        java.nio.CharBuffer $r7;
        org.jsoup.select.Elements $r10;
        org.jsoup.nodes.Element $r11;
        boolean $z0;
        int $i0;
        org.jsoup.nodes.Node $r12;
        org.jsoup.nodes.XmlDeclaration r13;
        org.jsoup.nodes.Document$OutputSettings $r15;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r3 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: org.jsoup.parser.Parser;

        r4 = null;

        $r5 = staticinvoke <org.jsoup.helper.DataUtil: java.lang.String detectCharsetFromBom(java.nio.ByteBuffer,java.lang.String)>($r0, $r3);

        $r3 = $r5;

        if $r5 != null goto label5;

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r0);

        $r8 = virtualinvoke $r7.<java.nio.CharBuffer: java.lang.String toString()>();

        $r5 = $r8;

        $r9 = virtualinvoke $r2.<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>($r8, $r1);

        r4 = $r9;

        $r10 = virtualinvoke $r9.<org.jsoup.nodes.Document: org.jsoup.select.Elements select(java.lang.String)>("meta[http-equiv=content-type], meta[charset]");

        $r11 = virtualinvoke $r10.<org.jsoup.select.Elements: org.jsoup.nodes.Element first()>();

        $r8 = null;

        if $r11 == null goto label2;

        $z0 = virtualinvoke $r11.<org.jsoup.nodes.Element: boolean hasAttr(java.lang.String)>("http-equiv");

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke $r11.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("content");

        $r8 = staticinvoke <org.jsoup.helper.DataUtil: java.lang.String getCharsetFromContentType(java.lang.String)>($r8);

     label1:
        if $r8 != null goto label2;

        $z0 = virtualinvoke $r11.<org.jsoup.nodes.Element: boolean hasAttr(java.lang.String)>("charset");

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke $r11.<org.jsoup.nodes.Element: java.lang.String attr(java.lang.String)>("charset");

     label2:
        if $r8 != null goto label3;

        $i0 = virtualinvoke $r9.<org.jsoup.nodes.Document: int childNodeSize()>();

        if $i0 <= 0 goto label3;

        $r12 = virtualinvoke $r9.<org.jsoup.nodes.Document: org.jsoup.nodes.Node childNode(int)>(0);

        $z0 = $r12 instanceof org.jsoup.nodes.XmlDeclaration;

        if $z0 == 0 goto label3;

        $r12 = virtualinvoke $r9.<org.jsoup.nodes.Document: org.jsoup.nodes.Node childNode(int)>(0);

        r13 = (org.jsoup.nodes.XmlDeclaration) $r12;

        $r14 = virtualinvoke r13.<org.jsoup.nodes.XmlDeclaration: java.lang.String name()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r13.<org.jsoup.nodes.XmlDeclaration: java.lang.String attr(java.lang.String)>("encoding");

     label3:
        $r8 = staticinvoke <org.jsoup.helper.DataUtil: java.lang.String validateCharset(java.lang.String)>($r8);

        if $r8 == null goto label4;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("UTF-8");

        if $z0 != 0 goto label4;

        $r3 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\"\']", "");

        $r3 = $r5;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r0);

        $r5 = virtualinvoke $r7.<java.nio.CharBuffer: java.lang.String toString()>();

        r4 = null;

     label4:
        if r4 != null goto label6;

        r4 = virtualinvoke $r2.<org.jsoup.parser.Parser: org.jsoup.nodes.Document parseInput(java.lang.String,java.lang.String)>($r5, $r1);

        $r15 = virtualinvoke r4.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        virtualinvoke $r15.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>($r3);

        return r4;

     label5:
        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r5, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");

        $r6 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r0);

        $r5 = virtualinvoke $r7.<java.nio.CharBuffer: java.lang.String toString()>();

        goto label4;

     label6:
        return r4;
    }
    static java.nio.ByteBuffer readFileToByteBuffer(java.io.File) throws java.io.IOException
    {
        java.io.File $r0;
        byte[] r1;
        java.io.RandomAccessFile r2, r3;
        long $l0;
        int $i1;
        java.nio.ByteBuffer $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: java.io.File;

        r3 = null;

     label01:
        r2 = new java.io.RandomAccessFile;

        specialinvoke r2.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r0, "r");

     label02:
        $l0 = virtualinvoke r2.<java.io.RandomAccessFile: long length()>();

     label03:
        $i1 = (int) $l0;

     label04:
        r1 = newarray (byte)[$i1];

        virtualinvoke r2.<java.io.RandomAccessFile: void readFully(byte[])>(r1);

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

     label05:
        if r2 == null goto label10;

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

        return $r4;

     label06:
        $r5 := @caughtexception;

     label07:
        if r3 == null goto label08;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label08:
        throw $r5;

     label09:
        $r5 := @caughtexception;

        r3 = r2;

        goto label07;

     label10:
        return $r4;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
    }
    static java.nio.ByteBuffer readToByteBuffer(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.nio.ByteBuffer $r1;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>($r0, 0);

        return $r1;
    }
    public static java.nio.ByteBuffer readToByteBuffer(java.io.InputStream, int) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1, $i2;
        byte[] r1;
        java.io.ByteArrayOutputStream r2;
        boolean $z0, $z1;
        java.nio.ByteBuffer $r3;

        $r0 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $i1 = 60000;

        if $i0 < 0 goto label07;

        $z0 = 1;

     label01:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean,java.lang.String)>($z0, "maxSize must be 0 (unlimited) or larger");

        if $i0 <= 0 goto label08;

        $z0 = 1;

     label02:
        if $z0 == 0 goto label09;

        if $i0 >= 60000 goto label09;

        $i2 = $i0;

     label03:
        r1 = newarray (byte)[$i2];

        r2 = new java.io.ByteArrayOutputStream;

        if $z0 == 0 goto label04;

        $i1 = $i0;

     label04:
        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>(int)>($i1);

     label05:
        $z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z1 != 0 goto label06;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>(r1);

        if $i1 != -1 goto label10;

     label06:
        r1 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        return $r3;

     label07:
        $z0 = 0;

        goto label01;

     label08:
        $z0 = 0;

        goto label02;

     label09:
        $i2 = 60000;

        goto label03;

     label10:
        if $z0 == 0 goto label12;

        if $i1 <= $i0 goto label11;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label06;

     label11:
        $i0 = $i0 - $i1;

     label12:
        virtualinvoke r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, 0, $i1);

        goto label05;
    }
    private static java.lang.String validateCharset(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0;
        java.util.Locale $r1;
        java.nio.charset.IllegalCharsetNameException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[\"\']", "");

     label3:
        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r0);

     label4:
        if $z0 != 0 goto label9;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

     label5:
        r0 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>(r0);

     label6:
        if $z0 != 0 goto label9;

     label7:
        return null;

     label8:
        $r2 := @caughtexception;

        goto label7;

     label9:
        return r0;

        catch java.nio.charset.IllegalCharsetNameException from label3 to label4 with label8;
        catch java.nio.charset.IllegalCharsetNameException from label5 to label6 with label8;
    }
