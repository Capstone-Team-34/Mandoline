org.jsoup.nodes.Entities extends java.lang.Object
private static final char[] codeDelims
static final int codepointRadix
private static final int empty
private static final java.lang.String emptyName
private static final java.util.HashMap multipoints
    static void <clinit>()
    {
        java.util.HashMap $r0;
        char[] $r1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.jsoup.nodes.Entities: java.util.HashMap multipoints> = $r0;

        $r1 = newarray (char)[2];

        $r1[0] = 44;

        $r1[1] = 59;

        <org.jsoup.nodes.Entities: char[] codeDelims> = $r1;

        return;
    }
    private void <init>()
    {
        org.jsoup.nodes.Entities r0;

        r0 := @this: org.jsoup.nodes.Entities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
    static void access$000(org.jsoup.nodes.Entities$EscapeMode, java.lang.String, int)
    {
        org.jsoup.nodes.Entities$EscapeMode $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @parameter0: org.jsoup.nodes.Entities$EscapeMode;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        staticinvoke <org.jsoup.nodes.Entities: void load(org.jsoup.nodes.Entities$EscapeMode,java.lang.String,int)>($r0, $r1, $i0);

        return;
    }
    private static void appendEncoded(java.lang.Appendable, org.jsoup.nodes.Entities$EscapeMode, int) throws java.io.IOException
    {
        java.lang.Appendable $r0;
        org.jsoup.nodes.Entities$EscapeMode $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.Appendable;

        $r1 := @parameter1: org.jsoup.nodes.Entities$EscapeMode;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke $r1.<org.jsoup.nodes.Entities$EscapeMode: java.lang.String nameForCodepoint(int)>($i0);

        if $r2 == "" goto label1;

        $r0 = interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(38);

        $r0 = interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r2);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(59);

        return;

     label1:
        $r0 = interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&#x");

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r0 = interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r2);

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(59);

        return;
    }
    private static boolean canEncode(org.jsoup.nodes.Entities$CoreCharset, char, java.nio.charset.CharsetEncoder)
    {
        org.jsoup.nodes.Entities$CoreCharset $r0;
        char $c0;
        java.nio.charset.CharsetEncoder $r1;
        boolean $z0;
        int[] $r2;
        int $i1;

        $r0 := @parameter0: org.jsoup.nodes.Entities$CoreCharset;

        $c0 := @parameter1: char;

        $r1 := @parameter2: java.nio.charset.CharsetEncoder;

        $z0 = 1;

        $r2 = <org.jsoup.nodes.Entities$1: int[] $SwitchMap$org$jsoup$nodes$Entities$CoreCharset>;

        $i1 = virtualinvoke $r0.<org.jsoup.nodes.Entities$CoreCharset: int ordinal()>();

        $i1 = $r2[$i1];

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label2;
            default: goto label1;
        };

     label1:
        $z0 = virtualinvoke $r1.<java.nio.charset.CharsetEncoder: boolean canEncode(char)>($c0);

     label2:
        return $z0;

     label3:
        if $c0 < 128 goto label4;

        return 0;

     label4:
        return 1;
    }
    public static int codepointsForName(java.lang.String, int[])
    {
        java.lang.String $r0, r4;
        int[] $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        int $i0;
        org.jsoup.nodes.Entities$EscapeMode $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: int[];

        $r2 = <org.jsoup.nodes.Entities: java.util.HashMap multipoints>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<java.lang.String: int codePointAt(int)>(0);

        $r1[0] = $i0;

        $i0 = virtualinvoke r4.<java.lang.String: int codePointAt(int)>(1);

        $r1[1] = $i0;

        return 2;

     label1:
        $r5 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode extended>;

        $i0 = virtualinvoke $r5.<org.jsoup.nodes.Entities$EscapeMode: int codepointForName(java.lang.String)>($r0);

        if $i0 == -1 goto label2;

        $r1[0] = $i0;

        return 1;

     label2:
        return 0;
    }
    static java.lang.String escape(java.lang.String, org.jsoup.nodes.Document$OutputSettings)
    {
        java.lang.String $r0;
        org.jsoup.nodes.Document$OutputSettings $r1;
        java.lang.StringBuilder r2;
        java.io.IOException r3;
        int $i0;
        org.jsoup.SerializationException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.jsoup.nodes.Document$OutputSettings;

        r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $i0 * 2;

        specialinvoke r2.<java.lang.StringBuilder: void <init>(int)>($i0);

     label1:
        staticinvoke <org.jsoup.nodes.Entities: void escape(java.lang.Appendable,java.lang.String,org.jsoup.nodes.Document$OutputSettings,boolean,boolean,boolean)>(r2, $r0, $r1, 0, 0, 0);

     label2:
        $r0 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label3:
        r3 := @caughtexception;

        $r4 = new org.jsoup.SerializationException;

        specialinvoke $r4.<org.jsoup.SerializationException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }
    static void escape(java.lang.Appendable, java.lang.String, org.jsoup.nodes.Document$OutputSettings, boolean, boolean, boolean) throws java.io.IOException
    {
        java.lang.Appendable $r0;
        java.lang.String $r1, $r6;
        org.jsoup.nodes.Document$OutputSettings $r2;
        boolean $z0, $z1, $z2, z3, z4, $z5;
        org.jsoup.nodes.Entities$EscapeMode $r3, $r8;
        java.nio.charset.CharsetEncoder $r4;
        java.nio.charset.Charset $r5;
        org.jsoup.nodes.Entities$CoreCharset $r7;
        int $i0, i1, $i2;
        char c3;
        char[] $r9;

        $r0 := @parameter0: java.lang.Appendable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $z2 := @parameter5: boolean;

        z3 = 0;

        z4 = 0;

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode()>();

        $r4 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder encoder()>();

        $r5 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>();

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        $r7 = staticinvoke <org.jsoup.nodes.Entities$CoreCharset: org.jsoup.nodes.Entities$CoreCharset access$100(java.lang.String)>($r6);

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = 0;

     label01:
        if i1 >= $i0 goto label21;

        $i2 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>(i1);

        if $z1 == 0 goto label06;

        $z5 = staticinvoke <org.jsoup.helper.StringUtil: boolean isWhitespace(int)>($i2);

        if $z5 == 0 goto label05;

        if $z2 == 0 goto label02;

        if z4 == 0 goto label03;

     label02:
        if z3 == 0 goto label04;

     label03:
        $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i2);

        i1 = i1 + $i2;

        goto label01;

     label04:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(32);

        z3 = 1;

        goto label03;

     label05:
        z3 = 0;

        z4 = 1;

     label06:
        if $i2 >= 65536 goto label19;

        c3 = (char) $i2;

        lookupswitch(c3)
        {
            case 34: goto label16;
            case 38: goto label08;
            case 60: goto label11;
            case 62: goto label14;
            case 160: goto label09;
            default: goto label07;
        };

     label07:
        $z5 = staticinvoke <org.jsoup.nodes.Entities: boolean canEncode(org.jsoup.nodes.Entities$CoreCharset,char,java.nio.charset.CharsetEncoder)>($r7, c3, $r4);

        if $z5 == 0 goto label18;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(c3);

        goto label03;

     label08:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&amp;");

        goto label03;

     label09:
        $r8 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode xhtml>;

        if $r3 == $r8 goto label10;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&nbsp;");

        goto label03;

     label10:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&#xa0;");

        goto label03;

     label11:
        if $z0 == 0 goto label12;

        $r8 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode xhtml>;

        if $r3 != $r8 goto label13;

     label12:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&lt;");

        goto label03;

     label13:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(c3);

        goto label03;

     label14:
        if $z0 != 0 goto label15;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&gt;");

        goto label03;

     label15:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(c3);

        goto label03;

     label16:
        if $z0 == 0 goto label17;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("&quot;");

        goto label03;

     label17:
        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(char)>(c3);

        goto label03;

     label18:
        staticinvoke <org.jsoup.nodes.Entities: void appendEncoded(java.lang.Appendable,org.jsoup.nodes.Entities$EscapeMode,int)>($r0, $r3, $i2);

        goto label03;

     label19:
        $r6 = new java.lang.String;

        $r9 = staticinvoke <java.lang.Character: char[] toChars(int)>($i2);

        specialinvoke $r6.<java.lang.String: void <init>(char[])>($r9);

        $z5 = virtualinvoke $r4.<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>($r6);

        if $z5 == 0 goto label20;

        interfaceinvoke $r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r6);

        goto label03;

     label20:
        staticinvoke <org.jsoup.nodes.Entities: void appendEncoded(java.lang.Appendable,org.jsoup.nodes.Entities$EscapeMode,int)>($r0, $r3, $i2);

        goto label03;

     label21:
        return;
    }
    public static java.lang.String getByName(java.lang.String)
    {
        java.lang.String $r0, r3;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        org.jsoup.nodes.Entities$EscapeMode $r4;
        int $i0;
        int[] $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities: java.util.HashMap multipoints>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0);

        r3 = (java.lang.String) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode extended>;

        $i0 = virtualinvoke $r4.<org.jsoup.nodes.Entities$EscapeMode: int codepointForName(java.lang.String)>($r0);

        if $i0 == -1 goto label2;

        $r0 = new java.lang.String;

        $r5 = newarray (int)[1];

        $r5[0] = $i0;

        specialinvoke $r0.<java.lang.String: void <init>(int[],int,int)>($r5, 0, 1);

        return $r0;

     label2:
        return "";
    }
    public static java.lang.Character getCharacterByName(java.lang.String)
    {
        java.lang.String $r0;
        org.jsoup.nodes.Entities$EscapeMode $r1;
        int $i0;
        char $c1;
        java.lang.Character $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode extended>;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Entities$EscapeMode: int codepointForName(java.lang.String)>($r0);

        $c1 = (char) $i0;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        return $r2;
    }
    public static boolean isBaseNamedEntity(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        org.jsoup.nodes.Entities$EscapeMode $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode base>;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Entities$EscapeMode: int codepointForName(java.lang.String)>($r0);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }
    public static boolean isNamedEntity(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        org.jsoup.nodes.Entities$EscapeMode $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode extended>;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Entities$EscapeMode: int codepointForName(java.lang.String)>($r0);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }
    private static void load(org.jsoup.nodes.Entities$EscapeMode, java.lang.String, int)
    {
        org.jsoup.nodes.Entities$EscapeMode $r0;
        java.lang.String $r1, $r13, $r15, r16;
        int $i0, $i1, $i3, $i4;
        java.io.IOException r2;
        org.jsoup.parser.CharacterReader r3;
        java.lang.String[] $r4;
        int[] $r5;
        java.lang.Class $r6;
        java.io.InputStream $r7;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9;
        java.nio.ByteBuffer $r10;
        java.nio.charset.Charset $r11;
        java.nio.CharBuffer $r12;
        boolean $z0;
        char[] $r14;
        char $c2;
        java.util.HashMap $r17;

        $r0 := @parameter0: org.jsoup.nodes.Entities$EscapeMode;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r4 = newarray (java.lang.String)[$i0];

        staticinvoke <org.jsoup.nodes.Entities$EscapeMode: java.lang.String[] access$202(org.jsoup.nodes.Entities$EscapeMode,java.lang.String[])>($r0, $r4);

        $r5 = newarray (int)[$i0];

        staticinvoke <org.jsoup.nodes.Entities$EscapeMode: int[] access$302(org.jsoup.nodes.Entities$EscapeMode,int[])>($r0, $r5);

        $r5 = newarray (int)[$i0];

        staticinvoke <org.jsoup.nodes.Entities$EscapeMode: int[] access$402(org.jsoup.nodes.Entities$EscapeMode,int[])>($r0, $r5);

        $r4 = newarray (java.lang.String)[$i0];

        staticinvoke <org.jsoup.nodes.Entities$EscapeMode: java.lang.String[] access$502(org.jsoup.nodes.Entities$EscapeMode,java.lang.String[])>($r0, $r4);

        $r6 = class "Lorg/jsoup/nodes/Entities;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r1);

        if $r7 != null goto label01;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read resource ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Make sure you copy resources for ");

        $r6 = class "Lorg/jsoup/nodes/Entities;";

        $r1 = virtualinvoke $r6.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label01:
        $i0 = 0;

     label02:
        $r10 = staticinvoke <org.jsoup.helper.DataUtil: java.nio.ByteBuffer readToByteBuffer(java.io.InputStream,int)>($r7, 0);

        $r11 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("ascii");

        $r12 = virtualinvoke $r11.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r10);

        $r13 = virtualinvoke $r12.<java.nio.CharBuffer: java.lang.String toString()>();

     label03:
        r3 = new org.jsoup.parser.CharacterReader;

     label04:
        specialinvoke r3.<org.jsoup.parser.CharacterReader: void <init>(java.lang.String)>($r13);

     label05:
        $z0 = virtualinvoke r3.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

     label06:
        if $z0 != 0 goto label35;

     label07:
        $r13 = virtualinvoke r3.<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>(61);

        virtualinvoke r3.<org.jsoup.parser.CharacterReader: void advance()>();

     label08:
        $r14 = <org.jsoup.nodes.Entities: char[] codeDelims>;

     label09:
        $r15 = virtualinvoke r3.<org.jsoup.parser.CharacterReader: java.lang.String consumeToAny(char[])>($r14);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r15, 36);

        $c2 = virtualinvoke r3.<org.jsoup.parser.CharacterReader: char current()>();

        virtualinvoke r3.<org.jsoup.parser.CharacterReader: void advance()>();

     label10:
        if $c2 != 44 goto label33;

     label11:
        $r15 = virtualinvoke r3.<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>(59);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r15, 36);

     label12:
        virtualinvoke r3.<org.jsoup.parser.CharacterReader: void advance()>();

     label13:
        $r15 = virtualinvoke r3.<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>(10);

     label14:
        r16 = $r15;

     label15:
        $i4 = virtualinvoke $r15.<java.lang.String: int length()>();

     label16:
        $i4 = $i4 + -1;

     label17:
        $c2 = virtualinvoke $r15.<java.lang.String: char charAt(int)>($i4);

     label18:
        if $c2 != 13 goto label23;

     label19:
        $i4 = virtualinvoke $r15.<java.lang.String: int length()>();

     label20:
        $i4 = $i4 + -1;

     label21:
        $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label22:
        r16 = $r15;

     label23:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r16, 36);

        virtualinvoke r3.<org.jsoup.parser.CharacterReader: void advance()>();

        $r4 = staticinvoke <org.jsoup.nodes.Entities$EscapeMode: java.lang.String[] access$200(org.jsoup.nodes.Entities$EscapeMode)>($r0);

     label24:
        $r4[$i0] = $r13;

     label25:
        $r5 = staticinvoke <org.jsoup.nodes.Entities$EscapeMode: int[] access$300(org.jsoup.nodes.Entities$EscapeMode)>($r0);

     label26:
        $r5[$i0] = $i1;

     label27:
        $r5 = staticinvoke <org.jsoup.nodes.Entities$EscapeMode: int[] access$400(org.jsoup.nodes.Entities$EscapeMode)>($r0);

     label28:
        $r5[$i4] = $i1;

     label29:
        $r4 = staticinvoke <org.jsoup.nodes.Entities$EscapeMode: java.lang.String[] access$500(org.jsoup.nodes.Entities$EscapeMode)>($r0);

     label30:
        $r4[$i4] = $r13;

        if $i3 == -1 goto label32;

        $r17 = <org.jsoup.nodes.Entities: java.util.HashMap multipoints>;

        $r15 = new java.lang.String;

        $r5 = newarray (int)[2];

        $r5[0] = $i1;

        $r5[1] = $i3;

     label31:
        specialinvoke $r15.<java.lang.String: void <init>(int[],int,int)>($r5, 0, 2);

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15);

     label32:
        $i0 = $i0 + 1;

        goto label05;

     label33:
        $i3 = -1;

        goto label13;

     label34:
        r2 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading resource ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label35:
        return;

        catch java.io.IOException from label02 to label03 with label34;
        catch java.io.IOException from label04 to label06 with label34;
        catch java.io.IOException from label07 to label08 with label34;
        catch java.io.IOException from label09 to label10 with label34;
        catch java.io.IOException from label11 to label12 with label34;
        catch java.io.IOException from label12 to label14 with label34;
        catch java.io.IOException from label15 to label16 with label34;
        catch java.io.IOException from label17 to label18 with label34;
        catch java.io.IOException from label19 to label20 with label34;
        catch java.io.IOException from label21 to label22 with label34;
        catch java.io.IOException from label23 to label24 with label34;
        catch java.io.IOException from label25 to label26 with label34;
        catch java.io.IOException from label27 to label28 with label34;
        catch java.io.IOException from label29 to label30 with label34;
        catch java.io.IOException from label31 to label32 with label34;
    }
    static java.lang.String unescape(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String,boolean)>($r0, 0);

        return $r0;
    }
    static java.lang.String unescape(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 = staticinvoke <org.jsoup.parser.Parser: java.lang.String unescapeEntities(java.lang.String,boolean)>($r0, $z0);

        return $r0;
    }
