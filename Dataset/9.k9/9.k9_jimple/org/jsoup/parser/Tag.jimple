org.jsoup.parser.Tag extends java.lang.Object
private static final java.lang.String[] blockTags
private static final java.lang.String[] emptyTags
private static final java.lang.String[] formListedTags
private static final java.lang.String[] formSubmitTags
private static final java.lang.String[] formatAsInlineTags
private static final java.lang.String[] inlineTags
private static final java.lang.String[] preserveWhitespaceTags
private static final java.util.Map tags
private boolean canContainBlock
private boolean canContainInline
private boolean empty
private boolean formList
private boolean formSubmit
private boolean formatAsBlock
private boolean isBlock
private boolean preserveWhitespace
private boolean selfClosing
private java.lang.String tagName
    static void <clinit>()
    {
        int $i0, $i1, $i2;
        java.util.HashMap $r0;
        java.lang.String[] $r1;
        java.lang.String r2;
        org.jsoup.parser.Tag r3;
        java.util.Map $r4;
        java.lang.Object $r5;

        $i0 = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.jsoup.parser.Tag: java.util.Map tags> = $r0;

        $r1 = newarray (java.lang.String)[64];

        $r1[0] = "html";

        $r1[1] = "head";

        $r1[2] = "body";

        $r1[3] = "frameset";

        $r1[4] = "script";

        $r1[5] = "noscript";

        $r1[6] = "style";

        $r1[7] = "meta";

        $r1[8] = "link";

        $r1[9] = "title";

        $r1[10] = "frame";

        $r1[11] = "noframes";

        $r1[12] = "section";

        $r1[13] = "nav";

        $r1[14] = "aside";

        $r1[15] = "hgroup";

        $r1[16] = "header";

        $r1[17] = "footer";

        $r1[18] = "p";

        $r1[19] = "h1";

        $r1[20] = "h2";

        $r1[21] = "h3";

        $r1[22] = "h4";

        $r1[23] = "h5";

        $r1[24] = "h6";

        $r1[25] = "ul";

        $r1[26] = "ol";

        $r1[27] = "pre";

        $r1[28] = "div";

        $r1[29] = "blockquote";

        $r1[30] = "hr";

        $r1[31] = "address";

        $r1[32] = "figure";

        $r1[33] = "figcaption";

        $r1[34] = "form";

        $r1[35] = "fieldset";

        $r1[36] = "ins";

        $r1[37] = "del";

        $r1[38] = "s";

        $r1[39] = "dl";

        $r1[40] = "dt";

        $r1[41] = "dd";

        $r1[42] = "li";

        $r1[43] = "table";

        $r1[44] = "caption";

        $r1[45] = "thead";

        $r1[46] = "tfoot";

        $r1[47] = "tbody";

        $r1[48] = "colgroup";

        $r1[49] = "col";

        $r1[50] = "tr";

        $r1[51] = "th";

        $r1[52] = "td";

        $r1[53] = "video";

        $r1[54] = "audio";

        $r1[55] = "canvas";

        $r1[56] = "details";

        $r1[57] = "menu";

        $r1[58] = "plaintext";

        $r1[59] = "template";

        $r1[60] = "article";

        $r1[61] = "main";

        $r1[62] = "svg";

        $r1[63] = "math";

        <org.jsoup.parser.Tag: java.lang.String[] blockTags> = $r1;

        $r1 = newarray (java.lang.String)[65];

        $r1[0] = "object";

        $r1[1] = "base";

        $r1[2] = "font";

        $r1[3] = "tt";

        $r1[4] = "i";

        $r1[5] = "b";

        $r1[6] = "u";

        $r1[7] = "big";

        $r1[8] = "small";

        $r1[9] = "em";

        $r1[10] = "strong";

        $r1[11] = "dfn";

        $r1[12] = "code";

        $r1[13] = "samp";

        $r1[14] = "kbd";

        $r1[15] = "var";

        $r1[16] = "cite";

        $r1[17] = "abbr";

        $r1[18] = "time";

        $r1[19] = "acronym";

        $r1[20] = "mark";

        $r1[21] = "ruby";

        $r1[22] = "rt";

        $r1[23] = "rp";

        $r1[24] = "a";

        $r1[25] = "img";

        $r1[26] = "br";

        $r1[27] = "wbr";

        $r1[28] = "map";

        $r1[29] = "q";

        $r1[30] = "sub";

        $r1[31] = "sup";

        $r1[32] = "bdo";

        $r1[33] = "iframe";

        $r1[34] = "embed";

        $r1[35] = "span";

        $r1[36] = "input";

        $r1[37] = "select";

        $r1[38] = "textarea";

        $r1[39] = "label";

        $r1[40] = "button";

        $r1[41] = "optgroup";

        $r1[42] = "option";

        $r1[43] = "legend";

        $r1[44] = "datalist";

        $r1[45] = "keygen";

        $r1[46] = "output";

        $r1[47] = "progress";

        $r1[48] = "meter";

        $r1[49] = "area";

        $r1[50] = "param";

        $r1[51] = "source";

        $r1[52] = "track";

        $r1[53] = "summary";

        $r1[54] = "command";

        $r1[55] = "device";

        $r1[56] = "area";

        $r1[57] = "basefont";

        $r1[58] = "bgsound";

        $r1[59] = "menuitem";

        $r1[60] = "param";

        $r1[61] = "source";

        $r1[62] = "track";

        $r1[63] = "data";

        $r1[64] = "bdi";

        <org.jsoup.parser.Tag: java.lang.String[] inlineTags> = $r1;

        $r1 = newarray (java.lang.String)[21];

        $r1[0] = "meta";

        $r1[1] = "link";

        $r1[2] = "base";

        $r1[3] = "frame";

        $r1[4] = "img";

        $r1[5] = "br";

        $r1[6] = "wbr";

        $r1[7] = "embed";

        $r1[8] = "hr";

        $r1[9] = "input";

        $r1[10] = "keygen";

        $r1[11] = "col";

        $r1[12] = "command";

        $r1[13] = "device";

        $r1[14] = "area";

        $r1[15] = "basefont";

        $r1[16] = "bgsound";

        $r1[17] = "menuitem";

        $r1[18] = "param";

        $r1[19] = "source";

        $r1[20] = "track";

        <org.jsoup.parser.Tag: java.lang.String[] emptyTags> = $r1;

        $r1 = newarray (java.lang.String)[19];

        $r1[0] = "title";

        $r1[1] = "a";

        $r1[2] = "p";

        $r1[3] = "h1";

        $r1[4] = "h2";

        $r1[5] = "h3";

        $r1[6] = "h4";

        $r1[7] = "h5";

        $r1[8] = "h6";

        $r1[9] = "pre";

        $r1[10] = "address";

        $r1[11] = "li";

        $r1[12] = "th";

        $r1[13] = "td";

        $r1[14] = "script";

        $r1[15] = "style";

        $r1[16] = "ins";

        $r1[17] = "del";

        $r1[18] = "s";

        <org.jsoup.parser.Tag: java.lang.String[] formatAsInlineTags> = $r1;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "pre";

        $r1[1] = "plaintext";

        $r1[2] = "title";

        $r1[3] = "textarea";

        <org.jsoup.parser.Tag: java.lang.String[] preserveWhitespaceTags> = $r1;

        $r1 = newarray (java.lang.String)[8];

        $r1[0] = "button";

        $r1[1] = "fieldset";

        $r1[2] = "input";

        $r1[3] = "keygen";

        $r1[4] = "object";

        $r1[5] = "output";

        $r1[6] = "select";

        $r1[7] = "textarea";

        <org.jsoup.parser.Tag: java.lang.String[] formListedTags> = $r1;

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "input";

        $r1[1] = "keygen";

        $r1[2] = "object";

        $r1[3] = "select";

        $r1[4] = "textarea";

        <org.jsoup.parser.Tag: java.lang.String[] formSubmitTags> = $r1;

        $r1 = <org.jsoup.parser.Tag: java.lang.String[] blockTags>;

        $i1 = lengthof $r1;

        $i2 = 0;

     label01:
        if $i2 >= $i1 goto label02;

        r2 = $r1[$i2];

        r3 = new org.jsoup.parser.Tag;

        specialinvoke r3.<org.jsoup.parser.Tag: void <init>(java.lang.String)>(r2);

        staticinvoke <org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>(r3);

        $i2 = $i2 + 1;

        goto label01;

     label02:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] inlineTags>;

        $i1 = lengthof $r1;

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label04;

        r2 = $r1[$i2];

        r3 = new org.jsoup.parser.Tag;

        specialinvoke r3.<org.jsoup.parser.Tag: void <init>(java.lang.String)>(r2);

        r3.<org.jsoup.parser.Tag: boolean isBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean canContainBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean formatAsBlock> = 0;

        staticinvoke <org.jsoup.parser.Tag: void register(org.jsoup.parser.Tag)>(r3);

        $i2 = $i2 + 1;

        goto label03;

     label04:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] emptyTags>;

        $i1 = lengthof $r1;

        $i2 = 0;

     label05:
        if $i2 >= $i1 goto label06;

        r2 = $r1[$i2];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean canContainBlock> = 0;

        r3.<org.jsoup.parser.Tag: boolean canContainInline> = 0;

        r3.<org.jsoup.parser.Tag: boolean empty> = 1;

        $i2 = $i2 + 1;

        goto label05;

     label06:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] formatAsInlineTags>;

        $i1 = lengthof $r1;

        $i2 = 0;

     label07:
        if $i2 >= $i1 goto label08;

        r2 = $r1[$i2];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean formatAsBlock> = 0;

        $i2 = $i2 + 1;

        goto label07;

     label08:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] preserveWhitespaceTags>;

        $i1 = lengthof $r1;

        $i2 = 0;

     label09:
        if $i2 >= $i1 goto label10;

        r2 = $r1[$i2];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean preserveWhitespace> = 1;

        $i2 = $i2 + 1;

        goto label09;

     label10:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] formListedTags>;

        $i1 = lengthof $r1;

        $i2 = 0;

     label11:
        if $i2 >= $i1 goto label12;

        r2 = $r1[$i2];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean formList> = 1;

        $i2 = $i2 + 1;

        goto label11;

     label12:
        $r1 = <org.jsoup.parser.Tag: java.lang.String[] formSubmitTags>;

        $i1 = lengthof $r1;

     label13:
        if $i0 >= $i1 goto label14;

        r2 = $r1[$i0];

        $r4 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (org.jsoup.parser.Tag) $r5;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>(r3);

        r3.<org.jsoup.parser.Tag: boolean formSubmit> = 1;

        $i0 = $i0 + 1;

        goto label13;

     label14:
        return;
    }
    private void <init>(java.lang.String)
    {
        org.jsoup.parser.Tag r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.Tag: boolean isBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean formatAsBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean canContainBlock> = 1;

        r0.<org.jsoup.parser.Tag: boolean canContainInline> = 1;

        r0.<org.jsoup.parser.Tag: boolean empty> = 0;

        r0.<org.jsoup.parser.Tag: boolean selfClosing> = 0;

        r0.<org.jsoup.parser.Tag: boolean preserveWhitespace> = 0;

        r0.<org.jsoup.parser.Tag: boolean formList> = 0;

        r0.<org.jsoup.parser.Tag: boolean formSubmit> = 0;

        r0.<org.jsoup.parser.Tag: java.lang.String tagName> = $r1;

        return;
    }
    public static boolean isKnownTag(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.Map $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }
    private static void register(org.jsoup.parser.Tag)
    {
        org.jsoup.parser.Tag $r0;
        java.util.Map $r1;
        java.lang.String $r2;

        $r0 := @parameter0: org.jsoup.parser.Tag;

        $r1 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r2 = $r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

        return;
    }
    public static org.jsoup.parser.Tag valueOf(java.lang.String)
    {
        java.lang.String $r0;
        org.jsoup.parser.Tag $r1;
        org.jsoup.parser.ParseSettings $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.jsoup.parser.ParseSettings: org.jsoup.parser.ParseSettings preserveCase>;

        $r1 = staticinvoke <org.jsoup.parser.Tag: org.jsoup.parser.Tag valueOf(java.lang.String,org.jsoup.parser.ParseSettings)>($r0, $r2);

        return $r1;
    }
    public static org.jsoup.parser.Tag valueOf(java.lang.String, org.jsoup.parser.ParseSettings)
    {
        org.jsoup.parser.ParseSettings $r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.jsoup.parser.Tag r4;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.jsoup.parser.ParseSettings;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.jsoup.parser.Tag) $r3;

        if r4 != null goto label1;

        $r1 = virtualinvoke $r0.<org.jsoup.parser.ParseSettings: java.lang.String normalizeTag(java.lang.String)>($r1);

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r1);

        $r2 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.jsoup.parser.Tag) $r3;

        if r4 != null goto label1;

        r4 = new org.jsoup.parser.Tag;

        specialinvoke r4.<org.jsoup.parser.Tag: void <init>(java.lang.String)>($r1);

        r4.<org.jsoup.parser.Tag: boolean isBlock> = 0;

        r4.<org.jsoup.parser.Tag: boolean canContainBlock> = 1;

     label1:
        return r4;
    }
    public boolean canContainBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        return z0;
    }
    public boolean equals(java.lang.Object)
    {
        org.jsoup.parser.Tag r0, r2;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.jsoup.parser.Tag;

        $r1 := @parameter0: java.lang.Object;

        $z1 = 1;

        if r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.jsoup.parser.Tag;

        if $z0 == 0 goto label4;

        r2 = (org.jsoup.parser.Tag) $r1;

        $r3 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $r4 = r2.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean canContainBlock>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean empty>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formList>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean formList>;

        if $z0 != $z2 goto label4;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formSubmit>;

        $z2 = r2.<org.jsoup.parser.Tag: boolean formSubmit>;

        if $z0 != $z2 goto label3;

     label2:
        return $z1;

     label3:
        $z1 = 0;

        goto label2;

     label4:
        return 0;
    }
    public boolean formatAsBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        return z0;
    }
    public java.lang.String getName()
    {
        org.jsoup.parser.Tag r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.parser.Tag;

        r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        return r1;
    }
    public int hashCode()
    {
        org.jsoup.parser.Tag r0;
        int $i0;
        byte $b1, $b2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $b1 = 1;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 == 0 goto label10;

        $b2 = 1;

     label01:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formatAsBlock>;

        if $z0 == 0 goto label11;

        $b2 = 1;

     label02:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainBlock>;

        if $z0 == 0 goto label12;

        $b2 = 1;

     label03:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z0 == 0 goto label13;

        $b2 = 1;

     label04:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        if $z0 == 0 goto label14;

        $b2 = 1;

     label05:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z0 == 0 goto label15;

        $b2 = 1;

     label06:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        if $z0 == 0 goto label16;

        $b2 = 1;

     label07:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formList>;

        if $z0 == 0 goto label17;

        $b2 = 1;

     label08:
        $i0 = $i0 + $b2;

        $i0 = $i0 * 31;

        $z0 = r0.<org.jsoup.parser.Tag: boolean formSubmit>;

        if $z0 == 0 goto label18;

     label09:
        $i0 = $i0 + $b1;

        return $i0;

     label10:
        $b2 = 0;

        goto label01;

     label11:
        $b2 = 0;

        goto label02;

     label12:
        $b2 = 0;

        goto label03;

     label13:
        $b2 = 0;

        goto label04;

     label14:
        $b2 = 0;

        goto label05;

     label15:
        $b2 = 0;

        goto label06;

     label16:
        $b2 = 0;

        goto label07;

     label17:
        $b2 = 0;

        goto label08;

     label18:
        $b1 = 0;

        goto label09;
    }
    public boolean isBlock()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        return z0;
    }
    public boolean isData()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean canContainInline>;

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke r0.<org.jsoup.parser.Tag: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isEmpty()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        return z0;
    }
    public boolean isFormListed()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean formList>;

        return z0;
    }
    public boolean isFormSubmittable()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean formSubmit>;

        return z0;
    }
    public boolean isInline()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean isBlock>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean isKnownTag()
    {
        org.jsoup.parser.Tag r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: org.jsoup.parser.Tag;

        $r2 = <org.jsoup.parser.Tag: java.util.Map tags>;

        $r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }
    public boolean isSelfClosing()
    {
        org.jsoup.parser.Tag r0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tag;

        $z0 = r0.<org.jsoup.parser.Tag: boolean empty>;

        if $z0 != 0 goto label1;

        $z0 = r0.<org.jsoup.parser.Tag: boolean selfClosing>;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public boolean preserveWhitespace()
    {
        org.jsoup.parser.Tag r0;
        boolean z0;

        r0 := @this: org.jsoup.parser.Tag;

        z0 = r0.<org.jsoup.parser.Tag: boolean preserveWhitespace>;

        return z0;
    }
    org.jsoup.parser.Tag setSelfClosing()
    {
        org.jsoup.parser.Tag r0;

        r0 := @this: org.jsoup.parser.Tag;

        r0.<org.jsoup.parser.Tag: boolean selfClosing> = 1;

        return r0;
    }
    public java.lang.String toString()
    {
        org.jsoup.parser.Tag r0;
        java.lang.String r1;

        r0 := @this: org.jsoup.parser.Tag;

        r1 = r0.<org.jsoup.parser.Tag: java.lang.String tagName>;

        return r1;
    }
