org.jsoup.parser.Tokeniser extends java.lang.Object
private static final char[] notCharRefCharsSorted
static final char replacementChar
org.jsoup.parser.Token$Character charPending
private java.lang.StringBuilder charsBuilder
private java.lang.String charsString
private final int[] codepointHolder
org.jsoup.parser.Token$Comment commentPending
java.lang.StringBuilder dataBuffer
org.jsoup.parser.Token$Doctype doctypePending
private org.jsoup.parser.Token emitPending
org.jsoup.parser.Token$EndTag endPending
private final org.jsoup.parser.ParseErrorList errors
private boolean isEmitPending
private java.lang.String lastStartTag
private final int[] multipointHolder
private final org.jsoup.parser.CharacterReader reader
private boolean selfClosingFlagAcknowledged
org.jsoup.parser.Token$StartTag startPending
private org.jsoup.parser.TokeniserState state
org.jsoup.parser.Token$Tag tagPending
    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[7];

        $r0[0] = 9;

        $r0[1] = 10;

        $r0[2] = 13;

        $r0[3] = 12;

        $r0[4] = 32;

        $r0[5] = 60;

        $r0[6] = 38;

        <org.jsoup.parser.Tokeniser: char[] notCharRefCharsSorted> = $r0;

        $r0 = <org.jsoup.parser.Tokeniser: char[] notCharRefCharsSorted>;

        staticinvoke <java.util.Arrays: void sort(char[])>($r0);

        return;
    }
    void <init>(org.jsoup.parser.CharacterReader, org.jsoup.parser.ParseErrorList)
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.CharacterReader $r1;
        org.jsoup.parser.ParseErrorList $r2;
        org.jsoup.parser.TokeniserState $r3;
        java.lang.StringBuilder $r4;
        org.jsoup.parser.Token$StartTag $r5;
        org.jsoup.parser.Token$EndTag $r6;
        org.jsoup.parser.Token$Character $r7;
        org.jsoup.parser.Token$Doctype $r8;
        org.jsoup.parser.Token$Comment $r9;
        int[] $r10;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.CharacterReader;

        $r2 := @parameter1: org.jsoup.parser.ParseErrorList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r3;

        r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 0;

        r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString> = null;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(1024);

        r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder> = $r4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(1024);

        r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder dataBuffer> = $r4;

        $r5 = new org.jsoup.parser.Token$StartTag;

        specialinvoke $r5.<org.jsoup.parser.Token$StartTag: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag startPending> = $r5;

        $r6 = new org.jsoup.parser.Token$EndTag;

        specialinvoke $r6.<org.jsoup.parser.Token$EndTag: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$EndTag endPending> = $r6;

        $r7 = new org.jsoup.parser.Token$Character;

        specialinvoke $r7.<org.jsoup.parser.Token$Character: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Character charPending> = $r7;

        $r8 = new org.jsoup.parser.Token$Doctype;

        specialinvoke $r8.<org.jsoup.parser.Token$Doctype: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending> = $r8;

        $r9 = new org.jsoup.parser.Token$Comment;

        specialinvoke $r9.<org.jsoup.parser.Token$Comment: void <init>()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending> = $r9;

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

        $r10 = newarray (int)[1];

        r0.<org.jsoup.parser.Tokeniser: int[] codepointHolder> = $r10;

        $r10 = newarray (int)[2];

        r0.<org.jsoup.parser.Tokeniser: int[] multipointHolder> = $r10;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader> = $r1;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors> = $r2;

        return;
    }
    private void characterReferenceError(java.lang.String)
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.String $r1;
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.ParseErrorList $r3;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r4;
        int $i0;
        java.lang.Object[] $r5;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Invalid character reference: %s", $r5);

        virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }
    private void error(java.lang.String)
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.String $r1;
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.ParseErrorList $r3;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r4;
        int $i0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: int pos()>();

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String)>($i0, $r1);

        virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }
    void acknowledgeSelfClosingFlag()
    {
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

        return;
    }
    void advanceTransition(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.CharacterReader $r2;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.TokeniserState;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r2.<org.jsoup.parser.CharacterReader: void advance()>();

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r1;

        return;
    }
    java.lang.String appropriateEndTagName()
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.String lastStartTag>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.String lastStartTag>;

        return $r1;
    }
    int[] consumeCharacterReference(java.lang.Character, boolean)
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.Character $r1;
        boolean $z0, $z1, $z2;
        org.jsoup.parser.CharacterReader $r2;
        char $c0, $c1;
        char[] $r3;
        int[] r4, $r8;
        java.lang.String $r5;
        int $i2, $i4;
        byte b3;
        java.lang.Integer $r6;
        java.lang.Object[] $r7;
        java.lang.StringBuilder $r9;
        java.lang.NumberFormatException $r10;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: java.lang.Character;

        $z0 := @parameter1: boolean;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z1 == 0 goto label01;

        return null;

     label01:
        if $r1 == null goto label02;

        $c0 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $c1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: char current()>();

        if $c0 != $c1 goto label02;

        return null;

     label02:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r3 = <org.jsoup.parser.Tokeniser: char[] notCharRefCharsSorted>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchesAnySorted(char[])>($r3);

        if $z1 == 0 goto label03;

        return null;

     label03:
        r4 = r0.<org.jsoup.parser.Tokeniser: int[] codepointHolder>;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r2.<org.jsoup.parser.CharacterReader: void mark()>();

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>("#");

        if $z1 == 0 goto label15;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>("X");

        if $z0 == 0 goto label05;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r5 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: java.lang.String consumeHexSequence()>();

     label04:
        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 != 0 goto label06;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("numeric reference with no numerals");

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r2.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label05:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r5 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: java.lang.String consumeDigitSequence()>();

        goto label04;

     label06:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>(";");

        if $z1 != 0 goto label07;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("missing semicolon");

     label07:
        $i2 = -1;

        if $z0 == 0 goto label13;

        b3 = 16;

     label08:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r5, b3);

        $i4 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

     label09:
        $i2 = $i4;

     label10:
        if $i2 == -1 goto label12;

        if $i2 < 55296 goto label11;

        if $i2 <= 57343 goto label12;

     label11:
        if $i2 <= 1114111 goto label14;

     label12:
        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("character outside of valid range");

        r4[0] = 65533;

        return r4;

     label13:
        b3 = 10;

        goto label08;

     label14:
        r4[0] = $i2;

        return r4;

     label15:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r5 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>();

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matches(char)>(59);

        $z2 = staticinvoke <org.jsoup.nodes.Entities: boolean isBaseNamedEntity(java.lang.String)>($r5);

        if $z2 != 0 goto label16;

        $z2 = staticinvoke <org.jsoup.nodes.Entities: boolean isNamedEntity(java.lang.String)>($r5);

        if $z2 == 0 goto label19;

        if $z1 == 0 goto label19;

     label16:
        $z2 = 1;

     label17:
        if $z2 != 0 goto label20;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r2.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        if $z1 == 0 goto label18;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r5;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid named referenece \'%s\'", $r7);

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>($r5);

     label18:
        return null;

     label19:
        $z2 = 0;

        goto label17;

     label20:
        if $z0 == 0 goto label22;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchesLetter()>();

        if $z0 != 0 goto label21;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchesDigit()>();

        if $z0 != 0 goto label21;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r3 = newarray (char)[3];

        $r3[0] = 61;

        $r3[1] = 45;

        $r3[2] = 95;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>($r3);

        if $z0 == 0 goto label22;

     label21:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r2.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label22:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>(";");

        if $z0 != 0 goto label23;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("missing semicolon");

     label23:
        $r8 = r0.<org.jsoup.parser.Tokeniser: int[] multipointHolder>;

        $i2 = staticinvoke <org.jsoup.nodes.Entities: int codepointsForName(java.lang.String,int[])>($r5, $r8);

        if $i2 != 1 goto label24;

        $r8 = r0.<org.jsoup.parser.Tokeniser: int[] multipointHolder>;

        $i2 = $r8[0];

        r4[0] = $i2;

        return r4;

     label24:
        if $i2 != 2 goto label25;

        r4 = r0.<org.jsoup.parser.Tokeniser: int[] multipointHolder>;

        return r4;

     label25:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected characters returned for ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.jsoup.helper.Validate: void fail(java.lang.String)>($r5);

        r4 = r0.<org.jsoup.parser.Tokeniser: int[] multipointHolder>;

        return r4;

     label26:
        $r10 := @caughtexception;

        goto label10;

        catch java.lang.NumberFormatException from label08 to label09 with label26;
    }
    void createCommentPending()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Comment $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending>;

        virtualinvoke $r1.<org.jsoup.parser.Token$Comment: org.jsoup.parser.Token reset()>();

        return;
    }
    void createDoctypePending()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Doctype $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending>;

        virtualinvoke $r1.<org.jsoup.parser.Token$Doctype: org.jsoup.parser.Token reset()>();

        return;
    }
    org.jsoup.parser.Token$Tag createTagPending(boolean)
    {
        org.jsoup.parser.Tokeniser r0;
        boolean $z0;
        org.jsoup.parser.Token$StartTag $r1;
        org.jsoup.parser.Token$Tag $r2;
        org.jsoup.parser.Token$EndTag $r3;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag startPending>;

        $r2 = virtualinvoke $r1.<org.jsoup.parser.Token$StartTag: org.jsoup.parser.Token$Tag reset()>();

     label1:
        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending> = $r2;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        return $r2;

     label2:
        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$EndTag endPending>;

        $r2 = virtualinvoke $r3.<org.jsoup.parser.Token$EndTag: org.jsoup.parser.Token$Tag reset()>();

        goto label1;
    }
    void createTempBuffer()
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.StringBuilder $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder dataBuffer>;

        staticinvoke <org.jsoup.parser.Token: void reset(java.lang.StringBuilder)>($r1);

        return;
    }
    boolean currentNodeInHtmlNS()
    {
        org.jsoup.parser.Tokeniser r0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        return 1;
    }
    void emit(char)
    {
        org.jsoup.parser.Tokeniser r0;
        char $c0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>($r1);

        return;
    }
    void emit(java.lang.String)
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString>;

        if $r2 != null goto label1;

        r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString> = $r1;

        return;

     label1:
        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label2;

        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        $r2 = r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label2:
        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        return;
    }
    void emit(org.jsoup.parser.Token)
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token $r1;
        boolean $z0;
        org.jsoup.parser.Token$TokenType $r2, $r3;
        org.jsoup.parser.Token$StartTag r4;
        java.lang.String $r5;
        org.jsoup.parser.Token$EndTag r6;
        org.jsoup.nodes.Attributes $r7;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.Token;

        $z0 = r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending>;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>($z0, "There is an unread token pending!");

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token emitPending> = $r1;

        r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 1;

        $r2 = $r1.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r3 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType StartTag>;

        if $r2 != $r3 goto label1;

        r4 = (org.jsoup.parser.Token$StartTag) $r1;

        $r5 = r4.<org.jsoup.parser.Token$StartTag: java.lang.String tagName>;

        r0.<org.jsoup.parser.Tokeniser: java.lang.String lastStartTag> = $r5;

        $z0 = r4.<org.jsoup.parser.Token$StartTag: boolean selfClosing>;

        if $z0 == 0 goto label2;

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 0;

        return;

     label1:
        $r2 = $r1.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r3 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType EndTag>;

        if $r2 != $r3 goto label2;

        r6 = (org.jsoup.parser.Token$EndTag) $r1;

        $r7 = r6.<org.jsoup.parser.Token$EndTag: org.jsoup.nodes.Attributes attributes>;

        if $r7 == null goto label2;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void error(java.lang.String)>("Attributes incorrectly present on end tag");

     label2:
        return;
    }
    void emit(char[])
    {
        org.jsoup.parser.Tokeniser r0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: char[];

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>($r2);

        return;
    }
    void emit(int[])
    {
        org.jsoup.parser.Tokeniser r0;
        int[] $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: int[];

        $r2 = new java.lang.String;

        $i0 = lengthof $r1;

        specialinvoke $r2.<java.lang.String: void <init>(int[],int,int)>($r1, 0, $i0);

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(java.lang.String)>($r2);

        return;
    }
    void emitCommentPending()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Comment $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending>;

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r1);

        return;
    }
    void emitDoctypePending()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Doctype $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending>;

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r1);

        return;
    }
    void emitTagPending()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.Token$Tag $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        virtualinvoke $r1.<org.jsoup.parser.Token$Tag: void finaliseTag()>();

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        virtualinvoke r0.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r1);

        return;
    }
    void eofError(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.ParseErrorList $r3;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r4;
        int $i0;
        java.lang.Object[] $r5;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.TokeniserState;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpectedly reached end of file (EOF) in input state [%s]", $r5);

        virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }
    void error(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.ParseErrorList $r3;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r4;
        int $i0;
        java.lang.Object[] $r5;
        char $c1;
        java.lang.Character $r6;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.TokeniserState;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: int pos()>();

        $r5 = newarray (java.lang.Object)[2];

        $r4 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $c1 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: char current()>();

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r5[0] = $r6;

        $r5[1] = $r1;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpected character \'%s\' in input state [%s]", $r5);

        virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }
    org.jsoup.parser.TokeniserState getState()
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.TokeniserState r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state>;

        return r1;
    }
    boolean isAppropriateEndTagToken()
    {
        org.jsoup.parser.Tokeniser r0;
        java.lang.String $r1, $r3;
        org.jsoup.parser.Token$Tag $r2;
        boolean $z0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.String lastStartTag>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        $r3 = virtualinvoke $r2.<org.jsoup.parser.Token$Tag: java.lang.String name()>();

        $r1 = r0.<org.jsoup.parser.Tokeniser: java.lang.String lastStartTag>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    org.jsoup.parser.Token read()
    {
        org.jsoup.parser.Tokeniser r0;
        boolean $z0;
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.CharacterReader $r2;
        java.lang.StringBuilder $r3, $r5;
        int $i0;
        java.lang.String $r4;
        org.jsoup.parser.Token$Character $r6;
        org.jsoup.parser.Token r7;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $z0 = r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.jsoup.parser.Tokeniser: void error(java.lang.String)>("Self closing flag not acknowledged");

        r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

     label1:
        $z0 = r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending>;

        if $z0 != 0 goto label2;

        $r1 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state>;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r1.<org.jsoup.parser.TokeniserState: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>(r0, $r2);

        goto label1;

     label2:
        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label3;

        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        $r5 = r0.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charsBuilder>;

        $i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i0);

        r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString> = null;

        $r6 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Character charPending>;

        $r6 = virtualinvoke $r6.<org.jsoup.parser.Token$Character: org.jsoup.parser.Token$Character data(java.lang.String)>($r4);

        return $r6;

     label3:
        $r4 = r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString>;

        if $r4 == null goto label4;

        $r6 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Character charPending>;

        $r4 = r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString>;

        $r6 = virtualinvoke $r6.<org.jsoup.parser.Token$Character: org.jsoup.parser.Token$Character data(java.lang.String)>($r4);

        r0.<org.jsoup.parser.Tokeniser: java.lang.String charsString> = null;

        return $r6;

     label4:
        r0.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 0;

        r7 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token emitPending>;

        return r7;
    }
    void transition(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.Tokeniser r0;
        org.jsoup.parser.TokeniserState $r1;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.TokeniserState;

        r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r1;

        return;
    }
    java.lang.String unescapeEntities(boolean)
    {
        org.jsoup.parser.Tokeniser r0;
        boolean $z0, $z1;
        java.lang.StringBuilder r1;
        org.jsoup.parser.CharacterReader $r2;
        java.lang.String $r3;
        int[] $r4;
        int $i0;

        r0 := @this: org.jsoup.parser.Tokeniser;

        $z0 := @parameter0: boolean;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r3 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: java.lang.String consumeTo(char)>(38);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: boolean matches(char)>(38);

        if $z1 == 0 goto label1;

        $r2 = r0.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r2.<org.jsoup.parser.CharacterReader: char consume()>();

        $r4 = virtualinvoke r0.<org.jsoup.parser.Tokeniser: int[] consumeCharacterReference(java.lang.Character,boolean)>(null, $z0);

        if $r4 == null goto label2;

        $i0 = lengthof $r4;

        if $i0 != 0 goto label3;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        goto label1;

     label3:
        $i0 = $r4[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i0);

        $i0 = lengthof $r4;

        if $i0 != 2 goto label1;

        $i0 = $r4[1];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i0);

        goto label1;

     label4:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
