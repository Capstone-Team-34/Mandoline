org.jsoup.parser.CharacterReader extends java.lang.Object
static final char EOF
private static final int maxCacheLen
private final char[] input
private final int length
private int mark
private int pos
private final java.lang.String[] stringCache
    public void <init>(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        char[] $r2;
        java.lang.String[] $r3;
        int $i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.CharacterReader: int pos> = 0;

        r0.<org.jsoup.parser.CharacterReader: int mark> = 0;

        $r3 = newarray (java.lang.String)[512];

        r0.<org.jsoup.parser.CharacterReader: java.lang.String[] stringCache> = $r3;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        r0.<org.jsoup.parser.CharacterReader: char[] input> = $r2;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = lengthof $r2;

        r0.<org.jsoup.parser.CharacterReader: int length> = $i0;

        return;
    }
    private java.lang.String cacheString(int, int)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, i2, i4, i5;
        java.lang.String[] r1;
        char[] r2;
        char $c3;
        boolean $z0;
        java.lang.String r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        r1 = r0.<org.jsoup.parser.CharacterReader: java.lang.String[] stringCache>;

        if $i1 <= 12 goto label1;

        r3 = new java.lang.String;

        specialinvoke r3.<java.lang.String: void <init>(char[],int,int)>(r2, $i0, $i1);

        return r3;

     label1:
        i2 = 0;

        i4 = 0;

        i5 = $i0;

     label2:
        if i4 >= $i1 goto label3;

        i2 = i2 * 31;

        $c3 = r2[i5];

        i2 = i2 + $c3;

        i4 = i4 + 1;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = lengthof r1;

        i4 = i4 + -1;

        i2 = i2 & i4;

        r3 = r1[i2];

        if r3 != null goto label4;

        r3 = new java.lang.String;

        specialinvoke r3.<java.lang.String: void <init>(char[],int,int)>(r2, $i0, $i1);

        r1[i2] = r3;

        return r3;

     label4:
        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean rangeEquals(int,int,java.lang.String)>($i0, $i1, r3);

        if $z0 != 0 goto label5;

        r3 = new java.lang.String;

        specialinvoke r3.<java.lang.String: void <init>(char[],int,int)>(r2, $i0, $i1);

        r1[i2] = r3;

     label5:
        return r3;
    }
    public void advance()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }
    char consume()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        char c2;
        char[] $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i0 < $i1 goto label2;

        c2 = 65535;

     label1:
        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return c2;

     label2:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c2 = $r1[$i0];

        goto label1;
    }
    java.lang.String consumeAsString()
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        char[] $r2;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, 1);

        return $r1;
    }
    java.lang.String consumeData()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int i1, i2, $i3;
        char[] r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

     label1:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if $i3 >= i1 goto label2;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = r1[$i3];

        if c0 == 38 goto label2;

        if c0 == 60 goto label2;

        if c0 != 0 goto label3;

     label2:
        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if i1 <= i2 goto label4;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = i1 - i2;

        $r2 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i2, i1);

        return $r2;

     label3:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = $i3 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i3;

        goto label1;

     label4:
        return "";
    }
    java.lang.String consumeDigitSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int i1, $i2, $i3;
        java.lang.String $r1;
        char[] $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i3 goto label2;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r2[$i2];

        if c0 < 48 goto label2;

        if c0 > 57 goto label2;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label2:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 - i1;

        $r1 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i1, $i2);

        return $r1;
    }
    java.lang.String consumeHexSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int i1, $i2, $i3;
        java.lang.String $r1;
        char[] $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i3 goto label5;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r2[$i2];

        if c0 < 48 goto label2;

        if c0 <= 57 goto label4;

     label2:
        if c0 < 65 goto label3;

        if c0 <= 70 goto label4;

     label3:
        if c0 < 97 goto label5;

        if c0 > 102 goto label5;

     label4:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label5:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 - i1;

        $r1 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i1, $i2);

        return $r1;
    }
    java.lang.String consumeLetterSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int i1, $i2, $i3;
        char[] $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i2 >= $i3 goto label5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i2];

        if c0 < 65 goto label2;

        if c0 <= 90 goto label4;

     label2:
        if c0 < 97 goto label3;

        if c0 <= 122 goto label4;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 == 0 goto label5;

     label4:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label5:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 - i1;

        $r2 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i1, $i2);

        return $r2;
    }
    java.lang.String consumeLetterThenDigitSequence()
    {
        org.jsoup.parser.CharacterReader r0;
        int i0, $i1, $i2;
        char[] $r1;
        char c3;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i1 >= $i2 goto label5;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c3 = $r1[$i1];

        if c3 < 65 goto label2;

        if c3 <= 90 goto label4;

     label2:
        if c3 < 97 goto label3;

        if c3 <= 122 goto label4;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c3);

        if $z0 == 0 goto label5;

     label4:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        goto label1;

     label5:
        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c3 = $r1[$i1];

        if c3 < 48 goto label6;

        if c3 > 57 goto label6;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        goto label5;

     label6:
        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - i0;

        $r2 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i0, $i1);

        return $r2;
    }
    java.lang.String consumeTagName()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int i1, i2, $i3;
        char[] r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

     label1:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if $i3 >= i1 goto label2;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = r1[$i3];

        if c0 == 9 goto label2;

        if c0 == 10 goto label2;

        if c0 == 13 goto label2;

        if c0 == 12 goto label2;

        if c0 == 32 goto label2;

        if c0 == 47 goto label2;

        if c0 == 62 goto label2;

        if c0 != 0 goto label3;

     label2:
        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if i1 <= i2 goto label4;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = i1 - i2;

        $r2 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i2, i1);

        return $r2;

     label3:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = $i3 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i3;

        goto label1;

     label4:
        return "";
    }
    public java.lang.String consumeTo(char)
    {
        org.jsoup.parser.CharacterReader r0;
        char $c0;
        int $i1, $i2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $c0 := @parameter0: char;

        $i1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(char)>($c0);

        if $i1 == -1 goto label1;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $r1 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>($i2, $i1);

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i2 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>();

        return $r1;
    }
    java.lang.String consumeTo(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r1);

        if $i0 == -1 goto label1;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $r1 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>($i1, $i0);

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i1 + $i0;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String consumeToEnd()>();

        return $r1;
    }
    public transient java.lang.String consumeToAny(char[])
    {
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, r2;
        char c0, $c6;
        int i1, i2, $i3, $i4, $i5;
        java.lang.String $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: char[];

        i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

     label1:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if $i3 >= i1 goto label3;

        $i3 = lengthof $r1;

        $i4 = 0;

     label2:
        if $i4 >= $i3 goto label5;

        c0 = $r1[$i4];

        $i5 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c6 = r2[$i5];

        if $c6 != c0 goto label4;

     label3:
        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if i1 <= i2 goto label6;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = i1 - i2;

        $r3 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i2, i1);

        return $r3;

     label4:
        $i4 = $i4 + 1;

        goto label2;

     label5:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i3 = $i3 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i3;

        goto label1;

     label6:
        return "";
    }
    transient java.lang.String consumeToAnySorted(char[])
    {
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, r2;
        int i0, i1, $i2;
        char $c3;
        java.lang.String $r3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: char[];

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i0 = r0.<org.jsoup.parser.CharacterReader: int length>;

        r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if $i2 >= i0 goto label2;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c3 = r2[$i2];

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(char[],char)>($r1, $c3);

        if $i2 < 0 goto label3;

     label2:
        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        if i0 <= i1 goto label4;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i0 = i0 - i1;

        $r3 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>(i1, i0);

        return $r3;

     label3:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + 1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i2;

        goto label1;

     label4:
        return "";
    }
    java.lang.String consumeToEnd()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i2 - $i0;

        $r1 = specialinvoke r0.<org.jsoup.parser.CharacterReader: java.lang.String cacheString(int,int)>($i1, $i0);

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i1;

        return $r1;
    }
    boolean containsIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1, $r3;
        java.util.Locale $r2;
        int $i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $i0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r3);

        if $i0 > -1 goto label1;

        $i0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: int nextIndexOf(java.lang.CharSequence)>($r1);

        if $i0 <= -1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
    public char current()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;
        char[] $r1;
        char $c2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i0 < $i1 goto label1;

        return 65535;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c2 = $r1[$i0];

        return $c2;
    }
    public boolean isEmpty()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if $i1 < $i0 goto label1;

        return 1;

     label1:
        return 0;
    }
    void mark()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        r0.<org.jsoup.parser.CharacterReader: int mark> = $i0;

        return;
    }
    boolean matchConsume(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean matches(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return 1;

     label1:
        return 0;
    }
    boolean matchConsumeIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean matchesIgnoreCase(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return 1;

     label1:
        return 0;
    }
    boolean matches(char)
    {
        org.jsoup.parser.CharacterReader r0;
        char $c0, $c2;
        int $i1;
        boolean $z0;
        char[] $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $c0 := @parameter0: char;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c2 = $r1[$i1];

        if $c2 != $c0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean matches(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        char $c3, $c4;
        char[] $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - $i2;

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + $i1;

        $c4 = $r2[$i2];

        if $c3 != $c4 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    transient boolean matchesAny(char[])
    {
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, $r2;
        char c0, c1;
        boolean $z0;
        int $i2, $i3;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: char[];

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r2[$i2];

        $i2 = lengthof $r1;

        $i3 = 0;

     label2:
        if $i3 >= $i2 goto label4;

        c1 = $r1[$i3];

        if c1 != c0 goto label3;

        return 1;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 0;
    }
    boolean matchesAnySorted(char[])
    {
        org.jsoup.parser.CharacterReader r0;
        char[] $r1, $r2;
        int $i0;
        boolean $z0;
        char $c1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: char[];

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $c1 = $r2[$i0];

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(char[],char)>($r1, $c1);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    boolean matchesDigit()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int $i1;
        boolean $z0;
        char[] $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i1];

        if c0 < 48 goto label2;

        if c0 > 57 goto label2;

        return 1;

     label2:
        return 0;
    }
    boolean matchesIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        char $c3, $c4;
        char[] $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i1 - $i2;

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3);

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = $i2 + $i1;

        $c4 = $r2[$i2];

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c4);

        if $c3 != $c4 goto label4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;
    }
    boolean matchesLetter()
    {
        org.jsoup.parser.CharacterReader r0;
        char c0;
        int $i1;
        boolean $z0;
        char[] $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $z0 = virtualinvoke r0.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        c0 = $r1[$i1];

        if c0 < 65 goto label2;

        if c0 <= 90 goto label4;

     label2:
        if c0 < 97 goto label3;

        if c0 <= 122 goto label4;

     label3:
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 == 0 goto label5;

     label4:
        return 1;

     label5:
        return 0;
    }
    int nextIndexOf(char)
    {
        org.jsoup.parser.CharacterReader r0;
        char $c0, $c3;
        int i1, $i2;
        char[] $r1;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $c0 := @parameter0: char;

        i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c3 = $r1[i1];

        if $c0 != $c3 goto label2;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i1 = i1 - $i2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }
    int nextIndexOf(java.lang.CharSequence)
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.CharSequence $r1;
        int i0, i2, $i3, $i5;
        char $c1, $c4, $c6;
        char[] $r2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 := @parameter0: java.lang.CharSequence;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(0);

        i2 = r0.<org.jsoup.parser.CharacterReader: int pos>;

     label1:
        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i2 >= $i3 goto label7;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c4 = $r2[i2];

        if $c1 == $c4 goto label3;

     label2:
        i2 = i2 + 1;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i2 >= $i3 goto label3;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c4 = $r2[i2];

        if $c1 != $c4 goto label2;

     label3:
        $i3 = i2 + 1;

        i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        i0 = i0 + $i3;

        i0 = i0 + -1;

        $i5 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i2 >= $i5 goto label6;

        $i5 = r0.<org.jsoup.parser.CharacterReader: int length>;

        if i0 > $i5 goto label6;

        $i5 = 1;

     label4:
        if $i3 >= i0 goto label5;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i5);

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $c6 = $r2[$i3];

        if $c4 != $c6 goto label5;

        $i3 = $i3 + 1;

        $i5 = $i5 + 1;

        goto label4;

     label5:
        if $i3 != i0 goto label6;

        $i3 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        i2 = i2 - $i3;

        return i2;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return -1;
    }
    public int pos()
    {
        org.jsoup.parser.CharacterReader r0;
        int i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        return i0;
    }
    boolean rangeEquals(int, int, java.lang.String)
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0, i1, $i2, i3;
        java.lang.String $r1;
        char[] r2;
        char $c4, $c5;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i1 != $i2 goto label4;

        r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i2 = 0;

        i3 = i1;

     label1:
        if i3 == 0 goto label2;

        $c4 = r2[$i0];

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        if $c4 == $c5 goto label3;

        return 0;

     label2:
        return 1;

     label3:
        $i2 = $i2 + 1;

        $i0 = $i0 + 1;

        i3 = i3 + -1;

        goto label1;

     label4:
        return 0;
    }
    void rewindToMark()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int mark>;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }
    public java.lang.String toString()
    {
        org.jsoup.parser.CharacterReader r0;
        java.lang.String $r1;
        char[] $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $r1 = new java.lang.String;

        $r2 = r0.<org.jsoup.parser.CharacterReader: char[] input>;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i2 = r0.<org.jsoup.parser.CharacterReader: int length>;

        $i1 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i1 = $i2 - $i1;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, $i0, $i1);

        return $r1;
    }
    void unconsume()
    {
        org.jsoup.parser.CharacterReader r0;
        int $i0;

        r0 := @this: org.jsoup.parser.CharacterReader;

        $i0 = r0.<org.jsoup.parser.CharacterReader: int pos>;

        $i0 = $i0 + -1;

        r0.<org.jsoup.parser.CharacterReader: int pos> = $i0;

        return;
    }
