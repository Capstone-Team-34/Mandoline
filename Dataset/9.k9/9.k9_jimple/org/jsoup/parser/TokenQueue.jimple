org.jsoup.parser.TokenQueue extends java.lang.Object
private static final char ESC
private int pos
private java.lang.String queue
    public void <init>(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jsoup.parser.TokenQueue: int pos> = 0;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        r0.<org.jsoup.parser.TokenQueue: java.lang.String queue> = $r1;

        return;
    }
    private int remainingLength()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i0 = $i1 - $i0;

        return $i0;
    }
    public static java.lang.String unescape(java.lang.String)
    {
        java.lang.String $r0;
        char c0, c2;
        java.lang.StringBuilder r1;
        int $i1, $i3;
        char[] $r2;

        $r0 := @parameter0: java.lang.String;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        c2 = 0;

        $r2 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        $i1 = lengthof $r2;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label4;

        c0 = $r2[$i3];

        if c0 != 92 goto label3;

        if c2 == 0 goto label2;

        if c2 != 92 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label2:
        c2 = c0;

        $i3 = $i3 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label2;

     label4:
        $r0 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }
    public void addFirst(java.lang.Character)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.Character $r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.Character;

        $r2 = virtualinvoke $r1.<java.lang.Character: java.lang.String toString()>();

        virtualinvoke r0.<org.jsoup.parser.TokenQueue: void addFirst(java.lang.String)>($r2);

        return;
    }
    public void addFirst(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1;
        int $i0;
        java.lang.StringBuilder $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.jsoup.parser.TokenQueue: java.lang.String queue> = $r1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = 0;

        return;
    }
    public void advance()
    {
        org.jsoup.parser.TokenQueue r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i0 = $i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i0;

     label1:
        return;
    }
    public java.lang.String chompBalanced(char, char)
    {
        org.jsoup.parser.TokenQueue r0;
        char $c0, $c1, c5, $c6;
        int i2, i3, i4;
        boolean z0, $z1;
        java.lang.String $r1;
        java.lang.Character $r2, $r3;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        i2 = -1;

        i3 = -1;

        i4 = 0;

        c5 = 0;

        z0 = 0;

     label01:
        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z1 == 0 goto label03;

     label02:
        if i3 < 0 goto label13;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i3);

        return $r1;

     label03:
        $c6 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: char consume()>();

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c6);

        if c5 == 0 goto label04;

        if c5 == 92 goto label10;

     label04:
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(39);

        $z1 = virtualinvoke $r2.<java.lang.Character: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label05;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(34);

        $z1 = virtualinvoke $r2.<java.lang.Character: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label06;

     label05:
        $c6 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        if $c6 == $c0 goto label06;

        if z0 != 0 goto label08;

        z0 = 1;

     label06:
        if z0 == 0 goto label09;

     label07:
        if i4 > 0 goto label01;

        goto label02;

     label08:
        z0 = 0;

        goto label06;

     label09:
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $z1 = virtualinvoke $r2.<java.lang.Character: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label12;

        i4 = i4 + 1;

        if i2 != -1 goto label10;

        i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label10:
        if i4 <= 0 goto label11;

        if c5 == 0 goto label11;

        i3 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label11:
        c5 = virtualinvoke $r2.<java.lang.Character: char charValue()>();

        goto label07;

     label12:
        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $z1 = virtualinvoke $r2.<java.lang.Character: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label10;

        i4 = i4 + -1;

        goto label10;

     label13:
        return "";
    }
    public java.lang.String chompTo(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>($r1);

        virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>($r1);

        return $r2;
    }
    public java.lang.String chompToIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: java.lang.String consumeToIgnoreCase(java.lang.String)>($r1);

        virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>($r1);

        return $r2;
    }
    public char consume()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        char $c2;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        return $c2;
    }
    public void consume(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue did not match expected sequence");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = specialinvoke r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 <= $i1 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue not long enough to consume sequence");

        throw $r2;

     label2:
        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i0 = $i1 + $i0;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i0;

        return;
    }
    public java.lang.String consumeAttributeKey()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1;
        boolean $z0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 != 0 goto label2;

        $r1 = newarray (char)[3];

        $r1[0] = 45;

        $r1[1] = 95;

        $r1[2] = 58;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z0 == 0 goto label3;

     label2:
        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        goto label1;

     label3:
        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }
    public java.lang.String consumeCssIdentifier()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1;
        boolean $z0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 != 0 goto label2;

        $r1 = newarray (char)[2];

        $r1[0] = 45;

        $r1[1] = 95;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z0 == 0 goto label3;

     label2:
        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        goto label1;

     label3:
        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }
    public java.lang.String consumeElementSelector()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1;
        boolean $z0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 != 0 goto label2;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "*|";

        $r1[1] = "|";

        $r1[2] = "_";

        $r1[3] = "-";

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>($r1);

        if $z0 == 0 goto label3;

     label2:
        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        goto label1;

     label3:
        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }
    public java.lang.String consumeTagName()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1;
        boolean $z0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 != 0 goto label2;

        $r1 = newarray (char)[3];

        $r1[0] = 58;

        $r1[1] = 95;

        $r1[2] = 45;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z0 == 0 goto label3;

     label2:
        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        goto label1;

     label3:
        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }
    public java.lang.String consumeTo(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>($r1, $i0);

        if $i0 == -1 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i0;

        return $r1;

     label1:
        $r1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        return $r1;
    }
    public transient java.lang.String consumeToAny(java.lang.String[])
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String[] $r1;
        int i0, $i1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String[];

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>($r1);

        if $z0 != 0 goto label2;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        goto label1;

     label2:
        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r2;
    }
    public java.lang.String consumeToIgnoreCase(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1, $r2, $r3, $r4;
        int i0, i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label1:
        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r1);

        if $z1 == 0 goto label3;

     label2:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i0);

        return $r1;

     label3:
        if $z0 == 0 goto label6;

        $r3 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String,int)>($r2, i0);

        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        i0 = i0 - $i2;

        if i0 != 0 goto label4;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        i0 = i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = i0;

        goto label1;

     label4:
        if i0 >= 0 goto label5;

        $r3 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r0.<org.jsoup.parser.TokenQueue: int pos> = i0;

        goto label1;

     label5:
        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        i0 = $i2 + i0;

        r0.<org.jsoup.parser.TokenQueue: int pos> = i0;

        goto label1;

     label6:
        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        i0 = i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = i0;

        goto label1;
    }
    public boolean consumeWhitespace()
    {
        org.jsoup.parser.TokenQueue r0;
        boolean $z0, z1;
        int $i0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        z1 = 0;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>();

        if $z0 == 0 goto label2;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i0 = $i0 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i0;

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }
    public java.lang.String consumeWord()
    {
        org.jsoup.parser.TokenQueue r0;
        int i0, $i1;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 == 0 goto label2;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i1 + 1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        goto label1;

     label2:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }
    public boolean isEmpty()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $i0 = specialinvoke r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean matchChomp(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i0;

        return 1;

     label1:
        return 0;
    }
    public boolean matches(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i0, $r1, 0, $i1);

        return $z0;
    }
    public transient boolean matchesAny(char[])
    {
        org.jsoup.parser.TokenQueue r0;
        char[] $r1;
        char c0, $c4;
        int $i1, $i2, $i3;
        boolean $z0;
        java.lang.String $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: char[];

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = lengthof $r1;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label4;

        c0 = $r1[$i3];

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i2 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        if $c4 != c0 goto label3;

        return 1;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 0;
    }
    public transient boolean matchesAny(java.lang.String[])
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String[] $r1;
        java.lang.String r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        r2 = $r1[$i1];

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }
    public boolean matchesCS(java.lang.String)
    {
        org.jsoup.parser.TokenQueue r0;
        java.lang.String $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String,int)>($r1, $i0);

        return $z0;
    }
    public boolean matchesStartTag()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        java.lang.String $r1;
        char $c1;
        boolean $z0;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $i0 = specialinvoke r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 < 2 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        if $c1 != 60 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i0 = $i0 + 1;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean matchesWhitespace()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        boolean $z0;
        java.lang.String $r1;
        char $c1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean isWhitespace(int)>($c1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public boolean matchesWord()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        boolean $z0;
        java.lang.String $r1;
        char $c1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
    public char peek()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        boolean $z0;
        java.lang.String $r1;
        char $c1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        return $c1;
    }
    public java.lang.String remainder()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        $r2 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        r0.<org.jsoup.parser.TokenQueue: int pos> = $i0;

        return $r1;
    }
    public java.lang.String toString()
    {
        org.jsoup.parser.TokenQueue r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.jsoup.parser.TokenQueue;

        $r1 = r0.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = r0.<org.jsoup.parser.TokenQueue: int pos>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r1;
    }
