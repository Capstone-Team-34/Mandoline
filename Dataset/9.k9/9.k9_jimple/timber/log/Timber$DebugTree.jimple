timber.log.Timber$DebugTree extends timber.log.Timber$Tree
private static final java.util.regex.Pattern ANONYMOUS_CLASS
private static final int CALL_STACK_INDEX
private static final int MAX_LOG_LENGTH
private static final int MAX_TAG_LENGTH
    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\$\\d+)+$");

        <timber.log.Timber$DebugTree: java.util.regex.Pattern ANONYMOUS_CLASS> = $r0;

        return;
    }
    public void <init>()
    {
        timber.log.Timber$DebugTree r0;

        r0 := @this: timber.log.Timber$DebugTree;

        specialinvoke r0.<timber.log.Timber$Tree: void <init>()>();

        return;
    }
    protected java.lang.String createStackElementTag(java.lang.StackTraceElement)
    {
        timber.log.Timber$DebugTree r0;
        java.lang.StackTraceElement $r1;
        java.lang.String $r2, r3;
        java.util.regex.Pattern $r4;
        java.util.regex.Matcher $r5;
        boolean $z0;
        int $i0;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 := @parameter0: java.lang.StackTraceElement;

        $r2 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        r3 = $r2;

        $r4 = <timber.log.Timber$DebugTree: java.util.regex.Pattern ANONYMOUS_CLASS>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

     label1:
        $i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);

        $i0 = $i0 + 1;

        $r2 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i0);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 23 goto label2;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 23);

     label2:
        return $r2;
    }
    final java.lang.String getTag()
    {
        timber.log.Timber$DebugTree r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        java.lang.StackTraceElement[] $r3;
        int $i0;
        java.lang.IllegalStateException $r4;
        java.lang.StackTraceElement $r5;

        r0 := @this: timber.log.Timber$DebugTree;

        $r1 = specialinvoke r0.<timber.log.Timber$Tree: java.lang.String getTag()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r3;

        if $i0 > 5 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Synthetic stacktrace didn\'t have enough elements: are you using proguard?");

        throw $r4;

     label2:
        $r5 = $r3[5];

        $r1 = virtualinvoke r0.<timber.log.Timber$DebugTree: java.lang.String createStackElementTag(java.lang.StackTraceElement)>($r5);

        return $r1;
    }
    protected void log(int, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        timber.log.Timber$DebugTree r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r1, $r2, $r4;
        java.lang.Throwable $r3;

        r0 := @this: timber.log.Timber$DebugTree;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.Throwable;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 >= 4000 goto label2;

        if $i0 != 7 goto label1;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>($r1, $r2);

        return;

     label1:
        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

        return;

     label2:
        $i1 = 0;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

     label3:
        if $i1 >= $i2 goto label8;

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(10, $i1);

        i4 = $i3;

        if $i3 == -1 goto label6;

     label4:
        $i3 = $i1 + 4000;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i4, $i3);

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        if $i0 != 7 goto label7;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>($r1, $r4);

     label5:
        $i1 = $i3;

        if $i3 < i4 goto label4;

        $i1 = $i3 + 1;

        goto label3;

     label6:
        i4 = $i2;

        goto label4;

     label7:
        staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r1, $r4);

        goto label5;

     label8:
        return;
    }
