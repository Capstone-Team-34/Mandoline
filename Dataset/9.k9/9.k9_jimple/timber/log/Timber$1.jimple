timber.log.Timber$1 extends timber.log.Timber$Tree
    void <init>()
    {
        timber.log.Timber$1 r0;

        r0 := @this: timber.log.Timber$1;

        specialinvoke r0.<timber.log.Timber$Tree: void <init>()>();

        return;
    }
    public transient void d(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<timber.log.Timber$Tree: void d(java.lang.String,java.lang.Object[])>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void d(java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        int i0, i1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<timber.log.Timber$Tree: void d(java.lang.Throwable)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void d(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int i0, i1;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r4;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r4[i1];

        virtualinvoke $r5.<timber.log.Timber$Tree: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void e(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<timber.log.Timber$Tree: void e(java.lang.String,java.lang.Object[])>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void e(java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        int i0, i1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<timber.log.Timber$Tree: void e(java.lang.Throwable)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void e(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int i0, i1;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r4;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r4[i1];

        virtualinvoke $r5.<timber.log.Timber$Tree: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void i(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<timber.log.Timber$Tree: void i(java.lang.String,java.lang.Object[])>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void i(java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        int i0, i1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<timber.log.Timber$Tree: void i(java.lang.Throwable)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void i(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int i0, i1;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r4;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r4[i1];

        virtualinvoke $r5.<timber.log.Timber$Tree: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    protected void log(int, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        int $i0;
        java.lang.String $r1, $r2;
        java.lang.Throwable $r3;
        java.lang.AssertionError $r4;

        r0 := @this: timber.log.Timber$1;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.Throwable;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Missing override for log method.");

        throw $r4;
    }
    public transient void log(int, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        int $i0, i1, i2;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i2 = 0;

        i1 = lengthof r3;

     label1:
        if i2 >= i1 goto label2;

        $r4 = r3[i2];

        virtualinvoke $r4.<timber.log.Timber$Tree: void log(int,java.lang.String,java.lang.Object[])>($i0, $r1, $r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public void log(int, java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        int $i0, i1, i2;
        java.lang.Throwable $r1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i2 = 0;

        i1 = lengthof r2;

     label1:
        if i2 >= i1 goto label2;

        $r3 = r2[i2];

        virtualinvoke $r3.<timber.log.Timber$Tree: void log(int,java.lang.Throwable)>($i0, $r1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void log(int, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        int $i0, i1, i2;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i2 = 0;

        i1 = lengthof r4;

     label1:
        if i2 >= i1 goto label2;

        $r5 = r4[i2];

        virtualinvoke $r5.<timber.log.Timber$Tree: void log(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>($i0, $r1, $r2, $r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void v(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<timber.log.Timber$Tree: void v(java.lang.String,java.lang.Object[])>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void v(java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        int i0, i1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<timber.log.Timber$Tree: void v(java.lang.Throwable)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void v(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int i0, i1;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r4;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r4[i1];

        virtualinvoke $r5.<timber.log.Timber$Tree: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void w(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<timber.log.Timber$Tree: void w(java.lang.String,java.lang.Object[])>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void w(java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        int i0, i1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<timber.log.Timber$Tree: void w(java.lang.Throwable)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void w(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int i0, i1;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r4;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r4[i1];

        virtualinvoke $r5.<timber.log.Timber$Tree: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void wtf(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        int i0, i1;
        timber.log.Timber$Tree[] r3;
        timber.log.Timber$Tree $r4;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        r3 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r3;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<timber.log.Timber$Tree: void wtf(java.lang.String,java.lang.Object[])>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public void wtf(java.lang.Throwable)
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        int i0, i1;
        timber.log.Timber$Tree[] r2;
        timber.log.Timber$Tree $r3;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        r2 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<timber.log.Timber$Tree: void wtf(java.lang.Throwable)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
    public transient void wtf(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$1 r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;
        int i0, i1;
        timber.log.Timber$Tree[] r4;
        timber.log.Timber$Tree $r5;

        r0 := @this: timber.log.Timber$1;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        r4 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r4;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r4[i1];

        virtualinvoke $r5.<timber.log.Timber$Tree: void wtf(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r1, $r2, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
