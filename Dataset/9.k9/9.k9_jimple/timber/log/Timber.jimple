timber.log.Timber extends java.lang.Object
private static final java.util.List FOREST
private static final timber.log.Timber$Tree[] TREE_ARRAY_EMPTY
private static final timber.log.Timber$Tree TREE_OF_SOULS
static volatile timber.log.Timber$Tree[] forestAsArray
    static void <clinit>()
    {
        timber.log.Timber$Tree[] $r0;
        java.util.ArrayList $r1;
        timber.log.Timber$1 $r2;

        $r0 = newarray (timber.log.Timber$Tree)[0];

        <timber.log.Timber: timber.log.Timber$Tree[] TREE_ARRAY_EMPTY> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <timber.log.Timber: java.util.List FOREST> = $r1;

        $r0 = <timber.log.Timber: timber.log.Timber$Tree[] TREE_ARRAY_EMPTY>;

        <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray> = $r0;

        $r2 = new timber.log.Timber$1;

        specialinvoke $r2.<timber.log.Timber$1: void <init>()>();

        <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS> = $r2;

        return;
    }
    private void <init>()
    {
        timber.log.Timber r0;
        java.lang.AssertionError $r1;

        r0 := @this: timber.log.Timber;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("No instances.");

        throw $r1;
    }
    public static timber.log.Timber$Tree asTree()
    {
        timber.log.Timber$Tree r0;

        r0 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        return r0;
    }
    public static transient void d(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void d(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static void d(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void d(java.lang.Throwable)>($r0);

        return;
    }
    public static transient void d(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void d(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void e(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void e(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static void e(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void e(java.lang.Throwable)>($r0);

        return;
    }
    public static transient void e(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void e(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static java.util.List forest()
    {
        java.util.List $r0, $r1;
        java.util.ArrayList $r2;
        java.lang.Throwable $r3;

        $r0 = <timber.log.Timber: java.util.List FOREST>;

        entermonitor $r0;

     label1:
        $r2 = new java.util.ArrayList;

        $r1 = <timber.log.Timber: java.util.List FOREST>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        exitmonitor $r0;

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static transient void i(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void i(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static void i(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void i(java.lang.Throwable)>($r0);

        return;
    }
    public static transient void i(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void i(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void log(int, java.lang.String, java.lang.Object[])
    {
        int $i0;
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void log(int,java.lang.String,java.lang.Object[])>($i0, $r0, $r1);

        return;
    }
    public static void log(int, java.lang.Throwable)
    {
        int $i0;
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void log(int,java.lang.Throwable)>($i0, $r0);

        return;
    }
    public static transient void log(int, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        int $i0;
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.Throwable;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void log(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>($i0, $r0, $r1, $r2);

        return;
    }
    public static void plant(timber.log.Timber$Tree)
    {
        timber.log.Timber$Tree $r0, $r2;
        java.lang.NullPointerException $r1;
        java.lang.IllegalArgumentException $r3;
        java.util.List $r4, $r5, $r6;
        int $i0;
        timber.log.Timber$Tree[] $r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r9;

        $r0 := @parameter0: timber.log.Timber$Tree;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("tree == null");

        throw $r1;

     label1:
        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        if $r0 != $r2 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot plant Timber into itself.");

        throw $r3;

     label2:
        $r4 = <timber.log.Timber: java.util.List FOREST>;

        entermonitor $r4;

     label3:
        $r5 = <timber.log.Timber: java.util.List FOREST>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r0);

        $r5 = <timber.log.Timber: java.util.List FOREST>;

        $r6 = <timber.log.Timber: java.util.List FOREST>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = newarray (timber.log.Timber$Tree)[$i0];

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r7 = (timber.log.Timber$Tree[]) $r8;

        <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray> = $r7;

        exitmonitor $r4;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
    public static transient void plant(timber.log.Timber$Tree[])
    {
        timber.log.Timber$Tree[] $r0;
        timber.log.Timber$Tree r1, $r3;
        java.lang.NullPointerException $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r5, $r6, $r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r9;

        $r0 := @parameter0: timber.log.Timber$Tree[];

        if $r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("trees == null");

        throw $r2;

     label1:
        $i0 = lengthof $r0;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        r1 = $r0[$i1];

        if r1 != null goto label3;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("trees contains null");

        throw $r2;

     label3:
        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        if r1 != $r3 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot plant Timber into itself.");

        throw $r4;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $r5 = <timber.log.Timber: java.util.List FOREST>;

        entermonitor $r5;

     label6:
        $r6 = <timber.log.Timber: java.util.List FOREST>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r6, $r0);

        $r6 = <timber.log.Timber: java.util.List FOREST>;

        $r7 = <timber.log.Timber: java.util.List FOREST>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r0 = newarray (timber.log.Timber$Tree)[$i0];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r0 = (timber.log.Timber$Tree[]) $r8;

        <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray> = $r0;

        exitmonitor $r5;

     label7:
        return;

     label8:
        $r9 := @caughtexception;

        exitmonitor $r5;

     label9:
        throw $r9;

        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }
    public static timber.log.Timber$Tree tag(java.lang.String)
    {
        java.lang.String $r0;
        int i0, i1;
        timber.log.Timber$Tree[] r1;
        timber.log.Timber$Tree $r2;
        java.lang.ThreadLocal $r3;

        $r0 := @parameter0: java.lang.String;

        r1 = <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray>;

        i1 = 0;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        $r3 = $r2.<timber.log.Timber$Tree: java.lang.ThreadLocal explicitTag>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        return $r2;
    }
    public static int treeCount()
    {
        java.util.List $r0, $r1;
        int $i0;
        java.lang.Throwable $r2;

        $r0 = <timber.log.Timber: java.util.List FOREST>;

        entermonitor $r0;

     label1:
        $r1 = <timber.log.Timber: java.util.List FOREST>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        exitmonitor $r0;

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static void uproot(timber.log.Timber$Tree)
    {
        timber.log.Timber$Tree $r0;
        java.util.List $r1, $r2, $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        int $i0;
        timber.log.Timber$Tree[] $r8;
        java.lang.Object[] $r9;

        $r0 := @parameter0: timber.log.Timber$Tree;

        $r1 = <timber.log.Timber: java.util.List FOREST>;

        entermonitor $r1;

     label1:
        $r2 = <timber.log.Timber: java.util.List FOREST>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r0);

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot uproot tree which is not planted: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label3:
        throw $r6;

     label4:
        $r2 = <timber.log.Timber: java.util.List FOREST>;

        $r7 = <timber.log.Timber: java.util.List FOREST>;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r8 = newarray (timber.log.Timber$Tree)[$i0];

        $r9 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r8 = (timber.log.Timber$Tree[]) $r9;

        <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray> = $r8;

        exitmonitor $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }
    public static void uprootAll()
    {
        java.util.List $r0, $r1;
        timber.log.Timber$Tree[] $r2;
        java.lang.Throwable $r3;

        $r0 = <timber.log.Timber: java.util.List FOREST>;

        entermonitor $r0;

     label1:
        $r1 = <timber.log.Timber: java.util.List FOREST>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = <timber.log.Timber: timber.log.Timber$Tree[] TREE_ARRAY_EMPTY>;

        <timber.log.Timber: timber.log.Timber$Tree[] forestAsArray> = $r2;

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
    public static transient void v(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void v(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static void v(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void v(java.lang.Throwable)>($r0);

        return;
    }
    public static transient void v(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void v(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void w(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void w(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static void w(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void w(java.lang.Throwable)>($r0);

        return;
    }
    public static transient void w(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void w(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
    public static transient void wtf(java.lang.String, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        timber.log.Timber$Tree $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r2.<timber.log.Timber$Tree: void wtf(java.lang.String,java.lang.Object[])>($r0, $r1);

        return;
    }
    public static void wtf(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        timber.log.Timber$Tree $r1;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r1.<timber.log.Timber$Tree: void wtf(java.lang.Throwable)>($r0);

        return;
    }
    public static transient void wtf(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        timber.log.Timber$Tree $r3;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = <timber.log.Timber: timber.log.Timber$Tree TREE_OF_SOULS>;

        virtualinvoke $r3.<timber.log.Timber$Tree: void wtf(java.lang.Throwable,java.lang.String,java.lang.Object[])>($r0, $r1, $r2);

        return;
    }
