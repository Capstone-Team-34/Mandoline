timber.log.Timber$Tree extends java.lang.Object
final java.lang.ThreadLocal explicitTag
    public void <init>()
    {
        timber.log.Timber$Tree r0;
        java.lang.ThreadLocal $r1;

        r0 := @this: timber.log.Timber$Tree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        r0.<timber.log.Timber$Tree: java.lang.ThreadLocal explicitTag> = $r1;

        return;
    }
    private java.lang.String getStackTraceString(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.io.PrintWriter r2;
        java.io.StringWriter r3;
        java.lang.String $r4;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        r3 = new java.io.StringWriter;

        specialinvoke r3.<java.io.StringWriter: void <init>(int)>(256);

        r2 = new java.io.PrintWriter;

        specialinvoke r2.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>(r3, 0);

        virtualinvoke $r1.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r2);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        $r4 = virtualinvoke r3.<java.io.StringWriter: java.lang.String toString()>();

        return $r4;
    }
    private transient void prepareLog(int, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        int $i0, $i1;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: timber.log.Timber$Tree;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Throwable;

        $r3 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.Object[];

        $r4 = virtualinvoke r0.<timber.log.Timber$Tree: java.lang.String getTag()>();

        $z0 = virtualinvoke r0.<timber.log.Timber$Tree: boolean isLoggable(java.lang.String,int)>($r4, $i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        if $r3 == null goto label2;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        $r3 = null;

     label2:
        if $r3 != null goto label4;

        if $r1 == null goto label6;

        $r3 = specialinvoke r0.<timber.log.Timber$Tree: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

     label3:
        virtualinvoke r0.<timber.log.Timber$Tree: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)>($i0, $r4, $r3, $r1);

        return;

     label4:
        $i1 = lengthof $r2;

        if $i1 <= 0 goto label5;

        $r3 = virtualinvoke r0.<timber.log.Timber$Tree: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>($r3, $r2);

     label5:
        if $r1 == null goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = specialinvoke r0.<timber.log.Timber$Tree: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label6:
        return;
    }
    public transient void d(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(3, null, $r1, $r2);

        return;
    }
    public void d(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(3, $r1, null, $r2);

        return;
    }
    public transient void d(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(3, $r1, $r2, $r3);

        return;
    }
    public transient void e(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(6, null, $r1, $r2);

        return;
    }
    public void e(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(6, $r1, null, $r2);

        return;
    }
    public transient void e(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(6, $r1, $r2, $r3);

        return;
    }
    protected java.lang.String formatMessage(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2);

        return $r1;
    }
    java.lang.String getTag()
    {
        timber.log.Timber$Tree r0;
        java.lang.Object $r1;
        java.lang.ThreadLocal $r2;
        java.lang.String r3;

        r0 := @this: timber.log.Timber$Tree;

        $r2 = r0.<timber.log.Timber$Tree: java.lang.ThreadLocal explicitTag>;

        $r1 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.lang.String) $r1;

        if r3 == null goto label1;

        $r2 = r0.<timber.log.Timber$Tree: java.lang.ThreadLocal explicitTag>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void remove()>();

     label1:
        return r3;
    }
    public transient void i(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(4, null, $r1, $r2);

        return;
    }
    public void i(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(4, $r1, null, $r2);

        return;
    }
    public transient void i(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(4, $r1, $r2, $r3);

        return;
    }
    protected boolean isLoggable(int)
    {
        timber.log.Timber$Tree r0;
        int $i0;

        r0 := @this: timber.log.Timber$Tree;

        $i0 := @parameter0: int;

        return 1;
    }
    protected boolean isLoggable(java.lang.String, int)
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<timber.log.Timber$Tree: boolean isLoggable(int)>($i0);

        return $z0;
    }
protected abstract void log(int, java.lang.String, java.lang.String, java.lang.Throwable) { 
// no body
} 
    public transient void log(int, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        int $i0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>($i0, null, $r1, $r2);

        return;
    }
    public void log(int, java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        int $i0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>($i0, $r1, null, $r2);

        return;
    }
    public transient void log(int, java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        int $i0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>($i0, $r1, $r2, $r3);

        return;
    }
    public transient void v(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(2, null, $r1, $r2);

        return;
    }
    public void v(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(2, $r1, null, $r2);

        return;
    }
    public transient void v(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(2, $r1, $r2, $r3);

        return;
    }
    public transient void w(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(5, null, $r1, $r2);

        return;
    }
    public void w(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(5, $r1, null, $r2);

        return;
    }
    public transient void w(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(5, $r1, $r2, $r3);

        return;
    }
    public transient void wtf(java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(7, null, $r1, $r2);

        return;
    }
    public void wtf(java.lang.Throwable)
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(7, $r1, null, $r2);

        return;
    }
    public transient void wtf(java.lang.Throwable, java.lang.String, java.lang.Object[])
    {
        timber.log.Timber$Tree r0;
        java.lang.Throwable $r1;
        java.lang.String $r2;
        java.lang.Object[] $r3;

        r0 := @this: timber.log.Timber$Tree;

        $r1 := @parameter0: java.lang.Throwable;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<timber.log.Timber$Tree: void prepareLog(int,java.lang.Throwable,java.lang.String,java.lang.Object[])>(7, $r1, $r2, $r3);

        return;
    }
